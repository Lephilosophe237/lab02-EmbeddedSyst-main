
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007df8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002458  08007fc8  08007fc8  00008fc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a420  0800a420  0000c1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a420  0800a420  0000b420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a428  0800a428  0000c1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a428  0800a428  0000b428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a42c  0800a42c  0000b42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800a430  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  200001e4  0800a614  0000c1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000890  0800a614  0000c890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129ff  00000000  00000000  0000c214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292a  00000000  00000000  0001ec13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00021540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e02  00000000  00000000  00022708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e2d  00000000  00000000  0002350a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016941  00000000  00000000  00048337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e20bb  00000000  00000000  0005ec78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140d33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d2c  00000000  00000000  00140d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00146aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007fb0 	.word	0x08007fb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08007fb0 	.word	0x08007fb0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <uart2_write>:
/* USER CODE BEGIN 0 */
uint32_t sensorValue = 0;
float fvoltage = 0;

int uart2_write(int ch)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & USART_SR_TXE)){}
 8000f80:	bf00      	nop
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <uart2_write+0x2c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f9      	beq.n	8000f82 <uart2_write+0xa>

	 /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <uart2_write+0x2c>)
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	6053      	str	r3, [r2, #4]
	return ch;
 8000f96:	687b      	ldr	r3, [r7, #4]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	40004400 	.word	0x40004400

08000fa8 <__io_putchar>:

int __io_putchar(int ch)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ffe1 	bl	8000f78 <uart2_write>
	return ch;
 8000fb6:	687b      	ldr	r3, [r7, #4]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0a6      	sub	sp, #152	@ 0x98
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc6:	f001 f847 	bl	8002058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fca:	f000 f8b7 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fce:	f000 f9cd 	bl	800136c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fd2:	f000 f9a1 	bl	8001318 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fd6:	f000 f971 	bl	80012bc <MX_I2C1_Init>
  MX_ADC1_Init();
 8000fda:	f000 f91d 	bl	8001218 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 8000fde:	f000 fac1 	bl	8001564 <SSD1306_Init>
  char snum[50];
  char msg[100];
  SSD1306_GotoXY (0,0);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f000 fc27 	bl	8001838 <SSD1306_GotoXY>
  SSD1306_Puts ("NIZAR", &Font_11x18, 1);
 8000fea:	2201      	movs	r2, #1
 8000fec:	4948      	ldr	r1, [pc, #288]	@ (8001110 <main+0x150>)
 8000fee:	4849      	ldr	r0, [pc, #292]	@ (8001114 <main+0x154>)
 8000ff0:	f000 fcb6 	bl	8001960 <SSD1306_Puts>
  SSD1306_GotoXY (0, 30);
 8000ff4:	211e      	movs	r1, #30
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f000 fc1e 	bl	8001838 <SSD1306_GotoXY>
  SSD1306_Puts ("MOHIDEEN", &Font_11x18, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4944      	ldr	r1, [pc, #272]	@ (8001110 <main+0x150>)
 8001000:	4845      	ldr	r0, [pc, #276]	@ (8001118 <main+0x158>)
 8001002:	f000 fcad 	bl	8001960 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001006:	f000 fb71 	bl	80016ec <SSD1306_UpdateScreen>
  HAL_Delay (1000);
 800100a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800100e:	f001 f865 	bl	80020dc <HAL_Delay>

  SSD1306_ScrollRight(0,7);
 8001012:	2107      	movs	r1, #7
 8001014:	2000      	movs	r0, #0
 8001016:	f000 fa2f 	bl	8001478 <SSD1306_ScrollRight>
  HAL_Delay(3000);
 800101a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800101e:	f001 f85d 	bl	80020dc <HAL_Delay>
  SSD1306_ScrollLeft(0,7);
 8001022:	2107      	movs	r1, #7
 8001024:	2000      	movs	r0, #0
 8001026:	f000 fa5d 	bl	80014e4 <SSD1306_ScrollLeft>
  HAL_Delay(3000);
 800102a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800102e:	f001 f855 	bl	80020dc <HAL_Delay>
  SSD1306_Stopscroll();
 8001032:	f000 fa8d 	bl	8001550 <SSD1306_Stopscroll>
  SSD1306_Clear();
 8001036:	f000 fcb8 	bl	80019aa <SSD1306_Clear>
  SSD1306_GotoXY (35,0);
 800103a:	2100      	movs	r1, #0
 800103c:	2023      	movs	r0, #35	@ 0x23
 800103e:	f000 fbfb 	bl	8001838 <SSD1306_GotoXY>
  SSD1306_Puts ("SCORE", &Font_11x18, 1);
 8001042:	2201      	movs	r2, #1
 8001044:	4932      	ldr	r1, [pc, #200]	@ (8001110 <main+0x150>)
 8001046:	4835      	ldr	r0, [pc, #212]	@ (800111c <main+0x15c>)
 8001048:	f000 fc8a 	bl	8001960 <SSD1306_Puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 800104c:	4834      	ldr	r0, [pc, #208]	@ (8001120 <main+0x160>)
 800104e:	f001 f8ad 	bl	80021ac <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1);
 8001052:	2101      	movs	r1, #1
 8001054:	4832      	ldr	r0, [pc, #200]	@ (8001120 <main+0x160>)
 8001056:	f001 f97b 	bl	8002350 <HAL_ADC_PollForConversion>
	  sensorValue = HAL_ADC_GetValue(&hadc1);
 800105a:	4831      	ldr	r0, [pc, #196]	@ (8001120 <main+0x160>)
 800105c:	f001 fa03 	bl	8002466 <HAL_ADC_GetValue>
 8001060:	4603      	mov	r3, r0
 8001062:	4a30      	ldr	r2, [pc, #192]	@ (8001124 <main+0x164>)
 8001064:	6013      	str	r3, [r2, #0]
	  fvoltage = (float)sensorValue * (3.3/4095.0);
 8001066:	4b2f      	ldr	r3, [pc, #188]	@ (8001124 <main+0x164>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001072:	ee17 0a90 	vmov	r0, s15
 8001076:	f7ff fa87 	bl	8000588 <__aeabi_f2d>
 800107a:	a323      	add	r3, pc, #140	@ (adr r3, 8001108 <main+0x148>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff fada 	bl	8000638 <__aeabi_dmul>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f7ff fdac 	bl	8000be8 <__aeabi_d2f>
 8001090:	4603      	mov	r3, r0
 8001092:	4a25      	ldr	r2, [pc, #148]	@ (8001128 <main+0x168>)
 8001094:	6013      	str	r3, [r2, #0]

	  sprintf(msg, "%f\r\n", fvoltage);
 8001096:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <main+0x168>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa74 	bl	8000588 <__aeabi_f2d>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4638      	mov	r0, r7
 80010a6:	4921      	ldr	r1, [pc, #132]	@ (800112c <main+0x16c>)
 80010a8:	f004 fe56 	bl	8005d58 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80010ac:	463b      	mov	r3, r7
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f8fe 	bl	80002b0 <strlen>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4639      	mov	r1, r7
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	481c      	ldr	r0, [pc, #112]	@ (8001130 <main+0x170>)
 80010c0:	f003 fd74 	bl	8004bac <HAL_UART_Transmit>

	  sprintf(snum, "%f", fvoltage);
 80010c4:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <main+0x168>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa5d 	bl	8000588 <__aeabi_f2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 80010d6:	4917      	ldr	r1, [pc, #92]	@ (8001134 <main+0x174>)
 80010d8:	f004 fe3e 	bl	8005d58 <siprintf>


	  SSD1306_Clear();
 80010dc:	f000 fc65 	bl	80019aa <SSD1306_Clear>
	  SSD1306_GotoXY (0, 30);
 80010e0:	211e      	movs	r1, #30
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 fba8 	bl	8001838 <SSD1306_GotoXY>
	  SSD1306_Puts (snum, &Font_16x26, 1);
 80010e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010ec:	2201      	movs	r2, #1
 80010ee:	4912      	ldr	r1, [pc, #72]	@ (8001138 <main+0x178>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fc35 	bl	8001960 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80010f6:	f000 faf9 	bl	80016ec <SSD1306_UpdateScreen>

	  HAL_Delay (500);
 80010fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010fe:	f000 ffed 	bl	80020dc <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001102:	bf00      	nop
 8001104:	e7a2      	b.n	800104c <main+0x8c>
 8001106:	bf00      	nop
 8001108:	e734d9b4 	.word	0xe734d9b4
 800110c:	3f4a680c 	.word	0x3f4a680c
 8001110:	20000000 	.word	0x20000000
 8001114:	08007fc8 	.word	0x08007fc8
 8001118:	08007fd0 	.word	0x08007fd0
 800111c:	08007fdc 	.word	0x08007fdc
 8001120:	20000200 	.word	0x20000200
 8001124:	200002e4 	.word	0x200002e4
 8001128:	200002e8 	.word	0x200002e8
 800112c:	08007fe4 	.word	0x08007fe4
 8001130:	2000029c 	.word	0x2000029c
 8001134:	08007fec 	.word	0x08007fec
 8001138:	20000008 	.word	0x20000008

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b094      	sub	sp, #80	@ 0x50
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	2234      	movs	r2, #52	@ 0x34
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f004 fe67 	bl	8005e1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	4b2a      	ldr	r3, [pc, #168]	@ (8001210 <SystemClock_Config+0xd4>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	4a29      	ldr	r2, [pc, #164]	@ (8001210 <SystemClock_Config+0xd4>)
 800116a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800116e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001170:	4b27      	ldr	r3, [pc, #156]	@ (8001210 <SystemClock_Config+0xd4>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800117c:	2300      	movs	r3, #0
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	4b24      	ldr	r3, [pc, #144]	@ (8001214 <SystemClock_Config+0xd8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001188:	4a22      	ldr	r2, [pc, #136]	@ (8001214 <SystemClock_Config+0xd8>)
 800118a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <SystemClock_Config+0xd8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119c:	2302      	movs	r3, #2
 800119e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a0:	2301      	movs	r3, #1
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a4:	2310      	movs	r3, #16
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a8:	2302      	movs	r3, #2
 80011aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011b0:	2310      	movs	r3, #16
 80011b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011ba:	2304      	movs	r3, #4
 80011bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011be:	2302      	movs	r3, #2
 80011c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 ff5e 	bl	800408c <HAL_RCC_OscConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011d6:	f000 f949 	bl	800146c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011da:	230f      	movs	r3, #15
 80011dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011de:	2302      	movs	r3, #2
 80011e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	2102      	movs	r1, #2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fbcc 	bl	8003994 <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001202:	f000 f933 	bl	800146c <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3750      	adds	r7, #80	@ 0x50
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40007000 	.word	0x40007000

08001218 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800121e:	463b      	mov	r3, r7
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800122a:	4b21      	ldr	r3, [pc, #132]	@ (80012b0 <MX_ADC1_Init+0x98>)
 800122c:	4a21      	ldr	r2, [pc, #132]	@ (80012b4 <MX_ADC1_Init+0x9c>)
 800122e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001230:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <MX_ADC1_Init+0x98>)
 8001232:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001236:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001238:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <MX_ADC1_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800123e:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <MX_ADC1_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001244:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <MX_ADC1_Init+0x98>)
 8001246:	2200      	movs	r2, #0
 8001248:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800124a:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <MX_ADC1_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001252:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <MX_ADC1_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001258:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <MX_ADC1_Init+0x98>)
 800125a:	4a17      	ldr	r2, [pc, #92]	@ (80012b8 <MX_ADC1_Init+0xa0>)
 800125c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125e:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <MX_ADC1_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <MX_ADC1_Init+0x98>)
 8001266:	2201      	movs	r2, #1
 8001268:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <MX_ADC1_Init+0x98>)
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001272:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <MX_ADC1_Init+0x98>)
 8001274:	2201      	movs	r2, #1
 8001276:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001278:	480d      	ldr	r0, [pc, #52]	@ (80012b0 <MX_ADC1_Init+0x98>)
 800127a:	f000 ff53 	bl	8002124 <HAL_ADC_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001284:	f000 f8f2 	bl	800146c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001288:	2300      	movs	r3, #0
 800128a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800128c:	2301      	movs	r3, #1
 800128e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_ADC1_Init+0x98>)
 800129a:	f001 f8f1 	bl	8002480 <HAL_ADC_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012a4:	f000 f8e2 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000200 	.word	0x20000200
 80012b4:	40012000 	.word	0x40012000
 80012b8:	0f000001 	.word	0x0f000001

080012bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <MX_I2C1_Init+0x50>)
 80012c2:	4a13      	ldr	r2, [pc, #76]	@ (8001310 <MX_I2C1_Init+0x54>)
 80012c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_I2C1_Init+0x50>)
 80012c8:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <MX_I2C1_Init+0x58>)
 80012ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_I2C1_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_I2C1_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <MX_I2C1_Init+0x50>)
 80012da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <MX_I2C1_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <MX_I2C1_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ec:	4b07      	ldr	r3, [pc, #28]	@ (800130c <MX_I2C1_Init+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <MX_I2C1_Init+0x50>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	@ (800130c <MX_I2C1_Init+0x50>)
 80012fa:	f001 fd7f 	bl	8002dfc <HAL_I2C_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001304:	f000 f8b2 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000248 	.word	0x20000248
 8001310:	40005400 	.word	0x40005400
 8001314:	00061a80 	.word	0x00061a80

08001318 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 800131e:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <MX_USART2_UART_Init+0x50>)
 8001320:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 8001324:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001328:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b0e      	ldr	r3, [pc, #56]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800134e:	4805      	ldr	r0, [pc, #20]	@ (8001364 <MX_USART2_UART_Init+0x4c>)
 8001350:	f003 fbdc 	bl	8004b0c <HAL_UART_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800135a:	f000 f887 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000029c 	.word	0x2000029c
 8001368:	40004400 	.word	0x40004400

0800136c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	@ 0x28
 8001370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b2d      	ldr	r3, [pc, #180]	@ (800143c <MX_GPIO_Init+0xd0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a2c      	ldr	r2, [pc, #176]	@ (800143c <MX_GPIO_Init+0xd0>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b2a      	ldr	r3, [pc, #168]	@ (800143c <MX_GPIO_Init+0xd0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b26      	ldr	r3, [pc, #152]	@ (800143c <MX_GPIO_Init+0xd0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a25      	ldr	r2, [pc, #148]	@ (800143c <MX_GPIO_Init+0xd0>)
 80013a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b23      	ldr	r3, [pc, #140]	@ (800143c <MX_GPIO_Init+0xd0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <MX_GPIO_Init+0xd0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a1e      	ldr	r2, [pc, #120]	@ (800143c <MX_GPIO_Init+0xd0>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <MX_GPIO_Init+0xd0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <MX_GPIO_Init+0xd0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a17      	ldr	r2, [pc, #92]	@ (800143c <MX_GPIO_Init+0xd0>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <MX_GPIO_Init+0xd0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2120      	movs	r1, #32
 80013f6:	4812      	ldr	r0, [pc, #72]	@ (8001440 <MX_GPIO_Init+0xd4>)
 80013f8:	f001 fce6 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001402:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	480c      	ldr	r0, [pc, #48]	@ (8001444 <MX_GPIO_Init+0xd8>)
 8001414:	f001 fb44 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001418:	2320      	movs	r3, #32
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4804      	ldr	r0, [pc, #16]	@ (8001440 <MX_GPIO_Init+0xd4>)
 8001430:	f001 fb36 	bl	8002aa0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	@ 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000
 8001444:	40020800 	.word	0x40020800

08001448 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a04      	ldr	r2, [pc, #16]	@ (8001468 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800145a:	f000 fe1f 	bl	800209c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40001000 	.word	0x40001000

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <Error_Handler+0x8>

08001478 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	460a      	mov	r2, r1
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	4613      	mov	r3, r2
 8001486:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8001488:	2226      	movs	r2, #38	@ 0x26
 800148a:	2100      	movs	r1, #0
 800148c:	2078      	movs	r0, #120	@ 0x78
 800148e:	f000 fb11 	bl	8001ab4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2078      	movs	r0, #120	@ 0x78
 8001498:	f000 fb0c 	bl	8001ab4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	461a      	mov	r2, r3
 80014a0:	2100      	movs	r1, #0
 80014a2:	2078      	movs	r0, #120	@ 0x78
 80014a4:	f000 fb06 	bl	8001ab4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	2078      	movs	r0, #120	@ 0x78
 80014ae:	f000 fb01 	bl	8001ab4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80014b2:	79bb      	ldrb	r3, [r7, #6]
 80014b4:	461a      	mov	r2, r3
 80014b6:	2100      	movs	r1, #0
 80014b8:	2078      	movs	r0, #120	@ 0x78
 80014ba:	f000 fafb 	bl	8001ab4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	2078      	movs	r0, #120	@ 0x78
 80014c4:	f000 faf6 	bl	8001ab4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80014c8:	22ff      	movs	r2, #255	@ 0xff
 80014ca:	2100      	movs	r1, #0
 80014cc:	2078      	movs	r0, #120	@ 0x78
 80014ce:	f000 faf1 	bl	8001ab4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80014d2:	222f      	movs	r2, #47	@ 0x2f
 80014d4:	2100      	movs	r1, #0
 80014d6:	2078      	movs	r0, #120	@ 0x78
 80014d8:	f000 faec 	bl	8001ab4 <ssd1306_I2C_Write>
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	4613      	mov	r3, r2
 80014f2:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 80014f4:	2227      	movs	r2, #39	@ 0x27
 80014f6:	2100      	movs	r1, #0
 80014f8:	2078      	movs	r0, #120	@ 0x78
 80014fa:	f000 fadb 	bl	8001ab4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2078      	movs	r0, #120	@ 0x78
 8001504:	f000 fad6 	bl	8001ab4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	461a      	mov	r2, r3
 800150c:	2100      	movs	r1, #0
 800150e:	2078      	movs	r0, #120	@ 0x78
 8001510:	f000 fad0 	bl	8001ab4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	2078      	movs	r0, #120	@ 0x78
 800151a:	f000 facb 	bl	8001ab4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800151e:	79bb      	ldrb	r3, [r7, #6]
 8001520:	461a      	mov	r2, r3
 8001522:	2100      	movs	r1, #0
 8001524:	2078      	movs	r0, #120	@ 0x78
 8001526:	f000 fac5 	bl	8001ab4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2078      	movs	r0, #120	@ 0x78
 8001530:	f000 fac0 	bl	8001ab4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8001534:	22ff      	movs	r2, #255	@ 0xff
 8001536:	2100      	movs	r1, #0
 8001538:	2078      	movs	r0, #120	@ 0x78
 800153a:	f000 fabb 	bl	8001ab4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 800153e:	222f      	movs	r2, #47	@ 0x2f
 8001540:	2100      	movs	r1, #0
 8001542:	2078      	movs	r0, #120	@ 0x78
 8001544:	f000 fab6 	bl	8001ab4 <ssd1306_I2C_Write>
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001554:	222e      	movs	r2, #46	@ 0x2e
 8001556:	2100      	movs	r1, #0
 8001558:	2078      	movs	r0, #120	@ 0x78
 800155a:	f000 faab 	bl	8001ab4 <ssd1306_I2C_Write>
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800156a:	f000 fa27 	bl	80019bc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800156e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001572:	2201      	movs	r2, #1
 8001574:	2178      	movs	r1, #120	@ 0x78
 8001576:	485b      	ldr	r0, [pc, #364]	@ (80016e4 <SSD1306_Init+0x180>)
 8001578:	f001 fe82 	bl	8003280 <HAL_I2C_IsDeviceReady>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001582:	2300      	movs	r3, #0
 8001584:	e0a9      	b.n	80016da <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001586:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800158a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800158c:	e002      	b.n	8001594 <SSD1306_Init+0x30>
		p--;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3b01      	subs	r3, #1
 8001592:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f9      	bne.n	800158e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800159a:	22ae      	movs	r2, #174	@ 0xae
 800159c:	2100      	movs	r1, #0
 800159e:	2078      	movs	r0, #120	@ 0x78
 80015a0:	f000 fa88 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80015a4:	2220      	movs	r2, #32
 80015a6:	2100      	movs	r1, #0
 80015a8:	2078      	movs	r0, #120	@ 0x78
 80015aa:	f000 fa83 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80015ae:	2210      	movs	r2, #16
 80015b0:	2100      	movs	r1, #0
 80015b2:	2078      	movs	r0, #120	@ 0x78
 80015b4:	f000 fa7e 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80015b8:	22b0      	movs	r2, #176	@ 0xb0
 80015ba:	2100      	movs	r1, #0
 80015bc:	2078      	movs	r0, #120	@ 0x78
 80015be:	f000 fa79 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80015c2:	22c8      	movs	r2, #200	@ 0xc8
 80015c4:	2100      	movs	r1, #0
 80015c6:	2078      	movs	r0, #120	@ 0x78
 80015c8:	f000 fa74 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80015cc:	2200      	movs	r2, #0
 80015ce:	2100      	movs	r1, #0
 80015d0:	2078      	movs	r0, #120	@ 0x78
 80015d2:	f000 fa6f 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80015d6:	2210      	movs	r2, #16
 80015d8:	2100      	movs	r1, #0
 80015da:	2078      	movs	r0, #120	@ 0x78
 80015dc:	f000 fa6a 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80015e0:	2240      	movs	r2, #64	@ 0x40
 80015e2:	2100      	movs	r1, #0
 80015e4:	2078      	movs	r0, #120	@ 0x78
 80015e6:	f000 fa65 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80015ea:	2281      	movs	r2, #129	@ 0x81
 80015ec:	2100      	movs	r1, #0
 80015ee:	2078      	movs	r0, #120	@ 0x78
 80015f0:	f000 fa60 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80015f4:	22ff      	movs	r2, #255	@ 0xff
 80015f6:	2100      	movs	r1, #0
 80015f8:	2078      	movs	r0, #120	@ 0x78
 80015fa:	f000 fa5b 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80015fe:	22a1      	movs	r2, #161	@ 0xa1
 8001600:	2100      	movs	r1, #0
 8001602:	2078      	movs	r0, #120	@ 0x78
 8001604:	f000 fa56 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001608:	22a6      	movs	r2, #166	@ 0xa6
 800160a:	2100      	movs	r1, #0
 800160c:	2078      	movs	r0, #120	@ 0x78
 800160e:	f000 fa51 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001612:	22a8      	movs	r2, #168	@ 0xa8
 8001614:	2100      	movs	r1, #0
 8001616:	2078      	movs	r0, #120	@ 0x78
 8001618:	f000 fa4c 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800161c:	223f      	movs	r2, #63	@ 0x3f
 800161e:	2100      	movs	r1, #0
 8001620:	2078      	movs	r0, #120	@ 0x78
 8001622:	f000 fa47 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001626:	22a4      	movs	r2, #164	@ 0xa4
 8001628:	2100      	movs	r1, #0
 800162a:	2078      	movs	r0, #120	@ 0x78
 800162c:	f000 fa42 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001630:	22d3      	movs	r2, #211	@ 0xd3
 8001632:	2100      	movs	r1, #0
 8001634:	2078      	movs	r0, #120	@ 0x78
 8001636:	f000 fa3d 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	2078      	movs	r0, #120	@ 0x78
 8001640:	f000 fa38 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001644:	22d5      	movs	r2, #213	@ 0xd5
 8001646:	2100      	movs	r1, #0
 8001648:	2078      	movs	r0, #120	@ 0x78
 800164a:	f000 fa33 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800164e:	22f0      	movs	r2, #240	@ 0xf0
 8001650:	2100      	movs	r1, #0
 8001652:	2078      	movs	r0, #120	@ 0x78
 8001654:	f000 fa2e 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001658:	22d9      	movs	r2, #217	@ 0xd9
 800165a:	2100      	movs	r1, #0
 800165c:	2078      	movs	r0, #120	@ 0x78
 800165e:	f000 fa29 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001662:	2222      	movs	r2, #34	@ 0x22
 8001664:	2100      	movs	r1, #0
 8001666:	2078      	movs	r0, #120	@ 0x78
 8001668:	f000 fa24 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800166c:	22da      	movs	r2, #218	@ 0xda
 800166e:	2100      	movs	r1, #0
 8001670:	2078      	movs	r0, #120	@ 0x78
 8001672:	f000 fa1f 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001676:	2212      	movs	r2, #18
 8001678:	2100      	movs	r1, #0
 800167a:	2078      	movs	r0, #120	@ 0x78
 800167c:	f000 fa1a 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001680:	22db      	movs	r2, #219	@ 0xdb
 8001682:	2100      	movs	r1, #0
 8001684:	2078      	movs	r0, #120	@ 0x78
 8001686:	f000 fa15 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800168a:	2220      	movs	r2, #32
 800168c:	2100      	movs	r1, #0
 800168e:	2078      	movs	r0, #120	@ 0x78
 8001690:	f000 fa10 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001694:	228d      	movs	r2, #141	@ 0x8d
 8001696:	2100      	movs	r1, #0
 8001698:	2078      	movs	r0, #120	@ 0x78
 800169a:	f000 fa0b 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800169e:	2214      	movs	r2, #20
 80016a0:	2100      	movs	r1, #0
 80016a2:	2078      	movs	r0, #120	@ 0x78
 80016a4:	f000 fa06 	bl	8001ab4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80016a8:	22af      	movs	r2, #175	@ 0xaf
 80016aa:	2100      	movs	r1, #0
 80016ac:	2078      	movs	r0, #120	@ 0x78
 80016ae:	f000 fa01 	bl	8001ab4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80016b2:	222e      	movs	r2, #46	@ 0x2e
 80016b4:	2100      	movs	r1, #0
 80016b6:	2078      	movs	r0, #120	@ 0x78
 80016b8:	f000 f9fc 	bl	8001ab4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80016bc:	2000      	movs	r0, #0
 80016be:	f000 f843 	bl	8001748 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80016c2:	f000 f813 	bl	80016ec <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80016c6:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <SSD1306_Init+0x184>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <SSD1306_Init+0x184>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80016d2:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <SSD1306_Init+0x184>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000248 	.word	0x20000248
 80016e8:	200006ec 	.word	0x200006ec

080016ec <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	e01d      	b.n	8001734 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	3b50      	subs	r3, #80	@ 0x50
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	461a      	mov	r2, r3
 8001700:	2100      	movs	r1, #0
 8001702:	2078      	movs	r0, #120	@ 0x78
 8001704:	f000 f9d6 	bl	8001ab4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001708:	2200      	movs	r2, #0
 800170a:	2100      	movs	r1, #0
 800170c:	2078      	movs	r0, #120	@ 0x78
 800170e:	f000 f9d1 	bl	8001ab4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001712:	2210      	movs	r2, #16
 8001714:	2100      	movs	r1, #0
 8001716:	2078      	movs	r0, #120	@ 0x78
 8001718:	f000 f9cc 	bl	8001ab4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	01db      	lsls	r3, r3, #7
 8001720:	4a08      	ldr	r2, [pc, #32]	@ (8001744 <SSD1306_UpdateScreen+0x58>)
 8001722:	441a      	add	r2, r3
 8001724:	2380      	movs	r3, #128	@ 0x80
 8001726:	2140      	movs	r1, #64	@ 0x40
 8001728:	2078      	movs	r0, #120	@ 0x78
 800172a:	f000 f95d 	bl	80019e8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	3301      	adds	r3, #1
 8001732:	71fb      	strb	r3, [r7, #7]
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b07      	cmp	r3, #7
 8001738:	d9de      	bls.n	80016f8 <SSD1306_UpdateScreen+0xc>
	}
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200002ec 	.word	0x200002ec

08001748 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <SSD1306_Fill+0x14>
 8001758:	2300      	movs	r3, #0
 800175a:	e000      	b.n	800175e <SSD1306_Fill+0x16>
 800175c:	23ff      	movs	r3, #255	@ 0xff
 800175e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001762:	4619      	mov	r1, r3
 8001764:	4803      	ldr	r0, [pc, #12]	@ (8001774 <SSD1306_Fill+0x2c>)
 8001766:	f004 fb5a 	bl	8005e1e <memset>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200002ec 	.word	0x200002ec

08001778 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
 8001782:	460b      	mov	r3, r1
 8001784:	80bb      	strh	r3, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	70fb      	strb	r3, [r7, #3]
	if (
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	2b7f      	cmp	r3, #127	@ 0x7f
 800178e:	d848      	bhi.n	8001822 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	2b3f      	cmp	r3, #63	@ 0x3f
 8001794:	d845      	bhi.n	8001822 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001796:	4b26      	ldr	r3, [pc, #152]	@ (8001830 <SSD1306_DrawPixel+0xb8>)
 8001798:	791b      	ldrb	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d006      	beq.n	80017ac <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf0c      	ite	eq
 80017a4:	2301      	moveq	r3, #1
 80017a6:	2300      	movne	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d11a      	bne.n	80017e8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80017b2:	88fa      	ldrh	r2, [r7, #6]
 80017b4:	88bb      	ldrh	r3, [r7, #4]
 80017b6:	08db      	lsrs	r3, r3, #3
 80017b8:	b298      	uxth	r0, r3
 80017ba:	4603      	mov	r3, r0
 80017bc:	01db      	lsls	r3, r3, #7
 80017be:	4413      	add	r3, r2
 80017c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001834 <SSD1306_DrawPixel+0xbc>)
 80017c2:	5cd3      	ldrb	r3, [r2, r3]
 80017c4:	b25a      	sxtb	r2, r3
 80017c6:	88bb      	ldrh	r3, [r7, #4]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	2101      	movs	r1, #1
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b259      	sxtb	r1, r3
 80017d8:	88fa      	ldrh	r2, [r7, #6]
 80017da:	4603      	mov	r3, r0
 80017dc:	01db      	lsls	r3, r3, #7
 80017de:	4413      	add	r3, r2
 80017e0:	b2c9      	uxtb	r1, r1
 80017e2:	4a14      	ldr	r2, [pc, #80]	@ (8001834 <SSD1306_DrawPixel+0xbc>)
 80017e4:	54d1      	strb	r1, [r2, r3]
 80017e6:	e01d      	b.n	8001824 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017e8:	88fa      	ldrh	r2, [r7, #6]
 80017ea:	88bb      	ldrh	r3, [r7, #4]
 80017ec:	08db      	lsrs	r3, r3, #3
 80017ee:	b298      	uxth	r0, r3
 80017f0:	4603      	mov	r3, r0
 80017f2:	01db      	lsls	r3, r3, #7
 80017f4:	4413      	add	r3, r2
 80017f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001834 <SSD1306_DrawPixel+0xbc>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	b25a      	sxtb	r2, r3
 80017fc:	88bb      	ldrh	r3, [r7, #4]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	2101      	movs	r1, #1
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	b25b      	sxtb	r3, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	b25b      	sxtb	r3, r3
 800180e:	4013      	ands	r3, r2
 8001810:	b259      	sxtb	r1, r3
 8001812:	88fa      	ldrh	r2, [r7, #6]
 8001814:	4603      	mov	r3, r0
 8001816:	01db      	lsls	r3, r3, #7
 8001818:	4413      	add	r3, r2
 800181a:	b2c9      	uxtb	r1, r1
 800181c:	4a05      	ldr	r2, [pc, #20]	@ (8001834 <SSD1306_DrawPixel+0xbc>)
 800181e:	54d1      	strb	r1, [r2, r3]
 8001820:	e000      	b.n	8001824 <SSD1306_DrawPixel+0xac>
		return;
 8001822:	bf00      	nop
	}
}
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	200006ec 	.word	0x200006ec
 8001834:	200002ec 	.word	0x200002ec

08001838 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	460a      	mov	r2, r1
 8001842:	80fb      	strh	r3, [r7, #6]
 8001844:	4613      	mov	r3, r2
 8001846:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001848:	4a05      	ldr	r2, [pc, #20]	@ (8001860 <SSD1306_GotoXY+0x28>)
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800184e:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <SSD1306_GotoXY+0x28>)
 8001850:	88bb      	ldrh	r3, [r7, #4]
 8001852:	8053      	strh	r3, [r2, #2]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	200006ec 	.word	0x200006ec

08001864 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
 8001870:	4613      	mov	r3, r2
 8001872:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001874:	4b39      	ldr	r3, [pc, #228]	@ (800195c <SSD1306_Putc+0xf8>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
	if (
 8001880:	2b7f      	cmp	r3, #127	@ 0x7f
 8001882:	dc07      	bgt.n	8001894 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001884:	4b35      	ldr	r3, [pc, #212]	@ (800195c <SSD1306_Putc+0xf8>)
 8001886:	885b      	ldrh	r3, [r3, #2]
 8001888:	461a      	mov	r2, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	785b      	ldrb	r3, [r3, #1]
 800188e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001890:	2b3f      	cmp	r3, #63	@ 0x3f
 8001892:	dd01      	ble.n	8001898 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001894:	2300      	movs	r3, #0
 8001896:	e05d      	b.n	8001954 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	e04b      	b.n	8001936 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	3b20      	subs	r3, #32
 80018a6:	6839      	ldr	r1, [r7, #0]
 80018a8:	7849      	ldrb	r1, [r1, #1]
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	4619      	mov	r1, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	440b      	add	r3, r1
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	e030      	b.n	8001924 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d010      	beq.n	80018f4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80018d2:	4b22      	ldr	r3, [pc, #136]	@ (800195c <SSD1306_Putc+0xf8>)
 80018d4:	881a      	ldrh	r2, [r3, #0]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4413      	add	r3, r2
 80018dc:	b298      	uxth	r0, r3
 80018de:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <SSD1306_Putc+0xf8>)
 80018e0:	885a      	ldrh	r2, [r3, #2]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	79ba      	ldrb	r2, [r7, #6]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7ff ff43 	bl	8001778 <SSD1306_DrawPixel>
 80018f2:	e014      	b.n	800191e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80018f4:	4b19      	ldr	r3, [pc, #100]	@ (800195c <SSD1306_Putc+0xf8>)
 80018f6:	881a      	ldrh	r2, [r3, #0]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	b298      	uxth	r0, r3
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <SSD1306_Putc+0xf8>)
 8001902:	885a      	ldrh	r2, [r3, #2]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	b29b      	uxth	r3, r3
 8001908:	4413      	add	r3, r2
 800190a:	b299      	uxth	r1, r3
 800190c:	79bb      	ldrb	r3, [r7, #6]
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf0c      	ite	eq
 8001912:	2301      	moveq	r3, #1
 8001914:	2300      	movne	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	f7ff ff2d 	bl	8001778 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	3301      	adds	r3, #1
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4293      	cmp	r3, r2
 800192e:	d3c8      	bcc.n	80018c2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	785b      	ldrb	r3, [r3, #1]
 800193a:	461a      	mov	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	4293      	cmp	r3, r2
 8001940:	d3ad      	bcc.n	800189e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <SSD1306_Putc+0xf8>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	4413      	add	r3, r2
 800194c:	b29a      	uxth	r2, r3
 800194e:	4b03      	ldr	r3, [pc, #12]	@ (800195c <SSD1306_Putc+0xf8>)
 8001950:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001952:	79fb      	ldrb	r3, [r7, #7]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200006ec 	.word	0x200006ec

08001960 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	4613      	mov	r3, r2
 800196c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800196e:	e012      	b.n	8001996 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	79fa      	ldrb	r2, [r7, #7]
 8001976:	68b9      	ldr	r1, [r7, #8]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff73 	bl	8001864 <SSD1306_Putc>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d002      	beq.n	8001990 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	e008      	b.n	80019a2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3301      	adds	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1e8      	bne.n	8001970 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	781b      	ldrb	r3, [r3, #0]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff feca 	bl	8001748 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80019b4:	f7ff fe9a 	bl	80016ec <SSD1306_UpdateScreen>
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80019c2:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <ssd1306_I2C_Init+0x28>)
 80019c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019c6:	e002      	b.n	80019ce <ssd1306_I2C_Init+0x12>
		p--;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f9      	bne.n	80019c8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	0003d090 	.word	0x0003d090

080019e8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b0c7      	sub	sp, #284	@ 0x11c
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	4604      	mov	r4, r0
 80019f0:	4608      	mov	r0, r1
 80019f2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80019f6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80019fa:	600a      	str	r2, [r1, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a02:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001a06:	4622      	mov	r2, r4
 8001a08:	701a      	strb	r2, [r3, #0]
 8001a0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a0e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001a12:	4602      	mov	r2, r0
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a1e:	460a      	mov	r2, r1
 8001a20:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a2a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a2e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001a32:	7812      	ldrb	r2, [r2, #0]
 8001a34:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001a3c:	e015      	b.n	8001a6a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001a3e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a42:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a46:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	441a      	add	r2, r3
 8001a4e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a52:	3301      	adds	r3, #1
 8001a54:	7811      	ldrb	r1, [r2, #0]
 8001a56:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a5a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001a5e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001a60:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a64:	3301      	adds	r3, #1
 8001a66:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001a6a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a74:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001a78:	8812      	ldrh	r2, [r2, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d8df      	bhi.n	8001a3e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001a7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a82:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b299      	uxth	r1, r3
 8001a8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	f107 020c 	add.w	r2, r7, #12
 8001a9c:	200a      	movs	r0, #10
 8001a9e:	9000      	str	r0, [sp, #0]
 8001aa0:	4803      	ldr	r0, [pc, #12]	@ (8001ab0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001aa2:	f001 faef 	bl	8003084 <HAL_I2C_Master_Transmit>
}
 8001aa6:	bf00      	nop
 8001aa8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	20000248 	.word	0x20000248

08001ab4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	71bb      	strb	r3, [r7, #6]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001aca:	797b      	ldrb	r3, [r7, #5]
 8001acc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	b299      	uxth	r1, r3
 8001ad2:	f107 020c 	add.w	r2, r7, #12
 8001ad6:	230a      	movs	r3, #10
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2302      	movs	r3, #2
 8001adc:	4803      	ldr	r0, [pc, #12]	@ (8001aec <ssd1306_I2C_Write+0x38>)
 8001ade:	f001 fad1 	bl	8003084 <HAL_I2C_Master_Transmit>
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000248 	.word	0x20000248

08001af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <HAL_MspInit+0x4c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	4a0f      	ldr	r2, [pc, #60]	@ (8001b3c <HAL_MspInit+0x4c>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <HAL_MspInit+0x4c>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <HAL_MspInit+0x4c>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	4a08      	ldr	r2, [pc, #32]	@ (8001b3c <HAL_MspInit+0x4c>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_MspInit+0x4c>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800

08001b40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	@ 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a17      	ldr	r2, [pc, #92]	@ (8001bbc <HAL_ADC_MspInit+0x7c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d127      	bne.n	8001bb2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b16      	ldr	r3, [pc, #88]	@ (8001bc0 <HAL_ADC_MspInit+0x80>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	4a15      	ldr	r2, [pc, #84]	@ (8001bc0 <HAL_ADC_MspInit+0x80>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b72:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <HAL_ADC_MspInit+0x80>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <HAL_ADC_MspInit+0x80>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc0 <HAL_ADC_MspInit+0x80>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <HAL_ADC_MspInit+0x80>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <HAL_ADC_MspInit+0x84>)
 8001bae:	f000 ff77 	bl	8002aa0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	@ 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40012000 	.word	0x40012000
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	@ 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <HAL_I2C_MspInit+0x84>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d12c      	bne.n	8001c44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a17      	ldr	r2, [pc, #92]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0c:	2312      	movs	r3, #18
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c18:	2304      	movs	r3, #4
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	480c      	ldr	r0, [pc, #48]	@ (8001c54 <HAL_I2C_MspInit+0x8c>)
 8001c24:	f000 ff3c 	bl	8002aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	4a07      	ldr	r2, [pc, #28]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001c32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <HAL_I2C_MspInit+0x88>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	@ 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40005400 	.word	0x40005400
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020400 	.word	0x40020400

08001c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	@ 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a19      	ldr	r2, [pc, #100]	@ (8001cdc <HAL_UART_MspInit+0x84>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d12b      	bne.n	8001cd2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <HAL_UART_MspInit+0x88>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	4a17      	ldr	r2, [pc, #92]	@ (8001ce0 <HAL_UART_MspInit+0x88>)
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <HAL_UART_MspInit+0x88>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <HAL_UART_MspInit+0x88>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ce0 <HAL_UART_MspInit+0x88>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <HAL_UART_MspInit+0x88>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cb2:	230c      	movs	r3, #12
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cc2:	2307      	movs	r3, #7
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	@ (8001ce4 <HAL_UART_MspInit+0x8c>)
 8001cce:	f000 fee7 	bl	8002aa0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	@ 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40004400 	.word	0x40004400
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08e      	sub	sp, #56	@ 0x38
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	4b33      	ldr	r3, [pc, #204]	@ (8001dcc <HAL_InitTick+0xe4>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	4a32      	ldr	r2, [pc, #200]	@ (8001dcc <HAL_InitTick+0xe4>)
 8001d02:	f043 0310 	orr.w	r3, r3, #16
 8001d06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d08:	4b30      	ldr	r3, [pc, #192]	@ (8001dcc <HAL_InitTick+0xe4>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d14:	f107 0210 	add.w	r2, r7, #16
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f001 ff52 	bl	8003bc8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d103      	bne.n	8001d36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d2e:	f001 ff23 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 8001d32:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d34:	e004      	b.n	8001d40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d36:	f001 ff1f 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d42:	4a23      	ldr	r2, [pc, #140]	@ (8001dd0 <HAL_InitTick+0xe8>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	0c9b      	lsrs	r3, r3, #18
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d4e:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d50:	4a21      	ldr	r2, [pc, #132]	@ (8001dd8 <HAL_InitTick+0xf0>)
 8001d52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d54:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d5a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d60:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d62:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001d74:	4817      	ldr	r0, [pc, #92]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d76:	f002 fc27 	bl	80045c8 <HAL_TIM_Base_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001d80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d11b      	bne.n	8001dc0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d88:	4812      	ldr	r0, [pc, #72]	@ (8001dd4 <HAL_InitTick+0xec>)
 8001d8a:	f002 fc77 	bl	800467c <HAL_TIM_Base_Start_IT>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d111      	bne.n	8001dc0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d9c:	2036      	movs	r0, #54	@ 0x36
 8001d9e:	f000 fe71 	bl	8002a84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d808      	bhi.n	8001dba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	2036      	movs	r0, #54	@ 0x36
 8001dae:	f000 fe4d 	bl	8002a4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <HAL_InitTick+0xf4>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	e002      	b.n	8001dc0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3738      	adds	r7, #56	@ 0x38
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	431bde83 	.word	0x431bde83
 8001dd4:	200006f4 	.word	0x200006f4
 8001dd8:	40001000 	.word	0x40001000
 8001ddc:	20000014 	.word	0x20000014

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <NMI_Handler+0x4>

08001de8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <HardFault_Handler+0x4>

08001df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <MemManage_Handler+0x4>

08001df8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e44:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <TIM6_DAC_IRQHandler+0x10>)
 8001e46:	f002 fc89 	bl	800475c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200006f4 	.word	0x200006f4

08001e54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return 1;
 8001e58:	2301      	movs	r3, #1
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <_kill>:

int _kill(int pid, int sig)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e6e:	f004 f829 	bl	8005ec4 <__errno>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2216      	movs	r2, #22
 8001e76:	601a      	str	r2, [r3, #0]
  return -1;
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_exit>:

void _exit (int status)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ffe7 	bl	8001e64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e96:	bf00      	nop
 8001e98:	e7fd      	b.n	8001e96 <_exit+0x12>

08001e9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	e00a      	b.n	8001ec2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eac:	f3af 8000 	nop.w
 8001eb0:	4601      	mov	r1, r0
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	60ba      	str	r2, [r7, #8]
 8001eb8:	b2ca      	uxtb	r2, r1
 8001eba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	dbf0      	blt.n	8001eac <_read+0x12>
  }

  return len;
 8001eca:	687b      	ldr	r3, [r7, #4]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	e009      	b.n	8001efa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	60ba      	str	r2, [r7, #8]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f85a 	bl	8000fa8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	dbf1      	blt.n	8001ee6 <_write+0x12>
  }
  return len;
 8001f02:	687b      	ldr	r3, [r7, #4]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_close>:

int _close(int file)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f34:	605a      	str	r2, [r3, #4]
  return 0;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <_isatty>:

int _isatty(int file)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f4c:	2301      	movs	r3, #1
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f7c:	4a14      	ldr	r2, [pc, #80]	@ (8001fd0 <_sbrk+0x5c>)
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <_sbrk+0x60>)
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f88:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <_sbrk+0x64>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <_sbrk+0x64>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	@ (8001fdc <_sbrk+0x68>)
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d207      	bcs.n	8001fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa4:	f003 ff8e 	bl	8005ec4 <__errno>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	220c      	movs	r2, #12
 8001fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	e009      	b.n	8001fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb4:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fba:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4a05      	ldr	r2, [pc, #20]	@ (8001fd8 <_sbrk+0x64>)
 8001fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20020000 	.word	0x20020000
 8001fd4:	00000400 	.word	0x00000400
 8001fd8:	2000073c 	.word	0x2000073c
 8001fdc:	20000890 	.word	0x20000890

08001fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <SystemInit+0x20>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fea:	4a05      	ldr	r2, [pc, #20]	@ (8002000 <SystemInit+0x20>)
 8001fec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ff0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002004:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800203c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002008:	f7ff ffea 	bl	8001fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800200c:	480c      	ldr	r0, [pc, #48]	@ (8002040 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800200e:	490d      	ldr	r1, [pc, #52]	@ (8002044 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002010:	4a0d      	ldr	r2, [pc, #52]	@ (8002048 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002014:	e002      	b.n	800201c <LoopCopyDataInit>

08002016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201a:	3304      	adds	r3, #4

0800201c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800201c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002020:	d3f9      	bcc.n	8002016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002022:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002024:	4c0a      	ldr	r4, [pc, #40]	@ (8002050 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002028:	e001      	b.n	800202e <LoopFillZerobss>

0800202a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800202c:	3204      	adds	r2, #4

0800202e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002030:	d3fb      	bcc.n	800202a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002032:	f003 ff4d 	bl	8005ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002036:	f7fe ffc3 	bl	8000fc0 <main>
  bx  lr    
 800203a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800203c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002044:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002048:	0800a430 	.word	0x0800a430
  ldr r2, =_sbss
 800204c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002050:	20000890 	.word	0x20000890

08002054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002054:	e7fe      	b.n	8002054 <ADC_IRQHandler>
	...

08002058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800205c:	4b0e      	ldr	r3, [pc, #56]	@ (8002098 <HAL_Init+0x40>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0d      	ldr	r2, [pc, #52]	@ (8002098 <HAL_Init+0x40>)
 8002062:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002066:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002068:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_Init+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0a      	ldr	r2, [pc, #40]	@ (8002098 <HAL_Init+0x40>)
 800206e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002072:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002074:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <HAL_Init+0x40>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a07      	ldr	r2, [pc, #28]	@ (8002098 <HAL_Init+0x40>)
 800207a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800207e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002080:	2003      	movs	r0, #3
 8002082:	f000 fcd8 	bl	8002a36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002086:	200f      	movs	r0, #15
 8002088:	f7ff fe2e 	bl	8001ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800208c:	f7ff fd30 	bl	8001af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023c00 	.word	0x40023c00

0800209c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_IncTick+0x20>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_IncTick+0x24>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	@ (80020c0 <HAL_IncTick+0x24>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000018 	.word	0x20000018
 80020c0:	20000740 	.word	0x20000740

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <HAL_GetTick+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000740 	.word	0x20000740

080020dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff ffee 	bl	80020c4 <HAL_GetTick>
 80020e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f4:	d005      	beq.n	8002102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_Delay+0x44>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002102:	bf00      	nop
 8002104:	f7ff ffde 	bl	80020c4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	429a      	cmp	r2, r3
 8002112:	d8f7      	bhi.n	8002104 <HAL_Delay+0x28>
  {
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000018 	.word	0x20000018

08002124 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e033      	b.n	80021a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fcfc 	bl	8001b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	d118      	bne.n	8002194 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800216a:	f023 0302 	bic.w	r3, r3, #2
 800216e:	f043 0202 	orr.w	r2, r3, #2
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fab4 	bl	80026e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	f023 0303 	bic.w	r3, r3, #3
 800218a:	f043 0201 	orr.w	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	641a      	str	r2, [r3, #64]	@ 0x40
 8002192:	e001      	b.n	8002198 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_Start+0x1a>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e0b2      	b.n	800232c <HAL_ADC_Start+0x180>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d018      	beq.n	800220e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021ec:	4b52      	ldr	r3, [pc, #328]	@ (8002338 <HAL_ADC_Start+0x18c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a52      	ldr	r2, [pc, #328]	@ (800233c <HAL_ADC_Start+0x190>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0c9a      	lsrs	r2, r3, #18
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002200:	e002      	b.n	8002208 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3b01      	subs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b01      	cmp	r3, #1
 800221a:	d17a      	bne.n	8002312 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002246:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800225a:	d106      	bne.n	800226a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002260:	f023 0206 	bic.w	r2, r3, #6
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	645a      	str	r2, [r3, #68]	@ 0x44
 8002268:	e002      	b.n	8002270 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002278:	4b31      	ldr	r3, [pc, #196]	@ (8002340 <HAL_ADC_Start+0x194>)
 800227a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002284:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	2b00      	cmp	r3, #0
 8002290:	d12a      	bne.n	80022e8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a2b      	ldr	r2, [pc, #172]	@ (8002344 <HAL_ADC_Start+0x198>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d015      	beq.n	80022c8 <HAL_ADC_Start+0x11c>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a29      	ldr	r2, [pc, #164]	@ (8002348 <HAL_ADC_Start+0x19c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d105      	bne.n	80022b2 <HAL_ADC_Start+0x106>
 80022a6:	4b26      	ldr	r3, [pc, #152]	@ (8002340 <HAL_ADC_Start+0x194>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a25      	ldr	r2, [pc, #148]	@ (800234c <HAL_ADC_Start+0x1a0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d136      	bne.n	800232a <HAL_ADC_Start+0x17e>
 80022bc:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <HAL_ADC_Start+0x194>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d130      	bne.n	800232a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d129      	bne.n	800232a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	e020      	b.n	800232a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a15      	ldr	r2, [pc, #84]	@ (8002344 <HAL_ADC_Start+0x198>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d11b      	bne.n	800232a <HAL_ADC_Start+0x17e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d114      	bne.n	800232a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	e00b      	b.n	800232a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	f043 0210 	orr.w	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	f043 0201 	orr.w	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	20000010 	.word	0x20000010
 800233c:	431bde83 	.word	0x431bde83
 8002340:	40012300 	.word	0x40012300
 8002344:	40012000 	.word	0x40012000
 8002348:	40012100 	.word	0x40012100
 800234c:	40012200 	.word	0x40012200

08002350 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800236c:	d113      	bne.n	8002396 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800237c:	d10b      	bne.n	8002396 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f043 0220 	orr.w	r2, r3, #32
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e063      	b.n	800245e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002396:	f7ff fe95 	bl	80020c4 <HAL_GetTick>
 800239a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800239c:	e021      	b.n	80023e2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d01d      	beq.n	80023e2 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_ADC_PollForConversion+0x6c>
 80023ac:	f7ff fe8a 	bl	80020c4 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d212      	bcs.n	80023e2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d00b      	beq.n	80023e2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f043 0204 	orr.w	r2, r3, #4
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e03d      	b.n	800245e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d1d6      	bne.n	800239e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0212 	mvn.w	r2, #18
 80023f8:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d123      	bne.n	800245c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002418:	2b00      	cmp	r3, #0
 800241a:	d11f      	bne.n	800245c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002422:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002434:	2b00      	cmp	r3, #0
 8002436:	d111      	bne.n	800245c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x1c>
 8002498:	2302      	movs	r3, #2
 800249a:	e113      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x244>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b09      	cmp	r3, #9
 80024aa:	d925      	bls.n	80024f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68d9      	ldr	r1, [r3, #12]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	3b1e      	subs	r3, #30
 80024c2:	2207      	movs	r2, #7
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43da      	mvns	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	400a      	ands	r2, r1
 80024d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68d9      	ldr	r1, [r3, #12]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	4603      	mov	r3, r0
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4403      	add	r3, r0
 80024ea:	3b1e      	subs	r3, #30
 80024ec:	409a      	lsls	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	e022      	b.n	800253e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6919      	ldr	r1, [r3, #16]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	2207      	movs	r2, #7
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	400a      	ands	r2, r1
 800251a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6919      	ldr	r1, [r3, #16]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	4618      	mov	r0, r3
 800252e:	4603      	mov	r3, r0
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4403      	add	r3, r0
 8002534:	409a      	lsls	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b06      	cmp	r3, #6
 8002544:	d824      	bhi.n	8002590 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b05      	subs	r3, #5
 8002558:	221f      	movs	r2, #31
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	400a      	ands	r2, r1
 8002566:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	4618      	mov	r0, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b05      	subs	r3, #5
 8002582:	fa00 f203 	lsl.w	r2, r0, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	635a      	str	r2, [r3, #52]	@ 0x34
 800258e:	e04c      	b.n	800262a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b0c      	cmp	r3, #12
 8002596:	d824      	bhi.n	80025e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	3b23      	subs	r3, #35	@ 0x23
 80025aa:	221f      	movs	r2, #31
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43da      	mvns	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	400a      	ands	r2, r1
 80025b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4618      	mov	r0, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3b23      	subs	r3, #35	@ 0x23
 80025d4:	fa00 f203 	lsl.w	r2, r0, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	631a      	str	r2, [r3, #48]	@ 0x30
 80025e0:	e023      	b.n	800262a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b41      	subs	r3, #65	@ 0x41
 80025f4:	221f      	movs	r2, #31
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	400a      	ands	r2, r1
 8002602:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b41      	subs	r3, #65	@ 0x41
 800261e:	fa00 f203 	lsl.w	r2, r0, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800262a:	4b29      	ldr	r3, [pc, #164]	@ (80026d0 <HAL_ADC_ConfigChannel+0x250>)
 800262c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a28      	ldr	r2, [pc, #160]	@ (80026d4 <HAL_ADC_ConfigChannel+0x254>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d10f      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1d8>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b12      	cmp	r3, #18
 800263e:	d10b      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1d      	ldr	r2, [pc, #116]	@ (80026d4 <HAL_ADC_ConfigChannel+0x254>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d12b      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1c      	ldr	r2, [pc, #112]	@ (80026d8 <HAL_ADC_ConfigChannel+0x258>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d003      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x1f4>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b11      	cmp	r3, #17
 8002672:	d122      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a11      	ldr	r2, [pc, #68]	@ (80026d8 <HAL_ADC_ConfigChannel+0x258>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d111      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002696:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <HAL_ADC_ConfigChannel+0x25c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a11      	ldr	r2, [pc, #68]	@ (80026e0 <HAL_ADC_ConfigChannel+0x260>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	0c9a      	lsrs	r2, r3, #18
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026ac:	e002      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f9      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40012300 	.word	0x40012300
 80026d4:	40012000 	.word	0x40012000
 80026d8:	10000012 	.word	0x10000012
 80026dc:	20000010 	.word	0x20000010
 80026e0:	431bde83 	.word	0x431bde83

080026e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ec:	4b79      	ldr	r3, [pc, #484]	@ (80028d4 <ADC_Init+0x1f0>)
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	431a      	orrs	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	021a      	lsls	r2, r3, #8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800273c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6899      	ldr	r1, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002776:	4a58      	ldr	r2, [pc, #352]	@ (80028d8 <ADC_Init+0x1f4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d022      	beq.n	80027c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800278a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6899      	ldr	r1, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6899      	ldr	r1, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	e00f      	b.n	80027e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0202 	bic.w	r2, r2, #2
 80027f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6899      	ldr	r1, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7e1b      	ldrb	r3, [r3, #24]
 80027fc:	005a      	lsls	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01b      	beq.n	8002848 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800281e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800282e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	3b01      	subs	r3, #1
 800283c:	035a      	lsls	r2, r3, #13
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	e007      	b.n	8002858 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002856:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002866:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	3b01      	subs	r3, #1
 8002874:	051a      	lsls	r2, r3, #20
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800288c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6899      	ldr	r1, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800289a:	025a      	lsls	r2, r3, #9
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6899      	ldr	r1, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	029a      	lsls	r2, r3, #10
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40012300 	.word	0x40012300
 80028d8:	0f000001 	.word	0x0f000001

080028dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028f8:	4013      	ands	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800290c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290e:	4a04      	ldr	r2, [pc, #16]	@ (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	60d3      	str	r3, [r2, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002928:	4b04      	ldr	r3, [pc, #16]	@ (800293c <__NVIC_GetPriorityGrouping+0x18>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	f003 0307 	and.w	r3, r3, #7
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	2b00      	cmp	r3, #0
 8002950:	db0b      	blt.n	800296a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	4907      	ldr	r1, [pc, #28]	@ (8002978 <__NVIC_EnableIRQ+0x38>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2001      	movs	r0, #1
 8002962:	fa00 f202 	lsl.w	r2, r0, r2
 8002966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000e100 	.word	0xe000e100

0800297c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	6039      	str	r1, [r7, #0]
 8002986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	2b00      	cmp	r3, #0
 800298e:	db0a      	blt.n	80029a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	b2da      	uxtb	r2, r3
 8002994:	490c      	ldr	r1, [pc, #48]	@ (80029c8 <__NVIC_SetPriority+0x4c>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	0112      	lsls	r2, r2, #4
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	440b      	add	r3, r1
 80029a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a4:	e00a      	b.n	80029bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4908      	ldr	r1, [pc, #32]	@ (80029cc <__NVIC_SetPriority+0x50>)
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	3b04      	subs	r3, #4
 80029b4:	0112      	lsls	r2, r2, #4
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	440b      	add	r3, r1
 80029ba:	761a      	strb	r2, [r3, #24]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000e100 	.word	0xe000e100
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	@ 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f1c3 0307 	rsb	r3, r3, #7
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	bf28      	it	cs
 80029ee:	2304      	movcs	r3, #4
 80029f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3304      	adds	r3, #4
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d902      	bls.n	8002a00 <NVIC_EncodePriority+0x30>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3b03      	subs	r3, #3
 80029fe:	e000      	b.n	8002a02 <NVIC_EncodePriority+0x32>
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	401a      	ands	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a18:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	43d9      	mvns	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	4313      	orrs	r3, r2
         );
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3724      	adds	r7, #36	@ 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff ff4c 	bl	80028dc <__NVIC_SetPriorityGrouping>
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a5e:	f7ff ff61 	bl	8002924 <__NVIC_GetPriorityGrouping>
 8002a62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	6978      	ldr	r0, [r7, #20]
 8002a6a:	f7ff ffb1 	bl	80029d0 <NVIC_EncodePriority>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff80 	bl	800297c <__NVIC_SetPriority>
}
 8002a7c:	bf00      	nop
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff ff54 	bl	8002940 <__NVIC_EnableIRQ>
}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b089      	sub	sp, #36	@ 0x24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	e165      	b.n	8002d88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002abc:	2201      	movs	r2, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	f040 8154 	bne.w	8002d82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d005      	beq.n	8002af2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d130      	bne.n	8002b54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	2203      	movs	r2, #3
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b28:	2201      	movs	r2, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 0201 	and.w	r2, r3, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d017      	beq.n	8002b90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d123      	bne.n	8002be4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	08da      	lsrs	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3208      	adds	r2, #8
 8002ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	08da      	lsrs	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3208      	adds	r2, #8
 8002bde:	69b9      	ldr	r1, [r7, #24]
 8002be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0203 	and.w	r2, r3, #3
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80ae 	beq.w	8002d82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002da0 <HAL_GPIO_Init+0x300>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8002da0 <HAL_GPIO_Init+0x300>)
 8002c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c36:	4b5a      	ldr	r3, [pc, #360]	@ (8002da0 <HAL_GPIO_Init+0x300>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c42:	4a58      	ldr	r2, [pc, #352]	@ (8002da4 <HAL_GPIO_Init+0x304>)
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	089b      	lsrs	r3, r3, #2
 8002c48:	3302      	adds	r3, #2
 8002c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	220f      	movs	r2, #15
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4f      	ldr	r2, [pc, #316]	@ (8002da8 <HAL_GPIO_Init+0x308>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d025      	beq.n	8002cba <HAL_GPIO_Init+0x21a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4e      	ldr	r2, [pc, #312]	@ (8002dac <HAL_GPIO_Init+0x30c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01f      	beq.n	8002cb6 <HAL_GPIO_Init+0x216>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4d      	ldr	r2, [pc, #308]	@ (8002db0 <HAL_GPIO_Init+0x310>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d019      	beq.n	8002cb2 <HAL_GPIO_Init+0x212>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4c      	ldr	r2, [pc, #304]	@ (8002db4 <HAL_GPIO_Init+0x314>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_GPIO_Init+0x20e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4b      	ldr	r2, [pc, #300]	@ (8002db8 <HAL_GPIO_Init+0x318>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00d      	beq.n	8002caa <HAL_GPIO_Init+0x20a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4a      	ldr	r2, [pc, #296]	@ (8002dbc <HAL_GPIO_Init+0x31c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <HAL_GPIO_Init+0x206>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a49      	ldr	r2, [pc, #292]	@ (8002dc0 <HAL_GPIO_Init+0x320>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_GPIO_Init+0x202>
 8002c9e:	2306      	movs	r3, #6
 8002ca0:	e00c      	b.n	8002cbc <HAL_GPIO_Init+0x21c>
 8002ca2:	2307      	movs	r3, #7
 8002ca4:	e00a      	b.n	8002cbc <HAL_GPIO_Init+0x21c>
 8002ca6:	2305      	movs	r3, #5
 8002ca8:	e008      	b.n	8002cbc <HAL_GPIO_Init+0x21c>
 8002caa:	2304      	movs	r3, #4
 8002cac:	e006      	b.n	8002cbc <HAL_GPIO_Init+0x21c>
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e004      	b.n	8002cbc <HAL_GPIO_Init+0x21c>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e002      	b.n	8002cbc <HAL_GPIO_Init+0x21c>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_GPIO_Init+0x21c>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	f002 0203 	and.w	r2, r2, #3
 8002cc2:	0092      	lsls	r2, r2, #2
 8002cc4:	4093      	lsls	r3, r2
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ccc:	4935      	ldr	r1, [pc, #212]	@ (8002da4 <HAL_GPIO_Init+0x304>)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cda:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc4 <HAL_GPIO_Init+0x324>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cfe:	4a31      	ldr	r2, [pc, #196]	@ (8002dc4 <HAL_GPIO_Init+0x324>)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d04:	4b2f      	ldr	r3, [pc, #188]	@ (8002dc4 <HAL_GPIO_Init+0x324>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d28:	4a26      	ldr	r2, [pc, #152]	@ (8002dc4 <HAL_GPIO_Init+0x324>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d2e:	4b25      	ldr	r3, [pc, #148]	@ (8002dc4 <HAL_GPIO_Init+0x324>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d52:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc4 <HAL_GPIO_Init+0x324>)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d58:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc4 <HAL_GPIO_Init+0x324>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d7c:	4a11      	ldr	r2, [pc, #68]	@ (8002dc4 <HAL_GPIO_Init+0x324>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3301      	adds	r3, #1
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2b0f      	cmp	r3, #15
 8002d8c:	f67f ae96 	bls.w	8002abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3724      	adds	r7, #36	@ 0x24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40013800 	.word	0x40013800
 8002da8:	40020000 	.word	0x40020000
 8002dac:	40020400 	.word	0x40020400
 8002db0:	40020800 	.word	0x40020800
 8002db4:	40020c00 	.word	0x40020c00
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40021400 	.word	0x40021400
 8002dc0:	40021800 	.word	0x40021800
 8002dc4:	40013c00 	.word	0x40013c00

08002dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd8:	787b      	ldrb	r3, [r7, #1]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002de4:	e003      	b.n	8002dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002de6:	887b      	ldrh	r3, [r7, #2]
 8002de8:	041a      	lsls	r2, r3, #16
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	619a      	str	r2, [r3, #24]
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e12b      	b.n	8003066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fe fed0 	bl	8001bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	@ 0x24
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e60:	f000 fe8a 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a81      	ldr	r2, [pc, #516]	@ (8003070 <HAL_I2C_Init+0x274>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d807      	bhi.n	8002e80 <HAL_I2C_Init+0x84>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a80      	ldr	r2, [pc, #512]	@ (8003074 <HAL_I2C_Init+0x278>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	bf94      	ite	ls
 8002e78:	2301      	movls	r3, #1
 8002e7a:	2300      	movhi	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e006      	b.n	8002e8e <HAL_I2C_Init+0x92>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a7d      	ldr	r2, [pc, #500]	@ (8003078 <HAL_I2C_Init+0x27c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	bf94      	ite	ls
 8002e88:	2301      	movls	r3, #1
 8002e8a:	2300      	movhi	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0e7      	b.n	8003066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a78      	ldr	r2, [pc, #480]	@ (800307c <HAL_I2C_Init+0x280>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	0c9b      	lsrs	r3, r3, #18
 8002ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a6a      	ldr	r2, [pc, #424]	@ (8003070 <HAL_I2C_Init+0x274>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d802      	bhi.n	8002ed0 <HAL_I2C_Init+0xd4>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	e009      	b.n	8002ee4 <HAL_I2C_Init+0xe8>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
 8002eda:	4a69      	ldr	r2, [pc, #420]	@ (8003080 <HAL_I2C_Init+0x284>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ef6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	495c      	ldr	r1, [pc, #368]	@ (8003070 <HAL_I2C_Init+0x274>)
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d819      	bhi.n	8002f38 <HAL_I2C_Init+0x13c>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1e59      	subs	r1, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f12:	1c59      	adds	r1, r3, #1
 8002f14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f18:	400b      	ands	r3, r1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_I2C_Init+0x138>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f32:	e051      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f34:	2304      	movs	r3, #4
 8002f36:	e04f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d111      	bne.n	8002f64 <HAL_I2C_Init+0x168>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	440b      	add	r3, r1
 8002f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e012      	b.n	8002f8a <HAL_I2C_Init+0x18e>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1e58      	subs	r0, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	0099      	lsls	r1, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Init+0x196>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e022      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10e      	bne.n	8002fb8 <HAL_I2C_Init+0x1bc>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1e58      	subs	r0, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	440b      	add	r3, r1
 8002fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fb6:	e00f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	0099      	lsls	r1, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	6809      	ldr	r1, [r1, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003006:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6911      	ldr	r1, [r2, #16]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68d2      	ldr	r2, [r2, #12]
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	000186a0 	.word	0x000186a0
 8003074:	001e847f 	.word	0x001e847f
 8003078:	003d08ff 	.word	0x003d08ff
 800307c:	431bde83 	.word	0x431bde83
 8003080:	10624dd3 	.word	0x10624dd3

08003084 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	461a      	mov	r2, r3
 8003090:	460b      	mov	r3, r1
 8003092:	817b      	strh	r3, [r7, #10]
 8003094:	4613      	mov	r3, r2
 8003096:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003098:	f7ff f814 	bl	80020c4 <HAL_GetTick>
 800309c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	f040 80e0 	bne.w	800326c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2319      	movs	r3, #25
 80030b2:	2201      	movs	r2, #1
 80030b4:	4970      	ldr	r1, [pc, #448]	@ (8003278 <HAL_I2C_Master_Transmit+0x1f4>)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fa92 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0d3      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_I2C_Master_Transmit+0x50>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e0cc      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d007      	beq.n	80030fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003108:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2221      	movs	r2, #33	@ 0x21
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2210      	movs	r2, #16
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	893a      	ldrh	r2, [r7, #8]
 800312a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4a50      	ldr	r2, [pc, #320]	@ (800327c <HAL_I2C_Master_Transmit+0x1f8>)
 800313a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800313c:	8979      	ldrh	r1, [r7, #10]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f9ca 	bl	80034dc <I2C_MasterRequestWrite>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e08d      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003168:	e066      	b.n	8003238 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	6a39      	ldr	r1, [r7, #32]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fb50 	bl	8003814 <I2C_WaitOnTXEFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00d      	beq.n	8003196 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	2b04      	cmp	r3, #4
 8003180:	d107      	bne.n	8003192 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003190:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e06b      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	781a      	ldrb	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d11b      	bne.n	800320c <HAL_I2C_Master_Transmit+0x188>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d017      	beq.n	800320c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	6a39      	ldr	r1, [r7, #32]
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fb47 	bl	80038a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00d      	beq.n	8003238 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	2b04      	cmp	r3, #4
 8003222:	d107      	bne.n	8003234 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003232:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e01a      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323c:	2b00      	cmp	r3, #0
 800323e:	d194      	bne.n	800316a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800324e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	e000      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800326c:	2302      	movs	r3, #2
  }
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	00100002 	.word	0x00100002
 800327c:	ffff0000 	.word	0xffff0000

08003280 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08a      	sub	sp, #40	@ 0x28
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	460b      	mov	r3, r1
 800328e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003290:	f7fe ff18 	bl	80020c4 <HAL_GetTick>
 8003294:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	f040 8111 	bne.w	80034ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2319      	movs	r3, #25
 80032ae:	2201      	movs	r2, #1
 80032b0:	4988      	ldr	r1, [pc, #544]	@ (80034d4 <HAL_I2C_IsDeviceReady+0x254>)
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f994 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
 80032c0:	e104      	b.n	80034cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_I2C_IsDeviceReady+0x50>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e0fd      	b.n	80034cc <HAL_I2C_IsDeviceReady+0x24c>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d007      	beq.n	80032f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0201 	orr.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003304:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2224      	movs	r2, #36	@ 0x24
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a70      	ldr	r2, [pc, #448]	@ (80034d8 <HAL_I2C_IsDeviceReady+0x258>)
 8003318:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003328:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2200      	movs	r2, #0
 8003332:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f952 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00d      	beq.n	800335e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003350:	d103      	bne.n	800335a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003358:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e0b6      	b.n	80034cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800335e:	897b      	ldrh	r3, [r7, #10]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800336c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800336e:	f7fe fea9 	bl	80020c4 <HAL_GetTick>
 8003372:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	bf0c      	ite	eq
 8003382:	2301      	moveq	r3, #1
 8003384:	2300      	movne	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003398:	bf0c      	ite	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	2300      	movne	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033a2:	e025      	b.n	80033f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033a4:	f7fe fe8e 	bl	80020c4 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d302      	bcc.n	80033ba <HAL_I2C_IsDeviceReady+0x13a>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	22a0      	movs	r2, #160	@ 0xa0
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80033fa:	d005      	beq.n	8003408 <HAL_I2C_IsDeviceReady+0x188>
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d102      	bne.n	8003408 <HAL_I2C_IsDeviceReady+0x188>
 8003402:	7dbb      	ldrb	r3, [r7, #22]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0cd      	beq.n	80033a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b02      	cmp	r3, #2
 800341c:	d129      	bne.n	8003472 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800342c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2319      	movs	r3, #25
 800344a:	2201      	movs	r2, #1
 800344c:	4921      	ldr	r1, [pc, #132]	@ (80034d4 <HAL_I2C_IsDeviceReady+0x254>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f8c6 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e036      	b.n	80034cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	e02c      	b.n	80034cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003480:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800348a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	2319      	movs	r3, #25
 8003492:	2201      	movs	r2, #1
 8003494:	490f      	ldr	r1, [pc, #60]	@ (80034d4 <HAL_I2C_IsDeviceReady+0x254>)
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f8a2 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e012      	b.n	80034cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	3301      	adds	r3, #1
 80034aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	f4ff af32 	bcc.w	800331a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
  }
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3720      	adds	r7, #32
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	00100002 	.word	0x00100002
 80034d8:	ffff0000 	.word	0xffff0000

080034dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	460b      	mov	r3, r1
 80034ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d006      	beq.n	8003506 <I2C_MasterRequestWrite+0x2a>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d003      	beq.n	8003506 <I2C_MasterRequestWrite+0x2a>
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003504:	d108      	bne.n	8003518 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e00b      	b.n	8003530 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351c:	2b12      	cmp	r3, #18
 800351e:	d107      	bne.n	8003530 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800352e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f84f 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003556:	d103      	bne.n	8003560 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800355e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e035      	b.n	80035d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800356c:	d108      	bne.n	8003580 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800356e:	897b      	ldrh	r3, [r7, #10]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800357c:	611a      	str	r2, [r3, #16]
 800357e:	e01b      	b.n	80035b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003580:	897b      	ldrh	r3, [r7, #10]
 8003582:	11db      	asrs	r3, r3, #7
 8003584:	b2db      	uxtb	r3, r3
 8003586:	f003 0306 	and.w	r3, r3, #6
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f063 030f 	orn	r3, r3, #15
 8003590:	b2da      	uxtb	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	490e      	ldr	r1, [pc, #56]	@ (80035d8 <I2C_MasterRequestWrite+0xfc>)
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f898 	bl	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e010      	b.n	80035d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4907      	ldr	r1, [pc, #28]	@ (80035dc <I2C_MasterRequestWrite+0x100>)
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f888 	bl	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	00010008 	.word	0x00010008
 80035dc:	00010002 	.word	0x00010002

080035e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f0:	e048      	b.n	8003684 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d044      	beq.n	8003684 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fa:	f7fe fd63 	bl	80020c4 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d139      	bne.n	8003684 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d10d      	bne.n	8003636 <I2C_WaitOnFlagUntilTimeout+0x56>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	43da      	mvns	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4013      	ands	r3, r2
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf0c      	ite	eq
 800362c:	2301      	moveq	r3, #1
 800362e:	2300      	movne	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	e00c      	b.n	8003650 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	43da      	mvns	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4013      	ands	r3, r2
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	429a      	cmp	r2, r3
 8003654:	d116      	bne.n	8003684 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	f043 0220 	orr.w	r2, r3, #32
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e023      	b.n	80036cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	0c1b      	lsrs	r3, r3, #16
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d10d      	bne.n	80036aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	43da      	mvns	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4013      	ands	r3, r2
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	e00c      	b.n	80036c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	43da      	mvns	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4013      	ands	r3, r2
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d093      	beq.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036e2:	e071      	b.n	80037c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036f2:	d123      	bne.n	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003702:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800370c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	f043 0204 	orr.w	r2, r3, #4
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e067      	b.n	800380c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003742:	d041      	beq.n	80037c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003744:	f7fe fcbe 	bl	80020c4 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	429a      	cmp	r2, r3
 8003752:	d302      	bcc.n	800375a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d136      	bne.n	80037c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	0c1b      	lsrs	r3, r3, #16
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b01      	cmp	r3, #1
 8003762:	d10c      	bne.n	800377e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	43da      	mvns	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4013      	ands	r3, r2
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	bf14      	ite	ne
 8003776:	2301      	movne	r3, #1
 8003778:	2300      	moveq	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	e00b      	b.n	8003796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	43da      	mvns	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	4013      	ands	r3, r2
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d016      	beq.n	80037c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e021      	b.n	800380c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d10c      	bne.n	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	43da      	mvns	r2, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4013      	ands	r3, r2
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf14      	ite	ne
 80037e4:	2301      	movne	r3, #1
 80037e6:	2300      	moveq	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	e00b      	b.n	8003804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	43da      	mvns	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4013      	ands	r3, r2
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bf14      	ite	ne
 80037fe:	2301      	movne	r3, #1
 8003800:	2300      	moveq	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	f47f af6d 	bne.w	80036e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003820:	e034      	b.n	800388c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f886 	bl	8003934 <I2C_IsAcknowledgeFailed>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e034      	b.n	800389c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d028      	beq.n	800388c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383a:	f7fe fc43 	bl	80020c4 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11d      	bne.n	800388c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800385a:	2b80      	cmp	r3, #128	@ 0x80
 800385c:	d016      	beq.n	800388c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e007      	b.n	800389c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003896:	2b80      	cmp	r3, #128	@ 0x80
 8003898:	d1c3      	bne.n	8003822 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038b0:	e034      	b.n	800391c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f83e 	bl	8003934 <I2C_IsAcknowledgeFailed>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e034      	b.n	800392c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d028      	beq.n	800391c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ca:	f7fe fbfb 	bl	80020c4 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d11d      	bne.n	800391c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d016      	beq.n	800391c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	f043 0220 	orr.w	r2, r3, #32
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e007      	b.n	800392c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b04      	cmp	r3, #4
 8003928:	d1c3      	bne.n	80038b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800394a:	d11b      	bne.n	8003984 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003954:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	f043 0204 	orr.w	r2, r3, #4
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0cc      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a8:	4b68      	ldr	r3, [pc, #416]	@ (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d90c      	bls.n	80039d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b65      	ldr	r3, [pc, #404]	@ (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039be:	4b63      	ldr	r3, [pc, #396]	@ (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0b8      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d020      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e8:	4b59      	ldr	r3, [pc, #356]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4a58      	ldr	r2, [pc, #352]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a00:	4b53      	ldr	r3, [pc, #332]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4a52      	ldr	r2, [pc, #328]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a0c:	4b50      	ldr	r3, [pc, #320]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	494d      	ldr	r1, [pc, #308]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d044      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d107      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	4b47      	ldr	r3, [pc, #284]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d119      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e07f      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d003      	beq.n	8003a52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d107      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a52:	4b3f      	ldr	r3, [pc, #252]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e06f      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a62:	4b3b      	ldr	r3, [pc, #236]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e067      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a72:	4b37      	ldr	r3, [pc, #220]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f023 0203 	bic.w	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4934      	ldr	r1, [pc, #208]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a84:	f7fe fb1e 	bl	80020c4 <HAL_GetTick>
 8003a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a8c:	f7fe fb1a 	bl	80020c4 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e04f      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 020c 	and.w	r2, r3, #12
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d1eb      	bne.n	8003a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab4:	4b25      	ldr	r3, [pc, #148]	@ (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d20c      	bcs.n	8003adc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac2:	4b22      	ldr	r3, [pc, #136]	@ (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	4b20      	ldr	r3, [pc, #128]	@ (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e032      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae8:	4b19      	ldr	r3, [pc, #100]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4916      	ldr	r1, [pc, #88]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b06:	4b12      	ldr	r3, [pc, #72]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	490e      	ldr	r1, [pc, #56]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b1a:	f000 f887 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	490a      	ldr	r1, [pc, #40]	@ (8003b54 <HAL_RCC_ClockConfig+0x1c0>)
 8003b2c:	5ccb      	ldrb	r3, [r1, r3]
 8003b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b32:	4a09      	ldr	r2, [pc, #36]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b36:	4b09      	ldr	r3, [pc, #36]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe f8d4 	bl	8001ce8 <HAL_InitTick>

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023c00 	.word	0x40023c00
 8003b50:	40023800 	.word	0x40023800
 8003b54:	0800a098 	.word	0x0800a098
 8003b58:	20000010 	.word	0x20000010
 8003b5c:	20000014 	.word	0x20000014

08003b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b64:	4b03      	ldr	r3, [pc, #12]	@ (8003b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b66:	681b      	ldr	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000010 	.word	0x20000010

08003b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b7c:	f7ff fff0 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	0a9b      	lsrs	r3, r3, #10
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	4903      	ldr	r1, [pc, #12]	@ (8003b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b8e:	5ccb      	ldrb	r3, [r1, r3]
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	0800a0a8 	.word	0x0800a0a8

08003ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ba4:	f7ff ffdc 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	0b5b      	lsrs	r3, r3, #13
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	4903      	ldr	r1, [pc, #12]	@ (8003bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb6:	5ccb      	ldrb	r3, [r1, r3]
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	0800a0a8 	.word	0x0800a0a8

08003bc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	220f      	movs	r2, #15
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bd8:	4b12      	ldr	r3, [pc, #72]	@ (8003c24 <HAL_RCC_GetClockConfig+0x5c>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0203 	and.w	r2, r3, #3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003be4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c24 <HAL_RCC_GetClockConfig+0x5c>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c24 <HAL_RCC_GetClockConfig+0x5c>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003bfc:	4b09      	ldr	r3, [pc, #36]	@ (8003c24 <HAL_RCC_GetClockConfig+0x5c>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	08db      	lsrs	r3, r3, #3
 8003c02:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c0a:	4b07      	ldr	r3, [pc, #28]	@ (8003c28 <HAL_RCC_GetClockConfig+0x60>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 020f 	and.w	r2, r3, #15
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	601a      	str	r2, [r3, #0]
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40023c00 	.word	0x40023c00

08003c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c30:	b0ae      	sub	sp, #184	@ 0xb8
 8003c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c52:	4bcb      	ldr	r3, [pc, #812]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b0c      	cmp	r3, #12
 8003c5c:	f200 8206 	bhi.w	800406c <HAL_RCC_GetSysClockFreq+0x440>
 8003c60:	a201      	add	r2, pc, #4	@ (adr r2, 8003c68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	0800406d 	.word	0x0800406d
 8003c70:	0800406d 	.word	0x0800406d
 8003c74:	0800406d 	.word	0x0800406d
 8003c78:	08003ca5 	.word	0x08003ca5
 8003c7c:	0800406d 	.word	0x0800406d
 8003c80:	0800406d 	.word	0x0800406d
 8003c84:	0800406d 	.word	0x0800406d
 8003c88:	08003cad 	.word	0x08003cad
 8003c8c:	0800406d 	.word	0x0800406d
 8003c90:	0800406d 	.word	0x0800406d
 8003c94:	0800406d 	.word	0x0800406d
 8003c98:	08003e9d 	.word	0x08003e9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c9c:	4bb9      	ldr	r3, [pc, #740]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ca2:	e1e7      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ca4:	4bb8      	ldr	r3, [pc, #736]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003caa:	e1e3      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cac:	4bb4      	ldr	r3, [pc, #720]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cb8:	4bb1      	ldr	r3, [pc, #708]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d071      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc4:	4bae      	ldr	r3, [pc, #696]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	099b      	lsrs	r3, r3, #6
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cd0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ce6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cea:	4622      	mov	r2, r4
 8003cec:	462b      	mov	r3, r5
 8003cee:	f04f 0000 	mov.w	r0, #0
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	0159      	lsls	r1, r3, #5
 8003cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cfc:	0150      	lsls	r0, r2, #5
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4621      	mov	r1, r4
 8003d04:	1a51      	subs	r1, r2, r1
 8003d06:	6439      	str	r1, [r7, #64]	@ 0x40
 8003d08:	4629      	mov	r1, r5
 8003d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003d1c:	4649      	mov	r1, r9
 8003d1e:	018b      	lsls	r3, r1, #6
 8003d20:	4641      	mov	r1, r8
 8003d22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d26:	4641      	mov	r1, r8
 8003d28:	018a      	lsls	r2, r1, #6
 8003d2a:	4641      	mov	r1, r8
 8003d2c:	1a51      	subs	r1, r2, r1
 8003d2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d30:	4649      	mov	r1, r9
 8003d32:	eb63 0301 	sbc.w	r3, r3, r1
 8003d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003d44:	4649      	mov	r1, r9
 8003d46:	00cb      	lsls	r3, r1, #3
 8003d48:	4641      	mov	r1, r8
 8003d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d4e:	4641      	mov	r1, r8
 8003d50:	00ca      	lsls	r2, r1, #3
 8003d52:	4610      	mov	r0, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	4603      	mov	r3, r0
 8003d58:	4622      	mov	r2, r4
 8003d5a:	189b      	adds	r3, r3, r2
 8003d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d5e:	462b      	mov	r3, r5
 8003d60:	460a      	mov	r2, r1
 8003d62:	eb42 0303 	adc.w	r3, r2, r3
 8003d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d74:	4629      	mov	r1, r5
 8003d76:	024b      	lsls	r3, r1, #9
 8003d78:	4621      	mov	r1, r4
 8003d7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d7e:	4621      	mov	r1, r4
 8003d80:	024a      	lsls	r2, r1, #9
 8003d82:	4610      	mov	r0, r2
 8003d84:	4619      	mov	r1, r3
 8003d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003d98:	f7fc ff76 	bl	8000c88 <__aeabi_uldivmod>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4613      	mov	r3, r2
 8003da2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003da6:	e067      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da8:	4b75      	ldr	r3, [pc, #468]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x354>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	099b      	lsrs	r3, r3, #6
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003db4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003db8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003dc6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003dca:	4622      	mov	r2, r4
 8003dcc:	462b      	mov	r3, r5
 8003dce:	f04f 0000 	mov.w	r0, #0
 8003dd2:	f04f 0100 	mov.w	r1, #0
 8003dd6:	0159      	lsls	r1, r3, #5
 8003dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ddc:	0150      	lsls	r0, r2, #5
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4621      	mov	r1, r4
 8003de4:	1a51      	subs	r1, r2, r1
 8003de6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003de8:	4629      	mov	r1, r5
 8003dea:	eb63 0301 	sbc.w	r3, r3, r1
 8003dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003dfc:	4649      	mov	r1, r9
 8003dfe:	018b      	lsls	r3, r1, #6
 8003e00:	4641      	mov	r1, r8
 8003e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e06:	4641      	mov	r1, r8
 8003e08:	018a      	lsls	r2, r1, #6
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e10:	4649      	mov	r1, r9
 8003e12:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e2a:	4692      	mov	sl, r2
 8003e2c:	469b      	mov	fp, r3
 8003e2e:	4623      	mov	r3, r4
 8003e30:	eb1a 0303 	adds.w	r3, sl, r3
 8003e34:	623b      	str	r3, [r7, #32]
 8003e36:	462b      	mov	r3, r5
 8003e38:	eb4b 0303 	adc.w	r3, fp, r3
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	028b      	lsls	r3, r1, #10
 8003e4e:	4621      	mov	r1, r4
 8003e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e54:	4621      	mov	r1, r4
 8003e56:	028a      	lsls	r2, r1, #10
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e60:	2200      	movs	r2, #0
 8003e62:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e64:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003e6a:	f7fc ff0d 	bl	8000c88 <__aeabi_uldivmod>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4613      	mov	r3, r2
 8003e74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e78:	4b41      	ldr	r3, [pc, #260]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	0c1b      	lsrs	r3, r3, #16
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	3301      	adds	r3, #1
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003e8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e9a:	e0eb      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e9c:	4b38      	ldr	r3, [pc, #224]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ea8:	4b35      	ldr	r3, [pc, #212]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d06b      	beq.n	8003f8c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb4:	4b32      	ldr	r3, [pc, #200]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	099b      	lsrs	r3, r3, #6
 8003eba:	2200      	movs	r2, #0
 8003ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ebe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ec0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ec8:	2300      	movs	r3, #0
 8003eca:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ecc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003ed0:	4622      	mov	r2, r4
 8003ed2:	462b      	mov	r3, r5
 8003ed4:	f04f 0000 	mov.w	r0, #0
 8003ed8:	f04f 0100 	mov.w	r1, #0
 8003edc:	0159      	lsls	r1, r3, #5
 8003ede:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee2:	0150      	lsls	r0, r2, #5
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4621      	mov	r1, r4
 8003eea:	1a51      	subs	r1, r2, r1
 8003eec:	61b9      	str	r1, [r7, #24]
 8003eee:	4629      	mov	r1, r5
 8003ef0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f02:	4659      	mov	r1, fp
 8003f04:	018b      	lsls	r3, r1, #6
 8003f06:	4651      	mov	r1, sl
 8003f08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f0c:	4651      	mov	r1, sl
 8003f0e:	018a      	lsls	r2, r1, #6
 8003f10:	4651      	mov	r1, sl
 8003f12:	ebb2 0801 	subs.w	r8, r2, r1
 8003f16:	4659      	mov	r1, fp
 8003f18:	eb63 0901 	sbc.w	r9, r3, r1
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f30:	4690      	mov	r8, r2
 8003f32:	4699      	mov	r9, r3
 8003f34:	4623      	mov	r3, r4
 8003f36:	eb18 0303 	adds.w	r3, r8, r3
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	462b      	mov	r3, r5
 8003f3e:	eb49 0303 	adc.w	r3, r9, r3
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f50:	4629      	mov	r1, r5
 8003f52:	024b      	lsls	r3, r1, #9
 8003f54:	4621      	mov	r1, r4
 8003f56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	024a      	lsls	r2, r1, #9
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f66:	2200      	movs	r2, #0
 8003f68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f6a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003f6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f70:	f7fc fe8a 	bl	8000c88 <__aeabi_uldivmod>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4613      	mov	r3, r2
 8003f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f7e:	e065      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x420>
 8003f80:	40023800 	.word	0x40023800
 8003f84:	00f42400 	.word	0x00f42400
 8003f88:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8c:	4b3d      	ldr	r3, [pc, #244]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	099b      	lsrs	r3, r3, #6
 8003f92:	2200      	movs	r2, #0
 8003f94:	4618      	mov	r0, r3
 8003f96:	4611      	mov	r1, r2
 8003f98:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fa2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003fa6:	4642      	mov	r2, r8
 8003fa8:	464b      	mov	r3, r9
 8003faa:	f04f 0000 	mov.w	r0, #0
 8003fae:	f04f 0100 	mov.w	r1, #0
 8003fb2:	0159      	lsls	r1, r3, #5
 8003fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb8:	0150      	lsls	r0, r2, #5
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4641      	mov	r1, r8
 8003fc0:	1a51      	subs	r1, r2, r1
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003fd8:	4659      	mov	r1, fp
 8003fda:	018b      	lsls	r3, r1, #6
 8003fdc:	4651      	mov	r1, sl
 8003fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	018a      	lsls	r2, r1, #6
 8003fe6:	4651      	mov	r1, sl
 8003fe8:	1a54      	subs	r4, r2, r1
 8003fea:	4659      	mov	r1, fp
 8003fec:	eb63 0501 	sbc.w	r5, r3, r1
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	00eb      	lsls	r3, r5, #3
 8003ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ffe:	00e2      	lsls	r2, r4, #3
 8004000:	4614      	mov	r4, r2
 8004002:	461d      	mov	r5, r3
 8004004:	4643      	mov	r3, r8
 8004006:	18e3      	adds	r3, r4, r3
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	464b      	mov	r3, r9
 800400c:	eb45 0303 	adc.w	r3, r5, r3
 8004010:	607b      	str	r3, [r7, #4]
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800401e:	4629      	mov	r1, r5
 8004020:	028b      	lsls	r3, r1, #10
 8004022:	4621      	mov	r1, r4
 8004024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004028:	4621      	mov	r1, r4
 800402a:	028a      	lsls	r2, r1, #10
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004034:	2200      	movs	r2, #0
 8004036:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004038:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800403a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800403e:	f7fc fe23 	bl	8000c88 <__aeabi_uldivmod>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4613      	mov	r3, r2
 8004048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800404c:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x458>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	0f1b      	lsrs	r3, r3, #28
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800405a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800405e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004062:	fbb2 f3f3 	udiv	r3, r2, r3
 8004066:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800406a:	e003      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800406c:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x45c>)
 800406e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004072:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004074:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004078:	4618      	mov	r0, r3
 800407a:	37b8      	adds	r7, #184	@ 0xb8
 800407c:	46bd      	mov	sp, r7
 800407e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800
 8004088:	00f42400 	.word	0x00f42400

0800408c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e28d      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8083 	beq.w	80041b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80040ac:	4b94      	ldr	r3, [pc, #592]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d019      	beq.n	80040ec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80040b8:	4b91      	ldr	r3, [pc, #580]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 030c 	and.w	r3, r3, #12
        || \
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d106      	bne.n	80040d2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80040c4:	4b8e      	ldr	r3, [pc, #568]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040d0:	d00c      	beq.n	80040ec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d2:	4b8b      	ldr	r3, [pc, #556]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d112      	bne.n	8004104 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040de:	4b88      	ldr	r3, [pc, #544]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040ea:	d10b      	bne.n	8004104 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ec:	4b84      	ldr	r3, [pc, #528]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d05b      	beq.n	80041b0 <HAL_RCC_OscConfig+0x124>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d157      	bne.n	80041b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e25a      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800410c:	d106      	bne.n	800411c <HAL_RCC_OscConfig+0x90>
 800410e:	4b7c      	ldr	r3, [pc, #496]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a7b      	ldr	r2, [pc, #492]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e01d      	b.n	8004158 <HAL_RCC_OscConfig+0xcc>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004124:	d10c      	bne.n	8004140 <HAL_RCC_OscConfig+0xb4>
 8004126:	4b76      	ldr	r3, [pc, #472]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a75      	ldr	r2, [pc, #468]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 800412c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	4b73      	ldr	r3, [pc, #460]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a72      	ldr	r2, [pc, #456]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 8004138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e00b      	b.n	8004158 <HAL_RCC_OscConfig+0xcc>
 8004140:	4b6f      	ldr	r3, [pc, #444]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a6e      	ldr	r2, [pc, #440]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 8004146:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	4b6c      	ldr	r3, [pc, #432]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a6b      	ldr	r2, [pc, #428]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 8004152:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d013      	beq.n	8004188 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fd ffb0 	bl	80020c4 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004168:	f7fd ffac 	bl	80020c4 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	@ 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e21f      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417a:	4b61      	ldr	r3, [pc, #388]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0xdc>
 8004186:	e014      	b.n	80041b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fd ff9c 	bl	80020c4 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004190:	f7fd ff98 	bl	80020c4 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	@ 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e20b      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a2:	4b57      	ldr	r3, [pc, #348]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x104>
 80041ae:	e000      	b.n	80041b2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d06f      	beq.n	800429e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041be:	4b50      	ldr	r3, [pc, #320]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d017      	beq.n	80041fa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80041ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
        || \
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d105      	bne.n	80041e2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80041d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041e2:	4b47      	ldr	r3, [pc, #284]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	d11c      	bne.n	8004228 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ee:	4b44      	ldr	r3, [pc, #272]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d116      	bne.n	8004228 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fa:	4b41      	ldr	r3, [pc, #260]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <HAL_RCC_OscConfig+0x186>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d001      	beq.n	8004212 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e1d3      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004212:	4b3b      	ldr	r3, [pc, #236]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4937      	ldr	r1, [pc, #220]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004226:	e03a      	b.n	800429e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d020      	beq.n	8004272 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004230:	4b34      	ldr	r3, [pc, #208]	@ (8004304 <HAL_RCC_OscConfig+0x278>)
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004236:	f7fd ff45 	bl	80020c4 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800423e:	f7fd ff41 	bl	80020c4 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e1b4      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004250:	4b2b      	ldr	r3, [pc, #172]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425c:	4b28      	ldr	r3, [pc, #160]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4925      	ldr	r1, [pc, #148]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 800426c:	4313      	orrs	r3, r2
 800426e:	600b      	str	r3, [r1, #0]
 8004270:	e015      	b.n	800429e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004272:	4b24      	ldr	r3, [pc, #144]	@ (8004304 <HAL_RCC_OscConfig+0x278>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fd ff24 	bl	80020c4 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004280:	f7fd ff20 	bl	80020c4 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e193      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004292:	4b1b      	ldr	r3, [pc, #108]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d036      	beq.n	8004318 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d016      	beq.n	80042e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042b2:	4b15      	ldr	r3, [pc, #84]	@ (8004308 <HAL_RCC_OscConfig+0x27c>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fd ff04 	bl	80020c4 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c0:	f7fd ff00 	bl	80020c4 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e173      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004300 <HAL_RCC_OscConfig+0x274>)
 80042d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0x234>
 80042de:	e01b      	b.n	8004318 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e0:	4b09      	ldr	r3, [pc, #36]	@ (8004308 <HAL_RCC_OscConfig+0x27c>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e6:	f7fd feed 	bl	80020c4 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ec:	e00e      	b.n	800430c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ee:	f7fd fee9 	bl	80020c4 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d907      	bls.n	800430c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e15c      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
 8004300:	40023800 	.word	0x40023800
 8004304:	42470000 	.word	0x42470000
 8004308:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800430c:	4b8a      	ldr	r3, [pc, #552]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 800430e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ea      	bne.n	80042ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 8097 	beq.w	8004454 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004326:	2300      	movs	r3, #0
 8004328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432a:	4b83      	ldr	r3, [pc, #524]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	4b7f      	ldr	r3, [pc, #508]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	4a7e      	ldr	r2, [pc, #504]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 8004340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004344:	6413      	str	r3, [r2, #64]	@ 0x40
 8004346:	4b7c      	ldr	r3, [pc, #496]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004352:	2301      	movs	r3, #1
 8004354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004356:	4b79      	ldr	r3, [pc, #484]	@ (800453c <HAL_RCC_OscConfig+0x4b0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d118      	bne.n	8004394 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004362:	4b76      	ldr	r3, [pc, #472]	@ (800453c <HAL_RCC_OscConfig+0x4b0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a75      	ldr	r2, [pc, #468]	@ (800453c <HAL_RCC_OscConfig+0x4b0>)
 8004368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800436c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800436e:	f7fd fea9 	bl	80020c4 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004376:	f7fd fea5 	bl	80020c4 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e118      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004388:	4b6c      	ldr	r3, [pc, #432]	@ (800453c <HAL_RCC_OscConfig+0x4b0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0f0      	beq.n	8004376 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d106      	bne.n	80043aa <HAL_RCC_OscConfig+0x31e>
 800439c:	4b66      	ldr	r3, [pc, #408]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 800439e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a0:	4a65      	ldr	r2, [pc, #404]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a8:	e01c      	b.n	80043e4 <HAL_RCC_OscConfig+0x358>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b05      	cmp	r3, #5
 80043b0:	d10c      	bne.n	80043cc <HAL_RCC_OscConfig+0x340>
 80043b2:	4b61      	ldr	r3, [pc, #388]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b6:	4a60      	ldr	r2, [pc, #384]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043b8:	f043 0304 	orr.w	r3, r3, #4
 80043bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80043be:	4b5e      	ldr	r3, [pc, #376]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c2:	4a5d      	ldr	r2, [pc, #372]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ca:	e00b      	b.n	80043e4 <HAL_RCC_OscConfig+0x358>
 80043cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d0:	4a59      	ldr	r2, [pc, #356]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043d2:	f023 0301 	bic.w	r3, r3, #1
 80043d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d8:	4b57      	ldr	r3, [pc, #348]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043dc:	4a56      	ldr	r2, [pc, #344]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80043de:	f023 0304 	bic.w	r3, r3, #4
 80043e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d015      	beq.n	8004418 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ec:	f7fd fe6a 	bl	80020c4 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f2:	e00a      	b.n	800440a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f4:	f7fd fe66 	bl	80020c4 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e0d7      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800440a:	4b4b      	ldr	r3, [pc, #300]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0ee      	beq.n	80043f4 <HAL_RCC_OscConfig+0x368>
 8004416:	e014      	b.n	8004442 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004418:	f7fd fe54 	bl	80020c4 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441e:	e00a      	b.n	8004436 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004420:	f7fd fe50 	bl	80020c4 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e0c1      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004436:	4b40      	ldr	r3, [pc, #256]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1ee      	bne.n	8004420 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004442:	7dfb      	ldrb	r3, [r7, #23]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d105      	bne.n	8004454 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004448:	4b3b      	ldr	r3, [pc, #236]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 800444a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444c:	4a3a      	ldr	r2, [pc, #232]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 800444e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004452:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80ad 	beq.w	80045b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800445e:	4b36      	ldr	r3, [pc, #216]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	2b08      	cmp	r3, #8
 8004468:	d060      	beq.n	800452c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d145      	bne.n	80044fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004472:	4b33      	ldr	r3, [pc, #204]	@ (8004540 <HAL_RCC_OscConfig+0x4b4>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fd fe24 	bl	80020c4 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004480:	f7fd fe20 	bl	80020c4 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e093      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004492:	4b29      	ldr	r3, [pc, #164]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69da      	ldr	r2, [r3, #28]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	019b      	lsls	r3, r3, #6
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	3b01      	subs	r3, #1
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c0:	061b      	lsls	r3, r3, #24
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c8:	071b      	lsls	r3, r3, #28
 80044ca:	491b      	ldr	r1, [pc, #108]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004540 <HAL_RCC_OscConfig+0x4b4>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d6:	f7fd fdf5 	bl	80020c4 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044de:	f7fd fdf1 	bl	80020c4 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e064      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f0:	4b11      	ldr	r3, [pc, #68]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f0      	beq.n	80044de <HAL_RCC_OscConfig+0x452>
 80044fc:	e05c      	b.n	80045b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fe:	4b10      	ldr	r3, [pc, #64]	@ (8004540 <HAL_RCC_OscConfig+0x4b4>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fd fdde 	bl	80020c4 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450c:	f7fd fdda 	bl	80020c4 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e04d      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451e:	4b06      	ldr	r3, [pc, #24]	@ (8004538 <HAL_RCC_OscConfig+0x4ac>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x480>
 800452a:	e045      	b.n	80045b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d107      	bne.n	8004544 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e040      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
 8004538:	40023800 	.word	0x40023800
 800453c:	40007000 	.word	0x40007000
 8004540:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004544:	4b1f      	ldr	r3, [pc, #124]	@ (80045c4 <HAL_RCC_OscConfig+0x538>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d030      	beq.n	80045b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d129      	bne.n	80045b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d122      	bne.n	80045b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004574:	4013      	ands	r3, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800457a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800457c:	4293      	cmp	r3, r2
 800457e:	d119      	bne.n	80045b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	3b01      	subs	r3, #1
 800458e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004590:	429a      	cmp	r2, r3
 8004592:	d10f      	bne.n	80045b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d107      	bne.n	80045b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800

080045c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e041      	b.n	800465e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f839 	bl	8004666 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3304      	adds	r3, #4
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f000 f9c0 	bl	800498c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b01      	cmp	r3, #1
 800468e:	d001      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e04e      	b.n	8004732 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a23      	ldr	r2, [pc, #140]	@ (8004740 <HAL_TIM_Base_Start_IT+0xc4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d022      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x80>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046be:	d01d      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x80>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004744 <HAL_TIM_Base_Start_IT+0xc8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d018      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x80>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004748 <HAL_TIM_Base_Start_IT+0xcc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d013      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x80>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1c      	ldr	r2, [pc, #112]	@ (800474c <HAL_TIM_Base_Start_IT+0xd0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00e      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x80>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004750 <HAL_TIM_Base_Start_IT+0xd4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d009      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x80>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a19      	ldr	r2, [pc, #100]	@ (8004754 <HAL_TIM_Base_Start_IT+0xd8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d004      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x80>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a18      	ldr	r2, [pc, #96]	@ (8004758 <HAL_TIM_Base_Start_IT+0xdc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d111      	bne.n	8004720 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b06      	cmp	r3, #6
 800470c:	d010      	beq.n	8004730 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471e:	e007      	b.n	8004730 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40010000 	.word	0x40010000
 8004744:	40000400 	.word	0x40000400
 8004748:	40000800 	.word	0x40000800
 800474c:	40000c00 	.word	0x40000c00
 8004750:	40010400 	.word	0x40010400
 8004754:	40014000 	.word	0x40014000
 8004758:	40001800 	.word	0x40001800

0800475c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d020      	beq.n	80047c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01b      	beq.n	80047c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0202 	mvn.w	r2, #2
 8004790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f8d2 	bl	8004950 <HAL_TIM_IC_CaptureCallback>
 80047ac:	e005      	b.n	80047ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f8c4 	bl	800493c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f8d5 	bl	8004964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d020      	beq.n	800480c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01b      	beq.n	800480c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0204 	mvn.w	r2, #4
 80047dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2202      	movs	r2, #2
 80047e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f8ac 	bl	8004950 <HAL_TIM_IC_CaptureCallback>
 80047f8:	e005      	b.n	8004806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f89e 	bl	800493c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f8af 	bl	8004964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d020      	beq.n	8004858 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01b      	beq.n	8004858 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0208 	mvn.w	r2, #8
 8004828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2204      	movs	r2, #4
 800482e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f886 	bl	8004950 <HAL_TIM_IC_CaptureCallback>
 8004844:	e005      	b.n	8004852 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f878 	bl	800493c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f889 	bl	8004964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	2b00      	cmp	r3, #0
 8004860:	d020      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01b      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0210 	mvn.w	r2, #16
 8004874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2208      	movs	r2, #8
 800487a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f860 	bl	8004950 <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f852 	bl	800493c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f863 	bl	8004964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00c      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d007      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0201 	mvn.w	r2, #1
 80048c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fc fdc0 	bl	8001448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00c      	beq.n	80048ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80048e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f906 	bl	8004af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00c      	beq.n	8004910 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d007      	beq.n	8004910 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f834 	bl	8004978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00c      	beq.n	8004934 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0220 	mvn.w	r2, #32
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f8d8 	bl	8004ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004934:	bf00      	nop
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a46      	ldr	r2, [pc, #280]	@ (8004ab8 <TIM_Base_SetConfig+0x12c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d013      	beq.n	80049cc <TIM_Base_SetConfig+0x40>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049aa:	d00f      	beq.n	80049cc <TIM_Base_SetConfig+0x40>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a43      	ldr	r2, [pc, #268]	@ (8004abc <TIM_Base_SetConfig+0x130>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00b      	beq.n	80049cc <TIM_Base_SetConfig+0x40>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a42      	ldr	r2, [pc, #264]	@ (8004ac0 <TIM_Base_SetConfig+0x134>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <TIM_Base_SetConfig+0x40>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a41      	ldr	r2, [pc, #260]	@ (8004ac4 <TIM_Base_SetConfig+0x138>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_Base_SetConfig+0x40>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a40      	ldr	r2, [pc, #256]	@ (8004ac8 <TIM_Base_SetConfig+0x13c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d108      	bne.n	80049de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a35      	ldr	r2, [pc, #212]	@ (8004ab8 <TIM_Base_SetConfig+0x12c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d02b      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ec:	d027      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a32      	ldr	r2, [pc, #200]	@ (8004abc <TIM_Base_SetConfig+0x130>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d023      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a31      	ldr	r2, [pc, #196]	@ (8004ac0 <TIM_Base_SetConfig+0x134>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d01f      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a30      	ldr	r2, [pc, #192]	@ (8004ac4 <TIM_Base_SetConfig+0x138>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01b      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a2f      	ldr	r2, [pc, #188]	@ (8004ac8 <TIM_Base_SetConfig+0x13c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d017      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a2e      	ldr	r2, [pc, #184]	@ (8004acc <TIM_Base_SetConfig+0x140>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d013      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad0 <TIM_Base_SetConfig+0x144>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00f      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a2c      	ldr	r2, [pc, #176]	@ (8004ad4 <TIM_Base_SetConfig+0x148>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00b      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a2b      	ldr	r2, [pc, #172]	@ (8004ad8 <TIM_Base_SetConfig+0x14c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d007      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a2a      	ldr	r2, [pc, #168]	@ (8004adc <TIM_Base_SetConfig+0x150>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d003      	beq.n	8004a3e <TIM_Base_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a29      	ldr	r2, [pc, #164]	@ (8004ae0 <TIM_Base_SetConfig+0x154>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d108      	bne.n	8004a50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a10      	ldr	r2, [pc, #64]	@ (8004ab8 <TIM_Base_SetConfig+0x12c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_Base_SetConfig+0xf8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a12      	ldr	r2, [pc, #72]	@ (8004ac8 <TIM_Base_SetConfig+0x13c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d103      	bne.n	8004a8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d105      	bne.n	8004aaa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f023 0201 	bic.w	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	611a      	str	r2, [r3, #16]
  }
}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	40000400 	.word	0x40000400
 8004ac0:	40000800 	.word	0x40000800
 8004ac4:	40000c00 	.word	0x40000c00
 8004ac8:	40010400 	.word	0x40010400
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	40014400 	.word	0x40014400
 8004ad4:	40014800 	.word	0x40014800
 8004ad8:	40001800 	.word	0x40001800
 8004adc:	40001c00 	.word	0x40001c00
 8004ae0:	40002000 	.word	0x40002000

08004ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e042      	b.n	8004ba4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fd f890 	bl	8001c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2224      	movs	r2, #36	@ 0x24
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f973 	bl	8004e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695a      	ldr	r2, [r3, #20]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	@ 0x28
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d175      	bne.n	8004cb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_UART_Transmit+0x2c>
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e06e      	b.n	8004cba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2221      	movs	r2, #33	@ 0x21
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bea:	f7fd fa6b 	bl	80020c4 <HAL_GetTick>
 8004bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	88fa      	ldrh	r2, [r7, #6]
 8004bfa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c04:	d108      	bne.n	8004c18 <HAL_UART_Transmit+0x6c>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e003      	b.n	8004c20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c20:	e02e      	b.n	8004c80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2180      	movs	r1, #128	@ 0x80
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f848 	bl	8004cc2 <UART_WaitOnFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e03a      	b.n	8004cba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e007      	b.n	8004c72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	781a      	ldrb	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1cb      	bne.n	8004c22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2200      	movs	r2, #0
 8004c92:	2140      	movs	r1, #64	@ 0x40
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f814 	bl	8004cc2 <UART_WaitOnFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e006      	b.n	8004cba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e000      	b.n	8004cba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
  }
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3720      	adds	r7, #32
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b086      	sub	sp, #24
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd2:	e03b      	b.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	d037      	beq.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cdc:	f7fd f9f2 	bl	80020c4 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	6a3a      	ldr	r2, [r7, #32]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d302      	bcc.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e03a      	b.n	8004d6c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d023      	beq.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b80      	cmp	r3, #128	@ 0x80
 8004d08:	d020      	beq.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b40      	cmp	r3, #64	@ 0x40
 8004d0e:	d01d      	beq.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d116      	bne.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f81d 	bl	8004d74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e00f      	b.n	8004d6c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4013      	ands	r3, r2
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	bf0c      	ite	eq
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	2300      	movne	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	461a      	mov	r2, r3
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d0b4      	beq.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b095      	sub	sp, #84	@ 0x54
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d9c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004da2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e5      	bne.n	8004d7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3314      	adds	r3, #20
 8004db6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3314      	adds	r3, #20
 8004dce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e5      	bne.n	8004db0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d119      	bne.n	8004e20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	330c      	adds	r3, #12
 8004df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f023 0310 	bic.w	r3, r3, #16
 8004e02:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e0c:	61ba      	str	r2, [r7, #24]
 8004e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6979      	ldr	r1, [r7, #20]
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	613b      	str	r3, [r7, #16]
   return(result);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e5      	bne.n	8004dec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e2e:	bf00      	nop
 8004e30:	3754      	adds	r7, #84	@ 0x54
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e40:	b0c0      	sub	sp, #256	@ 0x100
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e58:	68d9      	ldr	r1, [r3, #12]
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	ea40 0301 	orr.w	r3, r0, r1
 8004e64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e94:	f021 010c 	bic.w	r1, r1, #12
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb6:	6999      	ldr	r1, [r3, #24]
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	ea40 0301 	orr.w	r3, r0, r1
 8004ec2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4b8f      	ldr	r3, [pc, #572]	@ (8005108 <UART_SetConfig+0x2cc>)
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d005      	beq.n	8004edc <UART_SetConfig+0xa0>
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	4b8d      	ldr	r3, [pc, #564]	@ (800510c <UART_SetConfig+0x2d0>)
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d104      	bne.n	8004ee6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004edc:	f7fe fe60 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
 8004ee0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ee4:	e003      	b.n	8004eee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ee6:	f7fe fe47 	bl	8003b78 <HAL_RCC_GetPCLK1Freq>
 8004eea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ef8:	f040 810c 	bne.w	8005114 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f0e:	4622      	mov	r2, r4
 8004f10:	462b      	mov	r3, r5
 8004f12:	1891      	adds	r1, r2, r2
 8004f14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f16:	415b      	adcs	r3, r3
 8004f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f1e:	4621      	mov	r1, r4
 8004f20:	eb12 0801 	adds.w	r8, r2, r1
 8004f24:	4629      	mov	r1, r5
 8004f26:	eb43 0901 	adc.w	r9, r3, r1
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f3e:	4690      	mov	r8, r2
 8004f40:	4699      	mov	r9, r3
 8004f42:	4623      	mov	r3, r4
 8004f44:	eb18 0303 	adds.w	r3, r8, r3
 8004f48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f4c:	462b      	mov	r3, r5
 8004f4e:	eb49 0303 	adc.w	r3, r9, r3
 8004f52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	18db      	adds	r3, r3, r3
 8004f6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f70:	4613      	mov	r3, r2
 8004f72:	eb42 0303 	adc.w	r3, r2, r3
 8004f76:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f80:	f7fb fe82 	bl	8000c88 <__aeabi_uldivmod>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4b61      	ldr	r3, [pc, #388]	@ (8005110 <UART_SetConfig+0x2d4>)
 8004f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	011c      	lsls	r4, r3, #4
 8004f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004fa4:	4642      	mov	r2, r8
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	1891      	adds	r1, r2, r2
 8004faa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004fac:	415b      	adcs	r3, r3
 8004fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	eb12 0a01 	adds.w	sl, r2, r1
 8004fba:	4649      	mov	r1, r9
 8004fbc:	eb43 0b01 	adc.w	fp, r3, r1
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fd4:	4692      	mov	sl, r2
 8004fd6:	469b      	mov	fp, r3
 8004fd8:	4643      	mov	r3, r8
 8004fda:	eb1a 0303 	adds.w	r3, sl, r3
 8004fde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	eb4b 0303 	adc.w	r3, fp, r3
 8004fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ff8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ffc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005000:	460b      	mov	r3, r1
 8005002:	18db      	adds	r3, r3, r3
 8005004:	643b      	str	r3, [r7, #64]	@ 0x40
 8005006:	4613      	mov	r3, r2
 8005008:	eb42 0303 	adc.w	r3, r2, r3
 800500c:	647b      	str	r3, [r7, #68]	@ 0x44
 800500e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005012:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005016:	f7fb fe37 	bl	8000c88 <__aeabi_uldivmod>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4611      	mov	r1, r2
 8005020:	4b3b      	ldr	r3, [pc, #236]	@ (8005110 <UART_SetConfig+0x2d4>)
 8005022:	fba3 2301 	umull	r2, r3, r3, r1
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	2264      	movs	r2, #100	@ 0x64
 800502a:	fb02 f303 	mul.w	r3, r2, r3
 800502e:	1acb      	subs	r3, r1, r3
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005036:	4b36      	ldr	r3, [pc, #216]	@ (8005110 <UART_SetConfig+0x2d4>)
 8005038:	fba3 2302 	umull	r2, r3, r3, r2
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005044:	441c      	add	r4, r3
 8005046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800504a:	2200      	movs	r2, #0
 800504c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005050:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005054:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005058:	4642      	mov	r2, r8
 800505a:	464b      	mov	r3, r9
 800505c:	1891      	adds	r1, r2, r2
 800505e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005060:	415b      	adcs	r3, r3
 8005062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005064:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005068:	4641      	mov	r1, r8
 800506a:	1851      	adds	r1, r2, r1
 800506c:	6339      	str	r1, [r7, #48]	@ 0x30
 800506e:	4649      	mov	r1, r9
 8005070:	414b      	adcs	r3, r1
 8005072:	637b      	str	r3, [r7, #52]	@ 0x34
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005080:	4659      	mov	r1, fp
 8005082:	00cb      	lsls	r3, r1, #3
 8005084:	4651      	mov	r1, sl
 8005086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800508a:	4651      	mov	r1, sl
 800508c:	00ca      	lsls	r2, r1, #3
 800508e:	4610      	mov	r0, r2
 8005090:	4619      	mov	r1, r3
 8005092:	4603      	mov	r3, r0
 8005094:	4642      	mov	r2, r8
 8005096:	189b      	adds	r3, r3, r2
 8005098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800509c:	464b      	mov	r3, r9
 800509e:	460a      	mov	r2, r1
 80050a0:	eb42 0303 	adc.w	r3, r2, r3
 80050a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80050b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050bc:	460b      	mov	r3, r1
 80050be:	18db      	adds	r3, r3, r3
 80050c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050c2:	4613      	mov	r3, r2
 80050c4:	eb42 0303 	adc.w	r3, r2, r3
 80050c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050d2:	f7fb fdd9 	bl	8000c88 <__aeabi_uldivmod>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4b0d      	ldr	r3, [pc, #52]	@ (8005110 <UART_SetConfig+0x2d4>)
 80050dc:	fba3 1302 	umull	r1, r3, r3, r2
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	2164      	movs	r1, #100	@ 0x64
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	3332      	adds	r3, #50	@ 0x32
 80050ee:	4a08      	ldr	r2, [pc, #32]	@ (8005110 <UART_SetConfig+0x2d4>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	f003 0207 	and.w	r2, r3, #7
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4422      	add	r2, r4
 8005102:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005104:	e106      	b.n	8005314 <UART_SetConfig+0x4d8>
 8005106:	bf00      	nop
 8005108:	40011000 	.word	0x40011000
 800510c:	40011400 	.word	0x40011400
 8005110:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005118:	2200      	movs	r2, #0
 800511a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800511e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005122:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005126:	4642      	mov	r2, r8
 8005128:	464b      	mov	r3, r9
 800512a:	1891      	adds	r1, r2, r2
 800512c:	6239      	str	r1, [r7, #32]
 800512e:	415b      	adcs	r3, r3
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
 8005132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005136:	4641      	mov	r1, r8
 8005138:	1854      	adds	r4, r2, r1
 800513a:	4649      	mov	r1, r9
 800513c:	eb43 0501 	adc.w	r5, r3, r1
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	00eb      	lsls	r3, r5, #3
 800514a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800514e:	00e2      	lsls	r2, r4, #3
 8005150:	4614      	mov	r4, r2
 8005152:	461d      	mov	r5, r3
 8005154:	4643      	mov	r3, r8
 8005156:	18e3      	adds	r3, r4, r3
 8005158:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800515c:	464b      	mov	r3, r9
 800515e:	eb45 0303 	adc.w	r3, r5, r3
 8005162:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005172:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005182:	4629      	mov	r1, r5
 8005184:	008b      	lsls	r3, r1, #2
 8005186:	4621      	mov	r1, r4
 8005188:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800518c:	4621      	mov	r1, r4
 800518e:	008a      	lsls	r2, r1, #2
 8005190:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005194:	f7fb fd78 	bl	8000c88 <__aeabi_uldivmod>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4b60      	ldr	r3, [pc, #384]	@ (8005320 <UART_SetConfig+0x4e4>)
 800519e:	fba3 2302 	umull	r2, r3, r3, r2
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	011c      	lsls	r4, r3, #4
 80051a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80051b8:	4642      	mov	r2, r8
 80051ba:	464b      	mov	r3, r9
 80051bc:	1891      	adds	r1, r2, r2
 80051be:	61b9      	str	r1, [r7, #24]
 80051c0:	415b      	adcs	r3, r3
 80051c2:	61fb      	str	r3, [r7, #28]
 80051c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051c8:	4641      	mov	r1, r8
 80051ca:	1851      	adds	r1, r2, r1
 80051cc:	6139      	str	r1, [r7, #16]
 80051ce:	4649      	mov	r1, r9
 80051d0:	414b      	adcs	r3, r1
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051e0:	4659      	mov	r1, fp
 80051e2:	00cb      	lsls	r3, r1, #3
 80051e4:	4651      	mov	r1, sl
 80051e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ea:	4651      	mov	r1, sl
 80051ec:	00ca      	lsls	r2, r1, #3
 80051ee:	4610      	mov	r0, r2
 80051f0:	4619      	mov	r1, r3
 80051f2:	4603      	mov	r3, r0
 80051f4:	4642      	mov	r2, r8
 80051f6:	189b      	adds	r3, r3, r2
 80051f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051fc:	464b      	mov	r3, r9
 80051fe:	460a      	mov	r2, r1
 8005200:	eb42 0303 	adc.w	r3, r2, r3
 8005204:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005212:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005220:	4649      	mov	r1, r9
 8005222:	008b      	lsls	r3, r1, #2
 8005224:	4641      	mov	r1, r8
 8005226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800522a:	4641      	mov	r1, r8
 800522c:	008a      	lsls	r2, r1, #2
 800522e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005232:	f7fb fd29 	bl	8000c88 <__aeabi_uldivmod>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4611      	mov	r1, r2
 800523c:	4b38      	ldr	r3, [pc, #224]	@ (8005320 <UART_SetConfig+0x4e4>)
 800523e:	fba3 2301 	umull	r2, r3, r3, r1
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	2264      	movs	r2, #100	@ 0x64
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	1acb      	subs	r3, r1, r3
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	3332      	adds	r3, #50	@ 0x32
 8005250:	4a33      	ldr	r2, [pc, #204]	@ (8005320 <UART_SetConfig+0x4e4>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800525c:	441c      	add	r4, r3
 800525e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005262:	2200      	movs	r2, #0
 8005264:	673b      	str	r3, [r7, #112]	@ 0x70
 8005266:	677a      	str	r2, [r7, #116]	@ 0x74
 8005268:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800526c:	4642      	mov	r2, r8
 800526e:	464b      	mov	r3, r9
 8005270:	1891      	adds	r1, r2, r2
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	415b      	adcs	r3, r3
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800527c:	4641      	mov	r1, r8
 800527e:	1851      	adds	r1, r2, r1
 8005280:	6039      	str	r1, [r7, #0]
 8005282:	4649      	mov	r1, r9
 8005284:	414b      	adcs	r3, r1
 8005286:	607b      	str	r3, [r7, #4]
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	f04f 0300 	mov.w	r3, #0
 8005290:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005294:	4659      	mov	r1, fp
 8005296:	00cb      	lsls	r3, r1, #3
 8005298:	4651      	mov	r1, sl
 800529a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800529e:	4651      	mov	r1, sl
 80052a0:	00ca      	lsls	r2, r1, #3
 80052a2:	4610      	mov	r0, r2
 80052a4:	4619      	mov	r1, r3
 80052a6:	4603      	mov	r3, r0
 80052a8:	4642      	mov	r2, r8
 80052aa:	189b      	adds	r3, r3, r2
 80052ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052ae:	464b      	mov	r3, r9
 80052b0:	460a      	mov	r2, r1
 80052b2:	eb42 0303 	adc.w	r3, r2, r3
 80052b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80052c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80052d0:	4649      	mov	r1, r9
 80052d2:	008b      	lsls	r3, r1, #2
 80052d4:	4641      	mov	r1, r8
 80052d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052da:	4641      	mov	r1, r8
 80052dc:	008a      	lsls	r2, r1, #2
 80052de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80052e2:	f7fb fcd1 	bl	8000c88 <__aeabi_uldivmod>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005320 <UART_SetConfig+0x4e4>)
 80052ec:	fba3 1302 	umull	r1, r3, r3, r2
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	2164      	movs	r1, #100	@ 0x64
 80052f4:	fb01 f303 	mul.w	r3, r1, r3
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	3332      	adds	r3, #50	@ 0x32
 80052fe:	4a08      	ldr	r2, [pc, #32]	@ (8005320 <UART_SetConfig+0x4e4>)
 8005300:	fba2 2303 	umull	r2, r3, r2, r3
 8005304:	095b      	lsrs	r3, r3, #5
 8005306:	f003 020f 	and.w	r2, r3, #15
 800530a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4422      	add	r2, r4
 8005312:	609a      	str	r2, [r3, #8]
}
 8005314:	bf00      	nop
 8005316:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800531a:	46bd      	mov	sp, r7
 800531c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005320:	51eb851f 	.word	0x51eb851f

08005324 <__cvt>:
 8005324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005328:	ec57 6b10 	vmov	r6, r7, d0
 800532c:	2f00      	cmp	r7, #0
 800532e:	460c      	mov	r4, r1
 8005330:	4619      	mov	r1, r3
 8005332:	463b      	mov	r3, r7
 8005334:	bfbb      	ittet	lt
 8005336:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800533a:	461f      	movlt	r7, r3
 800533c:	2300      	movge	r3, #0
 800533e:	232d      	movlt	r3, #45	@ 0x2d
 8005340:	700b      	strb	r3, [r1, #0]
 8005342:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005344:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005348:	4691      	mov	r9, r2
 800534a:	f023 0820 	bic.w	r8, r3, #32
 800534e:	bfbc      	itt	lt
 8005350:	4632      	movlt	r2, r6
 8005352:	4616      	movlt	r6, r2
 8005354:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005358:	d005      	beq.n	8005366 <__cvt+0x42>
 800535a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800535e:	d100      	bne.n	8005362 <__cvt+0x3e>
 8005360:	3401      	adds	r4, #1
 8005362:	2102      	movs	r1, #2
 8005364:	e000      	b.n	8005368 <__cvt+0x44>
 8005366:	2103      	movs	r1, #3
 8005368:	ab03      	add	r3, sp, #12
 800536a:	9301      	str	r3, [sp, #4]
 800536c:	ab02      	add	r3, sp, #8
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	ec47 6b10 	vmov	d0, r6, r7
 8005374:	4653      	mov	r3, sl
 8005376:	4622      	mov	r2, r4
 8005378:	f000 fe5a 	bl	8006030 <_dtoa_r>
 800537c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005380:	4605      	mov	r5, r0
 8005382:	d119      	bne.n	80053b8 <__cvt+0x94>
 8005384:	f019 0f01 	tst.w	r9, #1
 8005388:	d00e      	beq.n	80053a8 <__cvt+0x84>
 800538a:	eb00 0904 	add.w	r9, r0, r4
 800538e:	2200      	movs	r2, #0
 8005390:	2300      	movs	r3, #0
 8005392:	4630      	mov	r0, r6
 8005394:	4639      	mov	r1, r7
 8005396:	f7fb fbb7 	bl	8000b08 <__aeabi_dcmpeq>
 800539a:	b108      	cbz	r0, 80053a0 <__cvt+0x7c>
 800539c:	f8cd 900c 	str.w	r9, [sp, #12]
 80053a0:	2230      	movs	r2, #48	@ 0x30
 80053a2:	9b03      	ldr	r3, [sp, #12]
 80053a4:	454b      	cmp	r3, r9
 80053a6:	d31e      	bcc.n	80053e6 <__cvt+0xc2>
 80053a8:	9b03      	ldr	r3, [sp, #12]
 80053aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80053ac:	1b5b      	subs	r3, r3, r5
 80053ae:	4628      	mov	r0, r5
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	b004      	add	sp, #16
 80053b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053bc:	eb00 0904 	add.w	r9, r0, r4
 80053c0:	d1e5      	bne.n	800538e <__cvt+0x6a>
 80053c2:	7803      	ldrb	r3, [r0, #0]
 80053c4:	2b30      	cmp	r3, #48	@ 0x30
 80053c6:	d10a      	bne.n	80053de <__cvt+0xba>
 80053c8:	2200      	movs	r2, #0
 80053ca:	2300      	movs	r3, #0
 80053cc:	4630      	mov	r0, r6
 80053ce:	4639      	mov	r1, r7
 80053d0:	f7fb fb9a 	bl	8000b08 <__aeabi_dcmpeq>
 80053d4:	b918      	cbnz	r0, 80053de <__cvt+0xba>
 80053d6:	f1c4 0401 	rsb	r4, r4, #1
 80053da:	f8ca 4000 	str.w	r4, [sl]
 80053de:	f8da 3000 	ldr.w	r3, [sl]
 80053e2:	4499      	add	r9, r3
 80053e4:	e7d3      	b.n	800538e <__cvt+0x6a>
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	9103      	str	r1, [sp, #12]
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	e7d9      	b.n	80053a2 <__cvt+0x7e>

080053ee <__exponent>:
 80053ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053f0:	2900      	cmp	r1, #0
 80053f2:	bfba      	itte	lt
 80053f4:	4249      	neglt	r1, r1
 80053f6:	232d      	movlt	r3, #45	@ 0x2d
 80053f8:	232b      	movge	r3, #43	@ 0x2b
 80053fa:	2909      	cmp	r1, #9
 80053fc:	7002      	strb	r2, [r0, #0]
 80053fe:	7043      	strb	r3, [r0, #1]
 8005400:	dd29      	ble.n	8005456 <__exponent+0x68>
 8005402:	f10d 0307 	add.w	r3, sp, #7
 8005406:	461d      	mov	r5, r3
 8005408:	270a      	movs	r7, #10
 800540a:	461a      	mov	r2, r3
 800540c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005410:	fb07 1416 	mls	r4, r7, r6, r1
 8005414:	3430      	adds	r4, #48	@ 0x30
 8005416:	f802 4c01 	strb.w	r4, [r2, #-1]
 800541a:	460c      	mov	r4, r1
 800541c:	2c63      	cmp	r4, #99	@ 0x63
 800541e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005422:	4631      	mov	r1, r6
 8005424:	dcf1      	bgt.n	800540a <__exponent+0x1c>
 8005426:	3130      	adds	r1, #48	@ 0x30
 8005428:	1e94      	subs	r4, r2, #2
 800542a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800542e:	1c41      	adds	r1, r0, #1
 8005430:	4623      	mov	r3, r4
 8005432:	42ab      	cmp	r3, r5
 8005434:	d30a      	bcc.n	800544c <__exponent+0x5e>
 8005436:	f10d 0309 	add.w	r3, sp, #9
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	42ac      	cmp	r4, r5
 800543e:	bf88      	it	hi
 8005440:	2300      	movhi	r3, #0
 8005442:	3302      	adds	r3, #2
 8005444:	4403      	add	r3, r0
 8005446:	1a18      	subs	r0, r3, r0
 8005448:	b003      	add	sp, #12
 800544a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800544c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005450:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005454:	e7ed      	b.n	8005432 <__exponent+0x44>
 8005456:	2330      	movs	r3, #48	@ 0x30
 8005458:	3130      	adds	r1, #48	@ 0x30
 800545a:	7083      	strb	r3, [r0, #2]
 800545c:	70c1      	strb	r1, [r0, #3]
 800545e:	1d03      	adds	r3, r0, #4
 8005460:	e7f1      	b.n	8005446 <__exponent+0x58>
	...

08005464 <_printf_float>:
 8005464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005468:	b08d      	sub	sp, #52	@ 0x34
 800546a:	460c      	mov	r4, r1
 800546c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005470:	4616      	mov	r6, r2
 8005472:	461f      	mov	r7, r3
 8005474:	4605      	mov	r5, r0
 8005476:	f000 fcdb 	bl	8005e30 <_localeconv_r>
 800547a:	6803      	ldr	r3, [r0, #0]
 800547c:	9304      	str	r3, [sp, #16]
 800547e:	4618      	mov	r0, r3
 8005480:	f7fa ff16 	bl	80002b0 <strlen>
 8005484:	2300      	movs	r3, #0
 8005486:	930a      	str	r3, [sp, #40]	@ 0x28
 8005488:	f8d8 3000 	ldr.w	r3, [r8]
 800548c:	9005      	str	r0, [sp, #20]
 800548e:	3307      	adds	r3, #7
 8005490:	f023 0307 	bic.w	r3, r3, #7
 8005494:	f103 0208 	add.w	r2, r3, #8
 8005498:	f894 a018 	ldrb.w	sl, [r4, #24]
 800549c:	f8d4 b000 	ldr.w	fp, [r4]
 80054a0:	f8c8 2000 	str.w	r2, [r8]
 80054a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80054ac:	9307      	str	r3, [sp, #28]
 80054ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80054b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80054b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054ba:	4b9c      	ldr	r3, [pc, #624]	@ (800572c <_printf_float+0x2c8>)
 80054bc:	f04f 32ff 	mov.w	r2, #4294967295
 80054c0:	f7fb fb54 	bl	8000b6c <__aeabi_dcmpun>
 80054c4:	bb70      	cbnz	r0, 8005524 <_printf_float+0xc0>
 80054c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054ca:	4b98      	ldr	r3, [pc, #608]	@ (800572c <_printf_float+0x2c8>)
 80054cc:	f04f 32ff 	mov.w	r2, #4294967295
 80054d0:	f7fb fb2e 	bl	8000b30 <__aeabi_dcmple>
 80054d4:	bb30      	cbnz	r0, 8005524 <_printf_float+0xc0>
 80054d6:	2200      	movs	r2, #0
 80054d8:	2300      	movs	r3, #0
 80054da:	4640      	mov	r0, r8
 80054dc:	4649      	mov	r1, r9
 80054de:	f7fb fb1d 	bl	8000b1c <__aeabi_dcmplt>
 80054e2:	b110      	cbz	r0, 80054ea <_printf_float+0x86>
 80054e4:	232d      	movs	r3, #45	@ 0x2d
 80054e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054ea:	4a91      	ldr	r2, [pc, #580]	@ (8005730 <_printf_float+0x2cc>)
 80054ec:	4b91      	ldr	r3, [pc, #580]	@ (8005734 <_printf_float+0x2d0>)
 80054ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80054f2:	bf94      	ite	ls
 80054f4:	4690      	movls	r8, r2
 80054f6:	4698      	movhi	r8, r3
 80054f8:	2303      	movs	r3, #3
 80054fa:	6123      	str	r3, [r4, #16]
 80054fc:	f02b 0304 	bic.w	r3, fp, #4
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	f04f 0900 	mov.w	r9, #0
 8005506:	9700      	str	r7, [sp, #0]
 8005508:	4633      	mov	r3, r6
 800550a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800550c:	4621      	mov	r1, r4
 800550e:	4628      	mov	r0, r5
 8005510:	f000 f9d2 	bl	80058b8 <_printf_common>
 8005514:	3001      	adds	r0, #1
 8005516:	f040 808d 	bne.w	8005634 <_printf_float+0x1d0>
 800551a:	f04f 30ff 	mov.w	r0, #4294967295
 800551e:	b00d      	add	sp, #52	@ 0x34
 8005520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005524:	4642      	mov	r2, r8
 8005526:	464b      	mov	r3, r9
 8005528:	4640      	mov	r0, r8
 800552a:	4649      	mov	r1, r9
 800552c:	f7fb fb1e 	bl	8000b6c <__aeabi_dcmpun>
 8005530:	b140      	cbz	r0, 8005544 <_printf_float+0xe0>
 8005532:	464b      	mov	r3, r9
 8005534:	2b00      	cmp	r3, #0
 8005536:	bfbc      	itt	lt
 8005538:	232d      	movlt	r3, #45	@ 0x2d
 800553a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800553e:	4a7e      	ldr	r2, [pc, #504]	@ (8005738 <_printf_float+0x2d4>)
 8005540:	4b7e      	ldr	r3, [pc, #504]	@ (800573c <_printf_float+0x2d8>)
 8005542:	e7d4      	b.n	80054ee <_printf_float+0x8a>
 8005544:	6863      	ldr	r3, [r4, #4]
 8005546:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800554a:	9206      	str	r2, [sp, #24]
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	d13b      	bne.n	80055c8 <_printf_float+0x164>
 8005550:	2306      	movs	r3, #6
 8005552:	6063      	str	r3, [r4, #4]
 8005554:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005558:	2300      	movs	r3, #0
 800555a:	6022      	str	r2, [r4, #0]
 800555c:	9303      	str	r3, [sp, #12]
 800555e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005560:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005564:	ab09      	add	r3, sp, #36	@ 0x24
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	6861      	ldr	r1, [r4, #4]
 800556a:	ec49 8b10 	vmov	d0, r8, r9
 800556e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005572:	4628      	mov	r0, r5
 8005574:	f7ff fed6 	bl	8005324 <__cvt>
 8005578:	9b06      	ldr	r3, [sp, #24]
 800557a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800557c:	2b47      	cmp	r3, #71	@ 0x47
 800557e:	4680      	mov	r8, r0
 8005580:	d129      	bne.n	80055d6 <_printf_float+0x172>
 8005582:	1cc8      	adds	r0, r1, #3
 8005584:	db02      	blt.n	800558c <_printf_float+0x128>
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	4299      	cmp	r1, r3
 800558a:	dd41      	ble.n	8005610 <_printf_float+0x1ac>
 800558c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005590:	fa5f fa8a 	uxtb.w	sl, sl
 8005594:	3901      	subs	r1, #1
 8005596:	4652      	mov	r2, sl
 8005598:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800559c:	9109      	str	r1, [sp, #36]	@ 0x24
 800559e:	f7ff ff26 	bl	80053ee <__exponent>
 80055a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80055a4:	1813      	adds	r3, r2, r0
 80055a6:	2a01      	cmp	r2, #1
 80055a8:	4681      	mov	r9, r0
 80055aa:	6123      	str	r3, [r4, #16]
 80055ac:	dc02      	bgt.n	80055b4 <_printf_float+0x150>
 80055ae:	6822      	ldr	r2, [r4, #0]
 80055b0:	07d2      	lsls	r2, r2, #31
 80055b2:	d501      	bpl.n	80055b8 <_printf_float+0x154>
 80055b4:	3301      	adds	r3, #1
 80055b6:	6123      	str	r3, [r4, #16]
 80055b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0a2      	beq.n	8005506 <_printf_float+0xa2>
 80055c0:	232d      	movs	r3, #45	@ 0x2d
 80055c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055c6:	e79e      	b.n	8005506 <_printf_float+0xa2>
 80055c8:	9a06      	ldr	r2, [sp, #24]
 80055ca:	2a47      	cmp	r2, #71	@ 0x47
 80055cc:	d1c2      	bne.n	8005554 <_printf_float+0xf0>
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1c0      	bne.n	8005554 <_printf_float+0xf0>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e7bd      	b.n	8005552 <_printf_float+0xee>
 80055d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055da:	d9db      	bls.n	8005594 <_printf_float+0x130>
 80055dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80055e0:	d118      	bne.n	8005614 <_printf_float+0x1b0>
 80055e2:	2900      	cmp	r1, #0
 80055e4:	6863      	ldr	r3, [r4, #4]
 80055e6:	dd0b      	ble.n	8005600 <_printf_float+0x19c>
 80055e8:	6121      	str	r1, [r4, #16]
 80055ea:	b913      	cbnz	r3, 80055f2 <_printf_float+0x18e>
 80055ec:	6822      	ldr	r2, [r4, #0]
 80055ee:	07d0      	lsls	r0, r2, #31
 80055f0:	d502      	bpl.n	80055f8 <_printf_float+0x194>
 80055f2:	3301      	adds	r3, #1
 80055f4:	440b      	add	r3, r1
 80055f6:	6123      	str	r3, [r4, #16]
 80055f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80055fa:	f04f 0900 	mov.w	r9, #0
 80055fe:	e7db      	b.n	80055b8 <_printf_float+0x154>
 8005600:	b913      	cbnz	r3, 8005608 <_printf_float+0x1a4>
 8005602:	6822      	ldr	r2, [r4, #0]
 8005604:	07d2      	lsls	r2, r2, #31
 8005606:	d501      	bpl.n	800560c <_printf_float+0x1a8>
 8005608:	3302      	adds	r3, #2
 800560a:	e7f4      	b.n	80055f6 <_printf_float+0x192>
 800560c:	2301      	movs	r3, #1
 800560e:	e7f2      	b.n	80055f6 <_printf_float+0x192>
 8005610:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005616:	4299      	cmp	r1, r3
 8005618:	db05      	blt.n	8005626 <_printf_float+0x1c2>
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	6121      	str	r1, [r4, #16]
 800561e:	07d8      	lsls	r0, r3, #31
 8005620:	d5ea      	bpl.n	80055f8 <_printf_float+0x194>
 8005622:	1c4b      	adds	r3, r1, #1
 8005624:	e7e7      	b.n	80055f6 <_printf_float+0x192>
 8005626:	2900      	cmp	r1, #0
 8005628:	bfd4      	ite	le
 800562a:	f1c1 0202 	rsble	r2, r1, #2
 800562e:	2201      	movgt	r2, #1
 8005630:	4413      	add	r3, r2
 8005632:	e7e0      	b.n	80055f6 <_printf_float+0x192>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	055a      	lsls	r2, r3, #21
 8005638:	d407      	bmi.n	800564a <_printf_float+0x1e6>
 800563a:	6923      	ldr	r3, [r4, #16]
 800563c:	4642      	mov	r2, r8
 800563e:	4631      	mov	r1, r6
 8005640:	4628      	mov	r0, r5
 8005642:	47b8      	blx	r7
 8005644:	3001      	adds	r0, #1
 8005646:	d12b      	bne.n	80056a0 <_printf_float+0x23c>
 8005648:	e767      	b.n	800551a <_printf_float+0xb6>
 800564a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800564e:	f240 80dd 	bls.w	800580c <_printf_float+0x3a8>
 8005652:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005656:	2200      	movs	r2, #0
 8005658:	2300      	movs	r3, #0
 800565a:	f7fb fa55 	bl	8000b08 <__aeabi_dcmpeq>
 800565e:	2800      	cmp	r0, #0
 8005660:	d033      	beq.n	80056ca <_printf_float+0x266>
 8005662:	4a37      	ldr	r2, [pc, #220]	@ (8005740 <_printf_float+0x2dc>)
 8005664:	2301      	movs	r3, #1
 8005666:	4631      	mov	r1, r6
 8005668:	4628      	mov	r0, r5
 800566a:	47b8      	blx	r7
 800566c:	3001      	adds	r0, #1
 800566e:	f43f af54 	beq.w	800551a <_printf_float+0xb6>
 8005672:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005676:	4543      	cmp	r3, r8
 8005678:	db02      	blt.n	8005680 <_printf_float+0x21c>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	07d8      	lsls	r0, r3, #31
 800567e:	d50f      	bpl.n	80056a0 <_printf_float+0x23c>
 8005680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005684:	4631      	mov	r1, r6
 8005686:	4628      	mov	r0, r5
 8005688:	47b8      	blx	r7
 800568a:	3001      	adds	r0, #1
 800568c:	f43f af45 	beq.w	800551a <_printf_float+0xb6>
 8005690:	f04f 0900 	mov.w	r9, #0
 8005694:	f108 38ff 	add.w	r8, r8, #4294967295
 8005698:	f104 0a1a 	add.w	sl, r4, #26
 800569c:	45c8      	cmp	r8, r9
 800569e:	dc09      	bgt.n	80056b4 <_printf_float+0x250>
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	079b      	lsls	r3, r3, #30
 80056a4:	f100 8103 	bmi.w	80058ae <_printf_float+0x44a>
 80056a8:	68e0      	ldr	r0, [r4, #12]
 80056aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056ac:	4298      	cmp	r0, r3
 80056ae:	bfb8      	it	lt
 80056b0:	4618      	movlt	r0, r3
 80056b2:	e734      	b.n	800551e <_printf_float+0xba>
 80056b4:	2301      	movs	r3, #1
 80056b6:	4652      	mov	r2, sl
 80056b8:	4631      	mov	r1, r6
 80056ba:	4628      	mov	r0, r5
 80056bc:	47b8      	blx	r7
 80056be:	3001      	adds	r0, #1
 80056c0:	f43f af2b 	beq.w	800551a <_printf_float+0xb6>
 80056c4:	f109 0901 	add.w	r9, r9, #1
 80056c8:	e7e8      	b.n	800569c <_printf_float+0x238>
 80056ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	dc39      	bgt.n	8005744 <_printf_float+0x2e0>
 80056d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005740 <_printf_float+0x2dc>)
 80056d2:	2301      	movs	r3, #1
 80056d4:	4631      	mov	r1, r6
 80056d6:	4628      	mov	r0, r5
 80056d8:	47b8      	blx	r7
 80056da:	3001      	adds	r0, #1
 80056dc:	f43f af1d 	beq.w	800551a <_printf_float+0xb6>
 80056e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80056e4:	ea59 0303 	orrs.w	r3, r9, r3
 80056e8:	d102      	bne.n	80056f0 <_printf_float+0x28c>
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	07d9      	lsls	r1, r3, #31
 80056ee:	d5d7      	bpl.n	80056a0 <_printf_float+0x23c>
 80056f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056f4:	4631      	mov	r1, r6
 80056f6:	4628      	mov	r0, r5
 80056f8:	47b8      	blx	r7
 80056fa:	3001      	adds	r0, #1
 80056fc:	f43f af0d 	beq.w	800551a <_printf_float+0xb6>
 8005700:	f04f 0a00 	mov.w	sl, #0
 8005704:	f104 0b1a 	add.w	fp, r4, #26
 8005708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800570a:	425b      	negs	r3, r3
 800570c:	4553      	cmp	r3, sl
 800570e:	dc01      	bgt.n	8005714 <_printf_float+0x2b0>
 8005710:	464b      	mov	r3, r9
 8005712:	e793      	b.n	800563c <_printf_float+0x1d8>
 8005714:	2301      	movs	r3, #1
 8005716:	465a      	mov	r2, fp
 8005718:	4631      	mov	r1, r6
 800571a:	4628      	mov	r0, r5
 800571c:	47b8      	blx	r7
 800571e:	3001      	adds	r0, #1
 8005720:	f43f aefb 	beq.w	800551a <_printf_float+0xb6>
 8005724:	f10a 0a01 	add.w	sl, sl, #1
 8005728:	e7ee      	b.n	8005708 <_printf_float+0x2a4>
 800572a:	bf00      	nop
 800572c:	7fefffff 	.word	0x7fefffff
 8005730:	0800a0b0 	.word	0x0800a0b0
 8005734:	0800a0b4 	.word	0x0800a0b4
 8005738:	0800a0b8 	.word	0x0800a0b8
 800573c:	0800a0bc 	.word	0x0800a0bc
 8005740:	0800a0c0 	.word	0x0800a0c0
 8005744:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005746:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800574a:	4553      	cmp	r3, sl
 800574c:	bfa8      	it	ge
 800574e:	4653      	movge	r3, sl
 8005750:	2b00      	cmp	r3, #0
 8005752:	4699      	mov	r9, r3
 8005754:	dc36      	bgt.n	80057c4 <_printf_float+0x360>
 8005756:	f04f 0b00 	mov.w	fp, #0
 800575a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800575e:	f104 021a 	add.w	r2, r4, #26
 8005762:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005764:	9306      	str	r3, [sp, #24]
 8005766:	eba3 0309 	sub.w	r3, r3, r9
 800576a:	455b      	cmp	r3, fp
 800576c:	dc31      	bgt.n	80057d2 <_printf_float+0x36e>
 800576e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005770:	459a      	cmp	sl, r3
 8005772:	dc3a      	bgt.n	80057ea <_printf_float+0x386>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	07da      	lsls	r2, r3, #31
 8005778:	d437      	bmi.n	80057ea <_printf_float+0x386>
 800577a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800577c:	ebaa 0903 	sub.w	r9, sl, r3
 8005780:	9b06      	ldr	r3, [sp, #24]
 8005782:	ebaa 0303 	sub.w	r3, sl, r3
 8005786:	4599      	cmp	r9, r3
 8005788:	bfa8      	it	ge
 800578a:	4699      	movge	r9, r3
 800578c:	f1b9 0f00 	cmp.w	r9, #0
 8005790:	dc33      	bgt.n	80057fa <_printf_float+0x396>
 8005792:	f04f 0800 	mov.w	r8, #0
 8005796:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800579a:	f104 0b1a 	add.w	fp, r4, #26
 800579e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057a0:	ebaa 0303 	sub.w	r3, sl, r3
 80057a4:	eba3 0309 	sub.w	r3, r3, r9
 80057a8:	4543      	cmp	r3, r8
 80057aa:	f77f af79 	ble.w	80056a0 <_printf_float+0x23c>
 80057ae:	2301      	movs	r3, #1
 80057b0:	465a      	mov	r2, fp
 80057b2:	4631      	mov	r1, r6
 80057b4:	4628      	mov	r0, r5
 80057b6:	47b8      	blx	r7
 80057b8:	3001      	adds	r0, #1
 80057ba:	f43f aeae 	beq.w	800551a <_printf_float+0xb6>
 80057be:	f108 0801 	add.w	r8, r8, #1
 80057c2:	e7ec      	b.n	800579e <_printf_float+0x33a>
 80057c4:	4642      	mov	r2, r8
 80057c6:	4631      	mov	r1, r6
 80057c8:	4628      	mov	r0, r5
 80057ca:	47b8      	blx	r7
 80057cc:	3001      	adds	r0, #1
 80057ce:	d1c2      	bne.n	8005756 <_printf_float+0x2f2>
 80057d0:	e6a3      	b.n	800551a <_printf_float+0xb6>
 80057d2:	2301      	movs	r3, #1
 80057d4:	4631      	mov	r1, r6
 80057d6:	4628      	mov	r0, r5
 80057d8:	9206      	str	r2, [sp, #24]
 80057da:	47b8      	blx	r7
 80057dc:	3001      	adds	r0, #1
 80057de:	f43f ae9c 	beq.w	800551a <_printf_float+0xb6>
 80057e2:	9a06      	ldr	r2, [sp, #24]
 80057e4:	f10b 0b01 	add.w	fp, fp, #1
 80057e8:	e7bb      	b.n	8005762 <_printf_float+0x2fe>
 80057ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ee:	4631      	mov	r1, r6
 80057f0:	4628      	mov	r0, r5
 80057f2:	47b8      	blx	r7
 80057f4:	3001      	adds	r0, #1
 80057f6:	d1c0      	bne.n	800577a <_printf_float+0x316>
 80057f8:	e68f      	b.n	800551a <_printf_float+0xb6>
 80057fa:	9a06      	ldr	r2, [sp, #24]
 80057fc:	464b      	mov	r3, r9
 80057fe:	4442      	add	r2, r8
 8005800:	4631      	mov	r1, r6
 8005802:	4628      	mov	r0, r5
 8005804:	47b8      	blx	r7
 8005806:	3001      	adds	r0, #1
 8005808:	d1c3      	bne.n	8005792 <_printf_float+0x32e>
 800580a:	e686      	b.n	800551a <_printf_float+0xb6>
 800580c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005810:	f1ba 0f01 	cmp.w	sl, #1
 8005814:	dc01      	bgt.n	800581a <_printf_float+0x3b6>
 8005816:	07db      	lsls	r3, r3, #31
 8005818:	d536      	bpl.n	8005888 <_printf_float+0x424>
 800581a:	2301      	movs	r3, #1
 800581c:	4642      	mov	r2, r8
 800581e:	4631      	mov	r1, r6
 8005820:	4628      	mov	r0, r5
 8005822:	47b8      	blx	r7
 8005824:	3001      	adds	r0, #1
 8005826:	f43f ae78 	beq.w	800551a <_printf_float+0xb6>
 800582a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800582e:	4631      	mov	r1, r6
 8005830:	4628      	mov	r0, r5
 8005832:	47b8      	blx	r7
 8005834:	3001      	adds	r0, #1
 8005836:	f43f ae70 	beq.w	800551a <_printf_float+0xb6>
 800583a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800583e:	2200      	movs	r2, #0
 8005840:	2300      	movs	r3, #0
 8005842:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005846:	f7fb f95f 	bl	8000b08 <__aeabi_dcmpeq>
 800584a:	b9c0      	cbnz	r0, 800587e <_printf_float+0x41a>
 800584c:	4653      	mov	r3, sl
 800584e:	f108 0201 	add.w	r2, r8, #1
 8005852:	4631      	mov	r1, r6
 8005854:	4628      	mov	r0, r5
 8005856:	47b8      	blx	r7
 8005858:	3001      	adds	r0, #1
 800585a:	d10c      	bne.n	8005876 <_printf_float+0x412>
 800585c:	e65d      	b.n	800551a <_printf_float+0xb6>
 800585e:	2301      	movs	r3, #1
 8005860:	465a      	mov	r2, fp
 8005862:	4631      	mov	r1, r6
 8005864:	4628      	mov	r0, r5
 8005866:	47b8      	blx	r7
 8005868:	3001      	adds	r0, #1
 800586a:	f43f ae56 	beq.w	800551a <_printf_float+0xb6>
 800586e:	f108 0801 	add.w	r8, r8, #1
 8005872:	45d0      	cmp	r8, sl
 8005874:	dbf3      	blt.n	800585e <_printf_float+0x3fa>
 8005876:	464b      	mov	r3, r9
 8005878:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800587c:	e6df      	b.n	800563e <_printf_float+0x1da>
 800587e:	f04f 0800 	mov.w	r8, #0
 8005882:	f104 0b1a 	add.w	fp, r4, #26
 8005886:	e7f4      	b.n	8005872 <_printf_float+0x40e>
 8005888:	2301      	movs	r3, #1
 800588a:	4642      	mov	r2, r8
 800588c:	e7e1      	b.n	8005852 <_printf_float+0x3ee>
 800588e:	2301      	movs	r3, #1
 8005890:	464a      	mov	r2, r9
 8005892:	4631      	mov	r1, r6
 8005894:	4628      	mov	r0, r5
 8005896:	47b8      	blx	r7
 8005898:	3001      	adds	r0, #1
 800589a:	f43f ae3e 	beq.w	800551a <_printf_float+0xb6>
 800589e:	f108 0801 	add.w	r8, r8, #1
 80058a2:	68e3      	ldr	r3, [r4, #12]
 80058a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80058a6:	1a5b      	subs	r3, r3, r1
 80058a8:	4543      	cmp	r3, r8
 80058aa:	dcf0      	bgt.n	800588e <_printf_float+0x42a>
 80058ac:	e6fc      	b.n	80056a8 <_printf_float+0x244>
 80058ae:	f04f 0800 	mov.w	r8, #0
 80058b2:	f104 0919 	add.w	r9, r4, #25
 80058b6:	e7f4      	b.n	80058a2 <_printf_float+0x43e>

080058b8 <_printf_common>:
 80058b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058bc:	4616      	mov	r6, r2
 80058be:	4698      	mov	r8, r3
 80058c0:	688a      	ldr	r2, [r1, #8]
 80058c2:	690b      	ldr	r3, [r1, #16]
 80058c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058c8:	4293      	cmp	r3, r2
 80058ca:	bfb8      	it	lt
 80058cc:	4613      	movlt	r3, r2
 80058ce:	6033      	str	r3, [r6, #0]
 80058d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058d4:	4607      	mov	r7, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	b10a      	cbz	r2, 80058de <_printf_common+0x26>
 80058da:	3301      	adds	r3, #1
 80058dc:	6033      	str	r3, [r6, #0]
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	0699      	lsls	r1, r3, #26
 80058e2:	bf42      	ittt	mi
 80058e4:	6833      	ldrmi	r3, [r6, #0]
 80058e6:	3302      	addmi	r3, #2
 80058e8:	6033      	strmi	r3, [r6, #0]
 80058ea:	6825      	ldr	r5, [r4, #0]
 80058ec:	f015 0506 	ands.w	r5, r5, #6
 80058f0:	d106      	bne.n	8005900 <_printf_common+0x48>
 80058f2:	f104 0a19 	add.w	sl, r4, #25
 80058f6:	68e3      	ldr	r3, [r4, #12]
 80058f8:	6832      	ldr	r2, [r6, #0]
 80058fa:	1a9b      	subs	r3, r3, r2
 80058fc:	42ab      	cmp	r3, r5
 80058fe:	dc26      	bgt.n	800594e <_printf_common+0x96>
 8005900:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005904:	6822      	ldr	r2, [r4, #0]
 8005906:	3b00      	subs	r3, #0
 8005908:	bf18      	it	ne
 800590a:	2301      	movne	r3, #1
 800590c:	0692      	lsls	r2, r2, #26
 800590e:	d42b      	bmi.n	8005968 <_printf_common+0xb0>
 8005910:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005914:	4641      	mov	r1, r8
 8005916:	4638      	mov	r0, r7
 8005918:	47c8      	blx	r9
 800591a:	3001      	adds	r0, #1
 800591c:	d01e      	beq.n	800595c <_printf_common+0xa4>
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	6922      	ldr	r2, [r4, #16]
 8005922:	f003 0306 	and.w	r3, r3, #6
 8005926:	2b04      	cmp	r3, #4
 8005928:	bf02      	ittt	eq
 800592a:	68e5      	ldreq	r5, [r4, #12]
 800592c:	6833      	ldreq	r3, [r6, #0]
 800592e:	1aed      	subeq	r5, r5, r3
 8005930:	68a3      	ldr	r3, [r4, #8]
 8005932:	bf0c      	ite	eq
 8005934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005938:	2500      	movne	r5, #0
 800593a:	4293      	cmp	r3, r2
 800593c:	bfc4      	itt	gt
 800593e:	1a9b      	subgt	r3, r3, r2
 8005940:	18ed      	addgt	r5, r5, r3
 8005942:	2600      	movs	r6, #0
 8005944:	341a      	adds	r4, #26
 8005946:	42b5      	cmp	r5, r6
 8005948:	d11a      	bne.n	8005980 <_printf_common+0xc8>
 800594a:	2000      	movs	r0, #0
 800594c:	e008      	b.n	8005960 <_printf_common+0xa8>
 800594e:	2301      	movs	r3, #1
 8005950:	4652      	mov	r2, sl
 8005952:	4641      	mov	r1, r8
 8005954:	4638      	mov	r0, r7
 8005956:	47c8      	blx	r9
 8005958:	3001      	adds	r0, #1
 800595a:	d103      	bne.n	8005964 <_printf_common+0xac>
 800595c:	f04f 30ff 	mov.w	r0, #4294967295
 8005960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005964:	3501      	adds	r5, #1
 8005966:	e7c6      	b.n	80058f6 <_printf_common+0x3e>
 8005968:	18e1      	adds	r1, r4, r3
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	2030      	movs	r0, #48	@ 0x30
 800596e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005972:	4422      	add	r2, r4
 8005974:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005978:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800597c:	3302      	adds	r3, #2
 800597e:	e7c7      	b.n	8005910 <_printf_common+0x58>
 8005980:	2301      	movs	r3, #1
 8005982:	4622      	mov	r2, r4
 8005984:	4641      	mov	r1, r8
 8005986:	4638      	mov	r0, r7
 8005988:	47c8      	blx	r9
 800598a:	3001      	adds	r0, #1
 800598c:	d0e6      	beq.n	800595c <_printf_common+0xa4>
 800598e:	3601      	adds	r6, #1
 8005990:	e7d9      	b.n	8005946 <_printf_common+0x8e>
	...

08005994 <_printf_i>:
 8005994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005998:	7e0f      	ldrb	r7, [r1, #24]
 800599a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800599c:	2f78      	cmp	r7, #120	@ 0x78
 800599e:	4691      	mov	r9, r2
 80059a0:	4680      	mov	r8, r0
 80059a2:	460c      	mov	r4, r1
 80059a4:	469a      	mov	sl, r3
 80059a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059aa:	d807      	bhi.n	80059bc <_printf_i+0x28>
 80059ac:	2f62      	cmp	r7, #98	@ 0x62
 80059ae:	d80a      	bhi.n	80059c6 <_printf_i+0x32>
 80059b0:	2f00      	cmp	r7, #0
 80059b2:	f000 80d2 	beq.w	8005b5a <_printf_i+0x1c6>
 80059b6:	2f58      	cmp	r7, #88	@ 0x58
 80059b8:	f000 80b9 	beq.w	8005b2e <_printf_i+0x19a>
 80059bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059c4:	e03a      	b.n	8005a3c <_printf_i+0xa8>
 80059c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059ca:	2b15      	cmp	r3, #21
 80059cc:	d8f6      	bhi.n	80059bc <_printf_i+0x28>
 80059ce:	a101      	add	r1, pc, #4	@ (adr r1, 80059d4 <_printf_i+0x40>)
 80059d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059d4:	08005a2d 	.word	0x08005a2d
 80059d8:	08005a41 	.word	0x08005a41
 80059dc:	080059bd 	.word	0x080059bd
 80059e0:	080059bd 	.word	0x080059bd
 80059e4:	080059bd 	.word	0x080059bd
 80059e8:	080059bd 	.word	0x080059bd
 80059ec:	08005a41 	.word	0x08005a41
 80059f0:	080059bd 	.word	0x080059bd
 80059f4:	080059bd 	.word	0x080059bd
 80059f8:	080059bd 	.word	0x080059bd
 80059fc:	080059bd 	.word	0x080059bd
 8005a00:	08005b41 	.word	0x08005b41
 8005a04:	08005a6b 	.word	0x08005a6b
 8005a08:	08005afb 	.word	0x08005afb
 8005a0c:	080059bd 	.word	0x080059bd
 8005a10:	080059bd 	.word	0x080059bd
 8005a14:	08005b63 	.word	0x08005b63
 8005a18:	080059bd 	.word	0x080059bd
 8005a1c:	08005a6b 	.word	0x08005a6b
 8005a20:	080059bd 	.word	0x080059bd
 8005a24:	080059bd 	.word	0x080059bd
 8005a28:	08005b03 	.word	0x08005b03
 8005a2c:	6833      	ldr	r3, [r6, #0]
 8005a2e:	1d1a      	adds	r2, r3, #4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6032      	str	r2, [r6, #0]
 8005a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e09d      	b.n	8005b7c <_printf_i+0x1e8>
 8005a40:	6833      	ldr	r3, [r6, #0]
 8005a42:	6820      	ldr	r0, [r4, #0]
 8005a44:	1d19      	adds	r1, r3, #4
 8005a46:	6031      	str	r1, [r6, #0]
 8005a48:	0606      	lsls	r6, r0, #24
 8005a4a:	d501      	bpl.n	8005a50 <_printf_i+0xbc>
 8005a4c:	681d      	ldr	r5, [r3, #0]
 8005a4e:	e003      	b.n	8005a58 <_printf_i+0xc4>
 8005a50:	0645      	lsls	r5, r0, #25
 8005a52:	d5fb      	bpl.n	8005a4c <_printf_i+0xb8>
 8005a54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a58:	2d00      	cmp	r5, #0
 8005a5a:	da03      	bge.n	8005a64 <_printf_i+0xd0>
 8005a5c:	232d      	movs	r3, #45	@ 0x2d
 8005a5e:	426d      	negs	r5, r5
 8005a60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a64:	4859      	ldr	r0, [pc, #356]	@ (8005bcc <_printf_i+0x238>)
 8005a66:	230a      	movs	r3, #10
 8005a68:	e011      	b.n	8005a8e <_printf_i+0xfa>
 8005a6a:	6821      	ldr	r1, [r4, #0]
 8005a6c:	6833      	ldr	r3, [r6, #0]
 8005a6e:	0608      	lsls	r0, r1, #24
 8005a70:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a74:	d402      	bmi.n	8005a7c <_printf_i+0xe8>
 8005a76:	0649      	lsls	r1, r1, #25
 8005a78:	bf48      	it	mi
 8005a7a:	b2ad      	uxthmi	r5, r5
 8005a7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a7e:	4853      	ldr	r0, [pc, #332]	@ (8005bcc <_printf_i+0x238>)
 8005a80:	6033      	str	r3, [r6, #0]
 8005a82:	bf14      	ite	ne
 8005a84:	230a      	movne	r3, #10
 8005a86:	2308      	moveq	r3, #8
 8005a88:	2100      	movs	r1, #0
 8005a8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a8e:	6866      	ldr	r6, [r4, #4]
 8005a90:	60a6      	str	r6, [r4, #8]
 8005a92:	2e00      	cmp	r6, #0
 8005a94:	bfa2      	ittt	ge
 8005a96:	6821      	ldrge	r1, [r4, #0]
 8005a98:	f021 0104 	bicge.w	r1, r1, #4
 8005a9c:	6021      	strge	r1, [r4, #0]
 8005a9e:	b90d      	cbnz	r5, 8005aa4 <_printf_i+0x110>
 8005aa0:	2e00      	cmp	r6, #0
 8005aa2:	d04b      	beq.n	8005b3c <_printf_i+0x1a8>
 8005aa4:	4616      	mov	r6, r2
 8005aa6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005aaa:	fb03 5711 	mls	r7, r3, r1, r5
 8005aae:	5dc7      	ldrb	r7, [r0, r7]
 8005ab0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ab4:	462f      	mov	r7, r5
 8005ab6:	42bb      	cmp	r3, r7
 8005ab8:	460d      	mov	r5, r1
 8005aba:	d9f4      	bls.n	8005aa6 <_printf_i+0x112>
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d10b      	bne.n	8005ad8 <_printf_i+0x144>
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	07df      	lsls	r7, r3, #31
 8005ac4:	d508      	bpl.n	8005ad8 <_printf_i+0x144>
 8005ac6:	6923      	ldr	r3, [r4, #16]
 8005ac8:	6861      	ldr	r1, [r4, #4]
 8005aca:	4299      	cmp	r1, r3
 8005acc:	bfde      	ittt	le
 8005ace:	2330      	movle	r3, #48	@ 0x30
 8005ad0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ad4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ad8:	1b92      	subs	r2, r2, r6
 8005ada:	6122      	str	r2, [r4, #16]
 8005adc:	f8cd a000 	str.w	sl, [sp]
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	aa03      	add	r2, sp, #12
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	f7ff fee6 	bl	80058b8 <_printf_common>
 8005aec:	3001      	adds	r0, #1
 8005aee:	d14a      	bne.n	8005b86 <_printf_i+0x1f2>
 8005af0:	f04f 30ff 	mov.w	r0, #4294967295
 8005af4:	b004      	add	sp, #16
 8005af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	f043 0320 	orr.w	r3, r3, #32
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	4833      	ldr	r0, [pc, #204]	@ (8005bd0 <_printf_i+0x23c>)
 8005b04:	2778      	movs	r7, #120	@ 0x78
 8005b06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	6831      	ldr	r1, [r6, #0]
 8005b0e:	061f      	lsls	r7, r3, #24
 8005b10:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b14:	d402      	bmi.n	8005b1c <_printf_i+0x188>
 8005b16:	065f      	lsls	r7, r3, #25
 8005b18:	bf48      	it	mi
 8005b1a:	b2ad      	uxthmi	r5, r5
 8005b1c:	6031      	str	r1, [r6, #0]
 8005b1e:	07d9      	lsls	r1, r3, #31
 8005b20:	bf44      	itt	mi
 8005b22:	f043 0320 	orrmi.w	r3, r3, #32
 8005b26:	6023      	strmi	r3, [r4, #0]
 8005b28:	b11d      	cbz	r5, 8005b32 <_printf_i+0x19e>
 8005b2a:	2310      	movs	r3, #16
 8005b2c:	e7ac      	b.n	8005a88 <_printf_i+0xf4>
 8005b2e:	4827      	ldr	r0, [pc, #156]	@ (8005bcc <_printf_i+0x238>)
 8005b30:	e7e9      	b.n	8005b06 <_printf_i+0x172>
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	f023 0320 	bic.w	r3, r3, #32
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	e7f6      	b.n	8005b2a <_printf_i+0x196>
 8005b3c:	4616      	mov	r6, r2
 8005b3e:	e7bd      	b.n	8005abc <_printf_i+0x128>
 8005b40:	6833      	ldr	r3, [r6, #0]
 8005b42:	6825      	ldr	r5, [r4, #0]
 8005b44:	6961      	ldr	r1, [r4, #20]
 8005b46:	1d18      	adds	r0, r3, #4
 8005b48:	6030      	str	r0, [r6, #0]
 8005b4a:	062e      	lsls	r6, r5, #24
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	d501      	bpl.n	8005b54 <_printf_i+0x1c0>
 8005b50:	6019      	str	r1, [r3, #0]
 8005b52:	e002      	b.n	8005b5a <_printf_i+0x1c6>
 8005b54:	0668      	lsls	r0, r5, #25
 8005b56:	d5fb      	bpl.n	8005b50 <_printf_i+0x1bc>
 8005b58:	8019      	strh	r1, [r3, #0]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	6123      	str	r3, [r4, #16]
 8005b5e:	4616      	mov	r6, r2
 8005b60:	e7bc      	b.n	8005adc <_printf_i+0x148>
 8005b62:	6833      	ldr	r3, [r6, #0]
 8005b64:	1d1a      	adds	r2, r3, #4
 8005b66:	6032      	str	r2, [r6, #0]
 8005b68:	681e      	ldr	r6, [r3, #0]
 8005b6a:	6862      	ldr	r2, [r4, #4]
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4630      	mov	r0, r6
 8005b70:	f7fa fb4e 	bl	8000210 <memchr>
 8005b74:	b108      	cbz	r0, 8005b7a <_printf_i+0x1e6>
 8005b76:	1b80      	subs	r0, r0, r6
 8005b78:	6060      	str	r0, [r4, #4]
 8005b7a:	6863      	ldr	r3, [r4, #4]
 8005b7c:	6123      	str	r3, [r4, #16]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b84:	e7aa      	b.n	8005adc <_printf_i+0x148>
 8005b86:	6923      	ldr	r3, [r4, #16]
 8005b88:	4632      	mov	r2, r6
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	4640      	mov	r0, r8
 8005b8e:	47d0      	blx	sl
 8005b90:	3001      	adds	r0, #1
 8005b92:	d0ad      	beq.n	8005af0 <_printf_i+0x15c>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	079b      	lsls	r3, r3, #30
 8005b98:	d413      	bmi.n	8005bc2 <_printf_i+0x22e>
 8005b9a:	68e0      	ldr	r0, [r4, #12]
 8005b9c:	9b03      	ldr	r3, [sp, #12]
 8005b9e:	4298      	cmp	r0, r3
 8005ba0:	bfb8      	it	lt
 8005ba2:	4618      	movlt	r0, r3
 8005ba4:	e7a6      	b.n	8005af4 <_printf_i+0x160>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	4632      	mov	r2, r6
 8005baa:	4649      	mov	r1, r9
 8005bac:	4640      	mov	r0, r8
 8005bae:	47d0      	blx	sl
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d09d      	beq.n	8005af0 <_printf_i+0x15c>
 8005bb4:	3501      	adds	r5, #1
 8005bb6:	68e3      	ldr	r3, [r4, #12]
 8005bb8:	9903      	ldr	r1, [sp, #12]
 8005bba:	1a5b      	subs	r3, r3, r1
 8005bbc:	42ab      	cmp	r3, r5
 8005bbe:	dcf2      	bgt.n	8005ba6 <_printf_i+0x212>
 8005bc0:	e7eb      	b.n	8005b9a <_printf_i+0x206>
 8005bc2:	2500      	movs	r5, #0
 8005bc4:	f104 0619 	add.w	r6, r4, #25
 8005bc8:	e7f5      	b.n	8005bb6 <_printf_i+0x222>
 8005bca:	bf00      	nop
 8005bcc:	0800a0c2 	.word	0x0800a0c2
 8005bd0:	0800a0d3 	.word	0x0800a0d3

08005bd4 <std>:
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	b510      	push	{r4, lr}
 8005bd8:	4604      	mov	r4, r0
 8005bda:	e9c0 3300 	strd	r3, r3, [r0]
 8005bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005be2:	6083      	str	r3, [r0, #8]
 8005be4:	8181      	strh	r1, [r0, #12]
 8005be6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005be8:	81c2      	strh	r2, [r0, #14]
 8005bea:	6183      	str	r3, [r0, #24]
 8005bec:	4619      	mov	r1, r3
 8005bee:	2208      	movs	r2, #8
 8005bf0:	305c      	adds	r0, #92	@ 0x5c
 8005bf2:	f000 f914 	bl	8005e1e <memset>
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c2c <std+0x58>)
 8005bf8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <std+0x5c>)
 8005bfc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005c34 <std+0x60>)
 8005c00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c02:	4b0d      	ldr	r3, [pc, #52]	@ (8005c38 <std+0x64>)
 8005c04:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c06:	4b0d      	ldr	r3, [pc, #52]	@ (8005c3c <std+0x68>)
 8005c08:	6224      	str	r4, [r4, #32]
 8005c0a:	429c      	cmp	r4, r3
 8005c0c:	d006      	beq.n	8005c1c <std+0x48>
 8005c0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c12:	4294      	cmp	r4, r2
 8005c14:	d002      	beq.n	8005c1c <std+0x48>
 8005c16:	33d0      	adds	r3, #208	@ 0xd0
 8005c18:	429c      	cmp	r4, r3
 8005c1a:	d105      	bne.n	8005c28 <std+0x54>
 8005c1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c24:	f000 b978 	b.w	8005f18 <__retarget_lock_init_recursive>
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	bf00      	nop
 8005c2c:	08005d99 	.word	0x08005d99
 8005c30:	08005dbb 	.word	0x08005dbb
 8005c34:	08005df3 	.word	0x08005df3
 8005c38:	08005e17 	.word	0x08005e17
 8005c3c:	20000744 	.word	0x20000744

08005c40 <stdio_exit_handler>:
 8005c40:	4a02      	ldr	r2, [pc, #8]	@ (8005c4c <stdio_exit_handler+0xc>)
 8005c42:	4903      	ldr	r1, [pc, #12]	@ (8005c50 <stdio_exit_handler+0x10>)
 8005c44:	4803      	ldr	r0, [pc, #12]	@ (8005c54 <stdio_exit_handler+0x14>)
 8005c46:	f000 b869 	b.w	8005d1c <_fwalk_sglue>
 8005c4a:	bf00      	nop
 8005c4c:	2000001c 	.word	0x2000001c
 8005c50:	08007875 	.word	0x08007875
 8005c54:	2000002c 	.word	0x2000002c

08005c58 <cleanup_stdio>:
 8005c58:	6841      	ldr	r1, [r0, #4]
 8005c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c8c <cleanup_stdio+0x34>)
 8005c5c:	4299      	cmp	r1, r3
 8005c5e:	b510      	push	{r4, lr}
 8005c60:	4604      	mov	r4, r0
 8005c62:	d001      	beq.n	8005c68 <cleanup_stdio+0x10>
 8005c64:	f001 fe06 	bl	8007874 <_fflush_r>
 8005c68:	68a1      	ldr	r1, [r4, #8]
 8005c6a:	4b09      	ldr	r3, [pc, #36]	@ (8005c90 <cleanup_stdio+0x38>)
 8005c6c:	4299      	cmp	r1, r3
 8005c6e:	d002      	beq.n	8005c76 <cleanup_stdio+0x1e>
 8005c70:	4620      	mov	r0, r4
 8005c72:	f001 fdff 	bl	8007874 <_fflush_r>
 8005c76:	68e1      	ldr	r1, [r4, #12]
 8005c78:	4b06      	ldr	r3, [pc, #24]	@ (8005c94 <cleanup_stdio+0x3c>)
 8005c7a:	4299      	cmp	r1, r3
 8005c7c:	d004      	beq.n	8005c88 <cleanup_stdio+0x30>
 8005c7e:	4620      	mov	r0, r4
 8005c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c84:	f001 bdf6 	b.w	8007874 <_fflush_r>
 8005c88:	bd10      	pop	{r4, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000744 	.word	0x20000744
 8005c90:	200007ac 	.word	0x200007ac
 8005c94:	20000814 	.word	0x20000814

08005c98 <global_stdio_init.part.0>:
 8005c98:	b510      	push	{r4, lr}
 8005c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc8 <global_stdio_init.part.0+0x30>)
 8005c9c:	4c0b      	ldr	r4, [pc, #44]	@ (8005ccc <global_stdio_init.part.0+0x34>)
 8005c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8005cd0 <global_stdio_init.part.0+0x38>)
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2104      	movs	r1, #4
 8005ca8:	f7ff ff94 	bl	8005bd4 <std>
 8005cac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	2109      	movs	r1, #9
 8005cb4:	f7ff ff8e 	bl	8005bd4 <std>
 8005cb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc2:	2112      	movs	r1, #18
 8005cc4:	f7ff bf86 	b.w	8005bd4 <std>
 8005cc8:	2000087c 	.word	0x2000087c
 8005ccc:	20000744 	.word	0x20000744
 8005cd0:	08005c41 	.word	0x08005c41

08005cd4 <__sfp_lock_acquire>:
 8005cd4:	4801      	ldr	r0, [pc, #4]	@ (8005cdc <__sfp_lock_acquire+0x8>)
 8005cd6:	f000 b920 	b.w	8005f1a <__retarget_lock_acquire_recursive>
 8005cda:	bf00      	nop
 8005cdc:	20000885 	.word	0x20000885

08005ce0 <__sfp_lock_release>:
 8005ce0:	4801      	ldr	r0, [pc, #4]	@ (8005ce8 <__sfp_lock_release+0x8>)
 8005ce2:	f000 b91b 	b.w	8005f1c <__retarget_lock_release_recursive>
 8005ce6:	bf00      	nop
 8005ce8:	20000885 	.word	0x20000885

08005cec <__sinit>:
 8005cec:	b510      	push	{r4, lr}
 8005cee:	4604      	mov	r4, r0
 8005cf0:	f7ff fff0 	bl	8005cd4 <__sfp_lock_acquire>
 8005cf4:	6a23      	ldr	r3, [r4, #32]
 8005cf6:	b11b      	cbz	r3, 8005d00 <__sinit+0x14>
 8005cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cfc:	f7ff bff0 	b.w	8005ce0 <__sfp_lock_release>
 8005d00:	4b04      	ldr	r3, [pc, #16]	@ (8005d14 <__sinit+0x28>)
 8005d02:	6223      	str	r3, [r4, #32]
 8005d04:	4b04      	ldr	r3, [pc, #16]	@ (8005d18 <__sinit+0x2c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f5      	bne.n	8005cf8 <__sinit+0xc>
 8005d0c:	f7ff ffc4 	bl	8005c98 <global_stdio_init.part.0>
 8005d10:	e7f2      	b.n	8005cf8 <__sinit+0xc>
 8005d12:	bf00      	nop
 8005d14:	08005c59 	.word	0x08005c59
 8005d18:	2000087c 	.word	0x2000087c

08005d1c <_fwalk_sglue>:
 8005d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d20:	4607      	mov	r7, r0
 8005d22:	4688      	mov	r8, r1
 8005d24:	4614      	mov	r4, r2
 8005d26:	2600      	movs	r6, #0
 8005d28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d2c:	f1b9 0901 	subs.w	r9, r9, #1
 8005d30:	d505      	bpl.n	8005d3e <_fwalk_sglue+0x22>
 8005d32:	6824      	ldr	r4, [r4, #0]
 8005d34:	2c00      	cmp	r4, #0
 8005d36:	d1f7      	bne.n	8005d28 <_fwalk_sglue+0xc>
 8005d38:	4630      	mov	r0, r6
 8005d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d3e:	89ab      	ldrh	r3, [r5, #12]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d907      	bls.n	8005d54 <_fwalk_sglue+0x38>
 8005d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	d003      	beq.n	8005d54 <_fwalk_sglue+0x38>
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	4638      	mov	r0, r7
 8005d50:	47c0      	blx	r8
 8005d52:	4306      	orrs	r6, r0
 8005d54:	3568      	adds	r5, #104	@ 0x68
 8005d56:	e7e9      	b.n	8005d2c <_fwalk_sglue+0x10>

08005d58 <siprintf>:
 8005d58:	b40e      	push	{r1, r2, r3}
 8005d5a:	b500      	push	{lr}
 8005d5c:	b09c      	sub	sp, #112	@ 0x70
 8005d5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d60:	9002      	str	r0, [sp, #8]
 8005d62:	9006      	str	r0, [sp, #24]
 8005d64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d68:	4809      	ldr	r0, [pc, #36]	@ (8005d90 <siprintf+0x38>)
 8005d6a:	9107      	str	r1, [sp, #28]
 8005d6c:	9104      	str	r1, [sp, #16]
 8005d6e:	4909      	ldr	r1, [pc, #36]	@ (8005d94 <siprintf+0x3c>)
 8005d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d74:	9105      	str	r1, [sp, #20]
 8005d76:	6800      	ldr	r0, [r0, #0]
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	a902      	add	r1, sp, #8
 8005d7c:	f001 fbfa 	bl	8007574 <_svfiprintf_r>
 8005d80:	9b02      	ldr	r3, [sp, #8]
 8005d82:	2200      	movs	r2, #0
 8005d84:	701a      	strb	r2, [r3, #0]
 8005d86:	b01c      	add	sp, #112	@ 0x70
 8005d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d8c:	b003      	add	sp, #12
 8005d8e:	4770      	bx	lr
 8005d90:	20000028 	.word	0x20000028
 8005d94:	ffff0208 	.word	0xffff0208

08005d98 <__sread>:
 8005d98:	b510      	push	{r4, lr}
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da0:	f000 f86c 	bl	8005e7c <_read_r>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	bfab      	itete	ge
 8005da8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005daa:	89a3      	ldrhlt	r3, [r4, #12]
 8005dac:	181b      	addge	r3, r3, r0
 8005dae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005db2:	bfac      	ite	ge
 8005db4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005db6:	81a3      	strhlt	r3, [r4, #12]
 8005db8:	bd10      	pop	{r4, pc}

08005dba <__swrite>:
 8005dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbe:	461f      	mov	r7, r3
 8005dc0:	898b      	ldrh	r3, [r1, #12]
 8005dc2:	05db      	lsls	r3, r3, #23
 8005dc4:	4605      	mov	r5, r0
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	4616      	mov	r6, r2
 8005dca:	d505      	bpl.n	8005dd8 <__swrite+0x1e>
 8005dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f000 f840 	bl	8005e58 <_lseek_r>
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005de2:	81a3      	strh	r3, [r4, #12]
 8005de4:	4632      	mov	r2, r6
 8005de6:	463b      	mov	r3, r7
 8005de8:	4628      	mov	r0, r5
 8005dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dee:	f000 b857 	b.w	8005ea0 <_write_r>

08005df2 <__sseek>:
 8005df2:	b510      	push	{r4, lr}
 8005df4:	460c      	mov	r4, r1
 8005df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dfa:	f000 f82d 	bl	8005e58 <_lseek_r>
 8005dfe:	1c43      	adds	r3, r0, #1
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	bf15      	itete	ne
 8005e04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e0e:	81a3      	strheq	r3, [r4, #12]
 8005e10:	bf18      	it	ne
 8005e12:	81a3      	strhne	r3, [r4, #12]
 8005e14:	bd10      	pop	{r4, pc}

08005e16 <__sclose>:
 8005e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e1a:	f000 b80d 	b.w	8005e38 <_close_r>

08005e1e <memset>:
 8005e1e:	4402      	add	r2, r0
 8005e20:	4603      	mov	r3, r0
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d100      	bne.n	8005e28 <memset+0xa>
 8005e26:	4770      	bx	lr
 8005e28:	f803 1b01 	strb.w	r1, [r3], #1
 8005e2c:	e7f9      	b.n	8005e22 <memset+0x4>
	...

08005e30 <_localeconv_r>:
 8005e30:	4800      	ldr	r0, [pc, #0]	@ (8005e34 <_localeconv_r+0x4>)
 8005e32:	4770      	bx	lr
 8005e34:	20000168 	.word	0x20000168

08005e38 <_close_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	4d06      	ldr	r5, [pc, #24]	@ (8005e54 <_close_r+0x1c>)
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	4604      	mov	r4, r0
 8005e40:	4608      	mov	r0, r1
 8005e42:	602b      	str	r3, [r5, #0]
 8005e44:	f7fc f862 	bl	8001f0c <_close>
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	d102      	bne.n	8005e52 <_close_r+0x1a>
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	b103      	cbz	r3, 8005e52 <_close_r+0x1a>
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	20000880 	.word	0x20000880

08005e58 <_lseek_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	4d07      	ldr	r5, [pc, #28]	@ (8005e78 <_lseek_r+0x20>)
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	4608      	mov	r0, r1
 8005e60:	4611      	mov	r1, r2
 8005e62:	2200      	movs	r2, #0
 8005e64:	602a      	str	r2, [r5, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	f7fc f877 	bl	8001f5a <_lseek>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d102      	bne.n	8005e76 <_lseek_r+0x1e>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	b103      	cbz	r3, 8005e76 <_lseek_r+0x1e>
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	bd38      	pop	{r3, r4, r5, pc}
 8005e78:	20000880 	.word	0x20000880

08005e7c <_read_r>:
 8005e7c:	b538      	push	{r3, r4, r5, lr}
 8005e7e:	4d07      	ldr	r5, [pc, #28]	@ (8005e9c <_read_r+0x20>)
 8005e80:	4604      	mov	r4, r0
 8005e82:	4608      	mov	r0, r1
 8005e84:	4611      	mov	r1, r2
 8005e86:	2200      	movs	r2, #0
 8005e88:	602a      	str	r2, [r5, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f7fc f805 	bl	8001e9a <_read>
 8005e90:	1c43      	adds	r3, r0, #1
 8005e92:	d102      	bne.n	8005e9a <_read_r+0x1e>
 8005e94:	682b      	ldr	r3, [r5, #0]
 8005e96:	b103      	cbz	r3, 8005e9a <_read_r+0x1e>
 8005e98:	6023      	str	r3, [r4, #0]
 8005e9a:	bd38      	pop	{r3, r4, r5, pc}
 8005e9c:	20000880 	.word	0x20000880

08005ea0 <_write_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4d07      	ldr	r5, [pc, #28]	@ (8005ec0 <_write_r+0x20>)
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	4608      	mov	r0, r1
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	2200      	movs	r2, #0
 8005eac:	602a      	str	r2, [r5, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f7fc f810 	bl	8001ed4 <_write>
 8005eb4:	1c43      	adds	r3, r0, #1
 8005eb6:	d102      	bne.n	8005ebe <_write_r+0x1e>
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	b103      	cbz	r3, 8005ebe <_write_r+0x1e>
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	bd38      	pop	{r3, r4, r5, pc}
 8005ec0:	20000880 	.word	0x20000880

08005ec4 <__errno>:
 8005ec4:	4b01      	ldr	r3, [pc, #4]	@ (8005ecc <__errno+0x8>)
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	20000028 	.word	0x20000028

08005ed0 <__libc_init_array>:
 8005ed0:	b570      	push	{r4, r5, r6, lr}
 8005ed2:	4d0d      	ldr	r5, [pc, #52]	@ (8005f08 <__libc_init_array+0x38>)
 8005ed4:	4c0d      	ldr	r4, [pc, #52]	@ (8005f0c <__libc_init_array+0x3c>)
 8005ed6:	1b64      	subs	r4, r4, r5
 8005ed8:	10a4      	asrs	r4, r4, #2
 8005eda:	2600      	movs	r6, #0
 8005edc:	42a6      	cmp	r6, r4
 8005ede:	d109      	bne.n	8005ef4 <__libc_init_array+0x24>
 8005ee0:	4d0b      	ldr	r5, [pc, #44]	@ (8005f10 <__libc_init_array+0x40>)
 8005ee2:	4c0c      	ldr	r4, [pc, #48]	@ (8005f14 <__libc_init_array+0x44>)
 8005ee4:	f002 f864 	bl	8007fb0 <_init>
 8005ee8:	1b64      	subs	r4, r4, r5
 8005eea:	10a4      	asrs	r4, r4, #2
 8005eec:	2600      	movs	r6, #0
 8005eee:	42a6      	cmp	r6, r4
 8005ef0:	d105      	bne.n	8005efe <__libc_init_array+0x2e>
 8005ef2:	bd70      	pop	{r4, r5, r6, pc}
 8005ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef8:	4798      	blx	r3
 8005efa:	3601      	adds	r6, #1
 8005efc:	e7ee      	b.n	8005edc <__libc_init_array+0xc>
 8005efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f02:	4798      	blx	r3
 8005f04:	3601      	adds	r6, #1
 8005f06:	e7f2      	b.n	8005eee <__libc_init_array+0x1e>
 8005f08:	0800a428 	.word	0x0800a428
 8005f0c:	0800a428 	.word	0x0800a428
 8005f10:	0800a428 	.word	0x0800a428
 8005f14:	0800a42c 	.word	0x0800a42c

08005f18 <__retarget_lock_init_recursive>:
 8005f18:	4770      	bx	lr

08005f1a <__retarget_lock_acquire_recursive>:
 8005f1a:	4770      	bx	lr

08005f1c <__retarget_lock_release_recursive>:
 8005f1c:	4770      	bx	lr

08005f1e <quorem>:
 8005f1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f22:	6903      	ldr	r3, [r0, #16]
 8005f24:	690c      	ldr	r4, [r1, #16]
 8005f26:	42a3      	cmp	r3, r4
 8005f28:	4607      	mov	r7, r0
 8005f2a:	db7e      	blt.n	800602a <quorem+0x10c>
 8005f2c:	3c01      	subs	r4, #1
 8005f2e:	f101 0814 	add.w	r8, r1, #20
 8005f32:	00a3      	lsls	r3, r4, #2
 8005f34:	f100 0514 	add.w	r5, r0, #20
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f50:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f54:	d32e      	bcc.n	8005fb4 <quorem+0x96>
 8005f56:	f04f 0a00 	mov.w	sl, #0
 8005f5a:	46c4      	mov	ip, r8
 8005f5c:	46ae      	mov	lr, r5
 8005f5e:	46d3      	mov	fp, sl
 8005f60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f64:	b298      	uxth	r0, r3
 8005f66:	fb06 a000 	mla	r0, r6, r0, sl
 8005f6a:	0c02      	lsrs	r2, r0, #16
 8005f6c:	0c1b      	lsrs	r3, r3, #16
 8005f6e:	fb06 2303 	mla	r3, r6, r3, r2
 8005f72:	f8de 2000 	ldr.w	r2, [lr]
 8005f76:	b280      	uxth	r0, r0
 8005f78:	b292      	uxth	r2, r2
 8005f7a:	1a12      	subs	r2, r2, r0
 8005f7c:	445a      	add	r2, fp
 8005f7e:	f8de 0000 	ldr.w	r0, [lr]
 8005f82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005f8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005f90:	b292      	uxth	r2, r2
 8005f92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005f96:	45e1      	cmp	r9, ip
 8005f98:	f84e 2b04 	str.w	r2, [lr], #4
 8005f9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005fa0:	d2de      	bcs.n	8005f60 <quorem+0x42>
 8005fa2:	9b00      	ldr	r3, [sp, #0]
 8005fa4:	58eb      	ldr	r3, [r5, r3]
 8005fa6:	b92b      	cbnz	r3, 8005fb4 <quorem+0x96>
 8005fa8:	9b01      	ldr	r3, [sp, #4]
 8005faa:	3b04      	subs	r3, #4
 8005fac:	429d      	cmp	r5, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	d32f      	bcc.n	8006012 <quorem+0xf4>
 8005fb2:	613c      	str	r4, [r7, #16]
 8005fb4:	4638      	mov	r0, r7
 8005fb6:	f001 f979 	bl	80072ac <__mcmp>
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	db25      	blt.n	800600a <quorem+0xec>
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8005fc6:	f8d1 c000 	ldr.w	ip, [r1]
 8005fca:	fa1f fe82 	uxth.w	lr, r2
 8005fce:	fa1f f38c 	uxth.w	r3, ip
 8005fd2:	eba3 030e 	sub.w	r3, r3, lr
 8005fd6:	4403      	add	r3, r0
 8005fd8:	0c12      	lsrs	r2, r2, #16
 8005fda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005fde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fe8:	45c1      	cmp	r9, r8
 8005fea:	f841 3b04 	str.w	r3, [r1], #4
 8005fee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ff2:	d2e6      	bcs.n	8005fc2 <quorem+0xa4>
 8005ff4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ff8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ffc:	b922      	cbnz	r2, 8006008 <quorem+0xea>
 8005ffe:	3b04      	subs	r3, #4
 8006000:	429d      	cmp	r5, r3
 8006002:	461a      	mov	r2, r3
 8006004:	d30b      	bcc.n	800601e <quorem+0x100>
 8006006:	613c      	str	r4, [r7, #16]
 8006008:	3601      	adds	r6, #1
 800600a:	4630      	mov	r0, r6
 800600c:	b003      	add	sp, #12
 800600e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	3b04      	subs	r3, #4
 8006016:	2a00      	cmp	r2, #0
 8006018:	d1cb      	bne.n	8005fb2 <quorem+0x94>
 800601a:	3c01      	subs	r4, #1
 800601c:	e7c6      	b.n	8005fac <quorem+0x8e>
 800601e:	6812      	ldr	r2, [r2, #0]
 8006020:	3b04      	subs	r3, #4
 8006022:	2a00      	cmp	r2, #0
 8006024:	d1ef      	bne.n	8006006 <quorem+0xe8>
 8006026:	3c01      	subs	r4, #1
 8006028:	e7ea      	b.n	8006000 <quorem+0xe2>
 800602a:	2000      	movs	r0, #0
 800602c:	e7ee      	b.n	800600c <quorem+0xee>
	...

08006030 <_dtoa_r>:
 8006030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	69c7      	ldr	r7, [r0, #28]
 8006036:	b099      	sub	sp, #100	@ 0x64
 8006038:	ed8d 0b02 	vstr	d0, [sp, #8]
 800603c:	ec55 4b10 	vmov	r4, r5, d0
 8006040:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006042:	9109      	str	r1, [sp, #36]	@ 0x24
 8006044:	4683      	mov	fp, r0
 8006046:	920e      	str	r2, [sp, #56]	@ 0x38
 8006048:	9313      	str	r3, [sp, #76]	@ 0x4c
 800604a:	b97f      	cbnz	r7, 800606c <_dtoa_r+0x3c>
 800604c:	2010      	movs	r0, #16
 800604e:	f000 fdfd 	bl	8006c4c <malloc>
 8006052:	4602      	mov	r2, r0
 8006054:	f8cb 001c 	str.w	r0, [fp, #28]
 8006058:	b920      	cbnz	r0, 8006064 <_dtoa_r+0x34>
 800605a:	4ba7      	ldr	r3, [pc, #668]	@ (80062f8 <_dtoa_r+0x2c8>)
 800605c:	21ef      	movs	r1, #239	@ 0xef
 800605e:	48a7      	ldr	r0, [pc, #668]	@ (80062fc <_dtoa_r+0x2cc>)
 8006060:	f001 fc68 	bl	8007934 <__assert_func>
 8006064:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006068:	6007      	str	r7, [r0, #0]
 800606a:	60c7      	str	r7, [r0, #12]
 800606c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006070:	6819      	ldr	r1, [r3, #0]
 8006072:	b159      	cbz	r1, 800608c <_dtoa_r+0x5c>
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	604a      	str	r2, [r1, #4]
 8006078:	2301      	movs	r3, #1
 800607a:	4093      	lsls	r3, r2
 800607c:	608b      	str	r3, [r1, #8]
 800607e:	4658      	mov	r0, fp
 8006080:	f000 feda 	bl	8006e38 <_Bfree>
 8006084:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	1e2b      	subs	r3, r5, #0
 800608e:	bfb9      	ittee	lt
 8006090:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006094:	9303      	strlt	r3, [sp, #12]
 8006096:	2300      	movge	r3, #0
 8006098:	6033      	strge	r3, [r6, #0]
 800609a:	9f03      	ldr	r7, [sp, #12]
 800609c:	4b98      	ldr	r3, [pc, #608]	@ (8006300 <_dtoa_r+0x2d0>)
 800609e:	bfbc      	itt	lt
 80060a0:	2201      	movlt	r2, #1
 80060a2:	6032      	strlt	r2, [r6, #0]
 80060a4:	43bb      	bics	r3, r7
 80060a6:	d112      	bne.n	80060ce <_dtoa_r+0x9e>
 80060a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80060aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80060b4:	4323      	orrs	r3, r4
 80060b6:	f000 854d 	beq.w	8006b54 <_dtoa_r+0xb24>
 80060ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80060bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006314 <_dtoa_r+0x2e4>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 854f 	beq.w	8006b64 <_dtoa_r+0xb34>
 80060c6:	f10a 0303 	add.w	r3, sl, #3
 80060ca:	f000 bd49 	b.w	8006b60 <_dtoa_r+0xb30>
 80060ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060d2:	2200      	movs	r2, #0
 80060d4:	ec51 0b17 	vmov	r0, r1, d7
 80060d8:	2300      	movs	r3, #0
 80060da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80060de:	f7fa fd13 	bl	8000b08 <__aeabi_dcmpeq>
 80060e2:	4680      	mov	r8, r0
 80060e4:	b158      	cbz	r0, 80060fe <_dtoa_r+0xce>
 80060e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80060e8:	2301      	movs	r3, #1
 80060ea:	6013      	str	r3, [r2, #0]
 80060ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80060ee:	b113      	cbz	r3, 80060f6 <_dtoa_r+0xc6>
 80060f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80060f2:	4b84      	ldr	r3, [pc, #528]	@ (8006304 <_dtoa_r+0x2d4>)
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006318 <_dtoa_r+0x2e8>
 80060fa:	f000 bd33 	b.w	8006b64 <_dtoa_r+0xb34>
 80060fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006102:	aa16      	add	r2, sp, #88	@ 0x58
 8006104:	a917      	add	r1, sp, #92	@ 0x5c
 8006106:	4658      	mov	r0, fp
 8006108:	f001 f980 	bl	800740c <__d2b>
 800610c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006110:	4681      	mov	r9, r0
 8006112:	2e00      	cmp	r6, #0
 8006114:	d077      	beq.n	8006206 <_dtoa_r+0x1d6>
 8006116:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006118:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800611c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006124:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006128:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800612c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006130:	4619      	mov	r1, r3
 8006132:	2200      	movs	r2, #0
 8006134:	4b74      	ldr	r3, [pc, #464]	@ (8006308 <_dtoa_r+0x2d8>)
 8006136:	f7fa f8c7 	bl	80002c8 <__aeabi_dsub>
 800613a:	a369      	add	r3, pc, #420	@ (adr r3, 80062e0 <_dtoa_r+0x2b0>)
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	f7fa fa7a 	bl	8000638 <__aeabi_dmul>
 8006144:	a368      	add	r3, pc, #416	@ (adr r3, 80062e8 <_dtoa_r+0x2b8>)
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	f7fa f8bf 	bl	80002cc <__adddf3>
 800614e:	4604      	mov	r4, r0
 8006150:	4630      	mov	r0, r6
 8006152:	460d      	mov	r5, r1
 8006154:	f7fa fa06 	bl	8000564 <__aeabi_i2d>
 8006158:	a365      	add	r3, pc, #404	@ (adr r3, 80062f0 <_dtoa_r+0x2c0>)
 800615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615e:	f7fa fa6b 	bl	8000638 <__aeabi_dmul>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4620      	mov	r0, r4
 8006168:	4629      	mov	r1, r5
 800616a:	f7fa f8af 	bl	80002cc <__adddf3>
 800616e:	4604      	mov	r4, r0
 8006170:	460d      	mov	r5, r1
 8006172:	f7fa fd11 	bl	8000b98 <__aeabi_d2iz>
 8006176:	2200      	movs	r2, #0
 8006178:	4607      	mov	r7, r0
 800617a:	2300      	movs	r3, #0
 800617c:	4620      	mov	r0, r4
 800617e:	4629      	mov	r1, r5
 8006180:	f7fa fccc 	bl	8000b1c <__aeabi_dcmplt>
 8006184:	b140      	cbz	r0, 8006198 <_dtoa_r+0x168>
 8006186:	4638      	mov	r0, r7
 8006188:	f7fa f9ec 	bl	8000564 <__aeabi_i2d>
 800618c:	4622      	mov	r2, r4
 800618e:	462b      	mov	r3, r5
 8006190:	f7fa fcba 	bl	8000b08 <__aeabi_dcmpeq>
 8006194:	b900      	cbnz	r0, 8006198 <_dtoa_r+0x168>
 8006196:	3f01      	subs	r7, #1
 8006198:	2f16      	cmp	r7, #22
 800619a:	d851      	bhi.n	8006240 <_dtoa_r+0x210>
 800619c:	4b5b      	ldr	r3, [pc, #364]	@ (800630c <_dtoa_r+0x2dc>)
 800619e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061aa:	f7fa fcb7 	bl	8000b1c <__aeabi_dcmplt>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d048      	beq.n	8006244 <_dtoa_r+0x214>
 80061b2:	3f01      	subs	r7, #1
 80061b4:	2300      	movs	r3, #0
 80061b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80061b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80061ba:	1b9b      	subs	r3, r3, r6
 80061bc:	1e5a      	subs	r2, r3, #1
 80061be:	bf44      	itt	mi
 80061c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80061c4:	2300      	movmi	r3, #0
 80061c6:	9208      	str	r2, [sp, #32]
 80061c8:	bf54      	ite	pl
 80061ca:	f04f 0800 	movpl.w	r8, #0
 80061ce:	9308      	strmi	r3, [sp, #32]
 80061d0:	2f00      	cmp	r7, #0
 80061d2:	db39      	blt.n	8006248 <_dtoa_r+0x218>
 80061d4:	9b08      	ldr	r3, [sp, #32]
 80061d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80061d8:	443b      	add	r3, r7
 80061da:	9308      	str	r3, [sp, #32]
 80061dc:	2300      	movs	r3, #0
 80061de:	930a      	str	r3, [sp, #40]	@ 0x28
 80061e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061e2:	2b09      	cmp	r3, #9
 80061e4:	d864      	bhi.n	80062b0 <_dtoa_r+0x280>
 80061e6:	2b05      	cmp	r3, #5
 80061e8:	bfc4      	itt	gt
 80061ea:	3b04      	subgt	r3, #4
 80061ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80061ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061f0:	f1a3 0302 	sub.w	r3, r3, #2
 80061f4:	bfcc      	ite	gt
 80061f6:	2400      	movgt	r4, #0
 80061f8:	2401      	movle	r4, #1
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d863      	bhi.n	80062c6 <_dtoa_r+0x296>
 80061fe:	e8df f003 	tbb	[pc, r3]
 8006202:	372a      	.short	0x372a
 8006204:	5535      	.short	0x5535
 8006206:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800620a:	441e      	add	r6, r3
 800620c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006210:	2b20      	cmp	r3, #32
 8006212:	bfc1      	itttt	gt
 8006214:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006218:	409f      	lslgt	r7, r3
 800621a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800621e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006222:	bfd6      	itet	le
 8006224:	f1c3 0320 	rsble	r3, r3, #32
 8006228:	ea47 0003 	orrgt.w	r0, r7, r3
 800622c:	fa04 f003 	lslle.w	r0, r4, r3
 8006230:	f7fa f988 	bl	8000544 <__aeabi_ui2d>
 8006234:	2201      	movs	r2, #1
 8006236:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800623a:	3e01      	subs	r6, #1
 800623c:	9214      	str	r2, [sp, #80]	@ 0x50
 800623e:	e777      	b.n	8006130 <_dtoa_r+0x100>
 8006240:	2301      	movs	r3, #1
 8006242:	e7b8      	b.n	80061b6 <_dtoa_r+0x186>
 8006244:	9012      	str	r0, [sp, #72]	@ 0x48
 8006246:	e7b7      	b.n	80061b8 <_dtoa_r+0x188>
 8006248:	427b      	negs	r3, r7
 800624a:	930a      	str	r3, [sp, #40]	@ 0x28
 800624c:	2300      	movs	r3, #0
 800624e:	eba8 0807 	sub.w	r8, r8, r7
 8006252:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006254:	e7c4      	b.n	80061e0 <_dtoa_r+0x1b0>
 8006256:	2300      	movs	r3, #0
 8006258:	930b      	str	r3, [sp, #44]	@ 0x2c
 800625a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800625c:	2b00      	cmp	r3, #0
 800625e:	dc35      	bgt.n	80062cc <_dtoa_r+0x29c>
 8006260:	2301      	movs	r3, #1
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	9307      	str	r3, [sp, #28]
 8006266:	461a      	mov	r2, r3
 8006268:	920e      	str	r2, [sp, #56]	@ 0x38
 800626a:	e00b      	b.n	8006284 <_dtoa_r+0x254>
 800626c:	2301      	movs	r3, #1
 800626e:	e7f3      	b.n	8006258 <_dtoa_r+0x228>
 8006270:	2300      	movs	r3, #0
 8006272:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006276:	18fb      	adds	r3, r7, r3
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	3301      	adds	r3, #1
 800627c:	2b01      	cmp	r3, #1
 800627e:	9307      	str	r3, [sp, #28]
 8006280:	bfb8      	it	lt
 8006282:	2301      	movlt	r3, #1
 8006284:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006288:	2100      	movs	r1, #0
 800628a:	2204      	movs	r2, #4
 800628c:	f102 0514 	add.w	r5, r2, #20
 8006290:	429d      	cmp	r5, r3
 8006292:	d91f      	bls.n	80062d4 <_dtoa_r+0x2a4>
 8006294:	6041      	str	r1, [r0, #4]
 8006296:	4658      	mov	r0, fp
 8006298:	f000 fd8e 	bl	8006db8 <_Balloc>
 800629c:	4682      	mov	sl, r0
 800629e:	2800      	cmp	r0, #0
 80062a0:	d13c      	bne.n	800631c <_dtoa_r+0x2ec>
 80062a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006310 <_dtoa_r+0x2e0>)
 80062a4:	4602      	mov	r2, r0
 80062a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80062aa:	e6d8      	b.n	800605e <_dtoa_r+0x2e>
 80062ac:	2301      	movs	r3, #1
 80062ae:	e7e0      	b.n	8006272 <_dtoa_r+0x242>
 80062b0:	2401      	movs	r4, #1
 80062b2:	2300      	movs	r3, #0
 80062b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80062b8:	f04f 33ff 	mov.w	r3, #4294967295
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	9307      	str	r3, [sp, #28]
 80062c0:	2200      	movs	r2, #0
 80062c2:	2312      	movs	r3, #18
 80062c4:	e7d0      	b.n	8006268 <_dtoa_r+0x238>
 80062c6:	2301      	movs	r3, #1
 80062c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062ca:	e7f5      	b.n	80062b8 <_dtoa_r+0x288>
 80062cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	9307      	str	r3, [sp, #28]
 80062d2:	e7d7      	b.n	8006284 <_dtoa_r+0x254>
 80062d4:	3101      	adds	r1, #1
 80062d6:	0052      	lsls	r2, r2, #1
 80062d8:	e7d8      	b.n	800628c <_dtoa_r+0x25c>
 80062da:	bf00      	nop
 80062dc:	f3af 8000 	nop.w
 80062e0:	636f4361 	.word	0x636f4361
 80062e4:	3fd287a7 	.word	0x3fd287a7
 80062e8:	8b60c8b3 	.word	0x8b60c8b3
 80062ec:	3fc68a28 	.word	0x3fc68a28
 80062f0:	509f79fb 	.word	0x509f79fb
 80062f4:	3fd34413 	.word	0x3fd34413
 80062f8:	0800a0f1 	.word	0x0800a0f1
 80062fc:	0800a108 	.word	0x0800a108
 8006300:	7ff00000 	.word	0x7ff00000
 8006304:	0800a0c1 	.word	0x0800a0c1
 8006308:	3ff80000 	.word	0x3ff80000
 800630c:	0800a200 	.word	0x0800a200
 8006310:	0800a160 	.word	0x0800a160
 8006314:	0800a0ed 	.word	0x0800a0ed
 8006318:	0800a0c0 	.word	0x0800a0c0
 800631c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006320:	6018      	str	r0, [r3, #0]
 8006322:	9b07      	ldr	r3, [sp, #28]
 8006324:	2b0e      	cmp	r3, #14
 8006326:	f200 80a4 	bhi.w	8006472 <_dtoa_r+0x442>
 800632a:	2c00      	cmp	r4, #0
 800632c:	f000 80a1 	beq.w	8006472 <_dtoa_r+0x442>
 8006330:	2f00      	cmp	r7, #0
 8006332:	dd33      	ble.n	800639c <_dtoa_r+0x36c>
 8006334:	4bad      	ldr	r3, [pc, #692]	@ (80065ec <_dtoa_r+0x5bc>)
 8006336:	f007 020f 	and.w	r2, r7, #15
 800633a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800633e:	ed93 7b00 	vldr	d7, [r3]
 8006342:	05f8      	lsls	r0, r7, #23
 8006344:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006348:	ea4f 1427 	mov.w	r4, r7, asr #4
 800634c:	d516      	bpl.n	800637c <_dtoa_r+0x34c>
 800634e:	4ba8      	ldr	r3, [pc, #672]	@ (80065f0 <_dtoa_r+0x5c0>)
 8006350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006358:	f7fa fa98 	bl	800088c <__aeabi_ddiv>
 800635c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006360:	f004 040f 	and.w	r4, r4, #15
 8006364:	2603      	movs	r6, #3
 8006366:	4da2      	ldr	r5, [pc, #648]	@ (80065f0 <_dtoa_r+0x5c0>)
 8006368:	b954      	cbnz	r4, 8006380 <_dtoa_r+0x350>
 800636a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800636e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006372:	f7fa fa8b 	bl	800088c <__aeabi_ddiv>
 8006376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800637a:	e028      	b.n	80063ce <_dtoa_r+0x39e>
 800637c:	2602      	movs	r6, #2
 800637e:	e7f2      	b.n	8006366 <_dtoa_r+0x336>
 8006380:	07e1      	lsls	r1, r4, #31
 8006382:	d508      	bpl.n	8006396 <_dtoa_r+0x366>
 8006384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006388:	e9d5 2300 	ldrd	r2, r3, [r5]
 800638c:	f7fa f954 	bl	8000638 <__aeabi_dmul>
 8006390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006394:	3601      	adds	r6, #1
 8006396:	1064      	asrs	r4, r4, #1
 8006398:	3508      	adds	r5, #8
 800639a:	e7e5      	b.n	8006368 <_dtoa_r+0x338>
 800639c:	f000 80d2 	beq.w	8006544 <_dtoa_r+0x514>
 80063a0:	427c      	negs	r4, r7
 80063a2:	4b92      	ldr	r3, [pc, #584]	@ (80065ec <_dtoa_r+0x5bc>)
 80063a4:	4d92      	ldr	r5, [pc, #584]	@ (80065f0 <_dtoa_r+0x5c0>)
 80063a6:	f004 020f 	and.w	r2, r4, #15
 80063aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063b6:	f7fa f93f 	bl	8000638 <__aeabi_dmul>
 80063ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063be:	1124      	asrs	r4, r4, #4
 80063c0:	2300      	movs	r3, #0
 80063c2:	2602      	movs	r6, #2
 80063c4:	2c00      	cmp	r4, #0
 80063c6:	f040 80b2 	bne.w	800652e <_dtoa_r+0x4fe>
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1d3      	bne.n	8006376 <_dtoa_r+0x346>
 80063ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80063d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 80b7 	beq.w	8006548 <_dtoa_r+0x518>
 80063da:	4b86      	ldr	r3, [pc, #536]	@ (80065f4 <_dtoa_r+0x5c4>)
 80063dc:	2200      	movs	r2, #0
 80063de:	4620      	mov	r0, r4
 80063e0:	4629      	mov	r1, r5
 80063e2:	f7fa fb9b 	bl	8000b1c <__aeabi_dcmplt>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	f000 80ae 	beq.w	8006548 <_dtoa_r+0x518>
 80063ec:	9b07      	ldr	r3, [sp, #28]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 80aa 	beq.w	8006548 <_dtoa_r+0x518>
 80063f4:	9b00      	ldr	r3, [sp, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	dd37      	ble.n	800646a <_dtoa_r+0x43a>
 80063fa:	1e7b      	subs	r3, r7, #1
 80063fc:	9304      	str	r3, [sp, #16]
 80063fe:	4620      	mov	r0, r4
 8006400:	4b7d      	ldr	r3, [pc, #500]	@ (80065f8 <_dtoa_r+0x5c8>)
 8006402:	2200      	movs	r2, #0
 8006404:	4629      	mov	r1, r5
 8006406:	f7fa f917 	bl	8000638 <__aeabi_dmul>
 800640a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800640e:	9c00      	ldr	r4, [sp, #0]
 8006410:	3601      	adds	r6, #1
 8006412:	4630      	mov	r0, r6
 8006414:	f7fa f8a6 	bl	8000564 <__aeabi_i2d>
 8006418:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800641c:	f7fa f90c 	bl	8000638 <__aeabi_dmul>
 8006420:	4b76      	ldr	r3, [pc, #472]	@ (80065fc <_dtoa_r+0x5cc>)
 8006422:	2200      	movs	r2, #0
 8006424:	f7f9 ff52 	bl	80002cc <__adddf3>
 8006428:	4605      	mov	r5, r0
 800642a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800642e:	2c00      	cmp	r4, #0
 8006430:	f040 808d 	bne.w	800654e <_dtoa_r+0x51e>
 8006434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006438:	4b71      	ldr	r3, [pc, #452]	@ (8006600 <_dtoa_r+0x5d0>)
 800643a:	2200      	movs	r2, #0
 800643c:	f7f9 ff44 	bl	80002c8 <__aeabi_dsub>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006448:	462a      	mov	r2, r5
 800644a:	4633      	mov	r3, r6
 800644c:	f7fa fb84 	bl	8000b58 <__aeabi_dcmpgt>
 8006450:	2800      	cmp	r0, #0
 8006452:	f040 828b 	bne.w	800696c <_dtoa_r+0x93c>
 8006456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800645a:	462a      	mov	r2, r5
 800645c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006460:	f7fa fb5c 	bl	8000b1c <__aeabi_dcmplt>
 8006464:	2800      	cmp	r0, #0
 8006466:	f040 8128 	bne.w	80066ba <_dtoa_r+0x68a>
 800646a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800646e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006472:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006474:	2b00      	cmp	r3, #0
 8006476:	f2c0 815a 	blt.w	800672e <_dtoa_r+0x6fe>
 800647a:	2f0e      	cmp	r7, #14
 800647c:	f300 8157 	bgt.w	800672e <_dtoa_r+0x6fe>
 8006480:	4b5a      	ldr	r3, [pc, #360]	@ (80065ec <_dtoa_r+0x5bc>)
 8006482:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006486:	ed93 7b00 	vldr	d7, [r3]
 800648a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800648c:	2b00      	cmp	r3, #0
 800648e:	ed8d 7b00 	vstr	d7, [sp]
 8006492:	da03      	bge.n	800649c <_dtoa_r+0x46c>
 8006494:	9b07      	ldr	r3, [sp, #28]
 8006496:	2b00      	cmp	r3, #0
 8006498:	f340 8101 	ble.w	800669e <_dtoa_r+0x66e>
 800649c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80064a0:	4656      	mov	r6, sl
 80064a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064a6:	4620      	mov	r0, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7fa f9ef 	bl	800088c <__aeabi_ddiv>
 80064ae:	f7fa fb73 	bl	8000b98 <__aeabi_d2iz>
 80064b2:	4680      	mov	r8, r0
 80064b4:	f7fa f856 	bl	8000564 <__aeabi_i2d>
 80064b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064bc:	f7fa f8bc 	bl	8000638 <__aeabi_dmul>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4620      	mov	r0, r4
 80064c6:	4629      	mov	r1, r5
 80064c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80064cc:	f7f9 fefc 	bl	80002c8 <__aeabi_dsub>
 80064d0:	f806 4b01 	strb.w	r4, [r6], #1
 80064d4:	9d07      	ldr	r5, [sp, #28]
 80064d6:	eba6 040a 	sub.w	r4, r6, sl
 80064da:	42a5      	cmp	r5, r4
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	f040 8117 	bne.w	8006712 <_dtoa_r+0x6e2>
 80064e4:	f7f9 fef2 	bl	80002cc <__adddf3>
 80064e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064ec:	4604      	mov	r4, r0
 80064ee:	460d      	mov	r5, r1
 80064f0:	f7fa fb32 	bl	8000b58 <__aeabi_dcmpgt>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	f040 80f9 	bne.w	80066ec <_dtoa_r+0x6bc>
 80064fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064fe:	4620      	mov	r0, r4
 8006500:	4629      	mov	r1, r5
 8006502:	f7fa fb01 	bl	8000b08 <__aeabi_dcmpeq>
 8006506:	b118      	cbz	r0, 8006510 <_dtoa_r+0x4e0>
 8006508:	f018 0f01 	tst.w	r8, #1
 800650c:	f040 80ee 	bne.w	80066ec <_dtoa_r+0x6bc>
 8006510:	4649      	mov	r1, r9
 8006512:	4658      	mov	r0, fp
 8006514:	f000 fc90 	bl	8006e38 <_Bfree>
 8006518:	2300      	movs	r3, #0
 800651a:	7033      	strb	r3, [r6, #0]
 800651c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800651e:	3701      	adds	r7, #1
 8006520:	601f      	str	r7, [r3, #0]
 8006522:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 831d 	beq.w	8006b64 <_dtoa_r+0xb34>
 800652a:	601e      	str	r6, [r3, #0]
 800652c:	e31a      	b.n	8006b64 <_dtoa_r+0xb34>
 800652e:	07e2      	lsls	r2, r4, #31
 8006530:	d505      	bpl.n	800653e <_dtoa_r+0x50e>
 8006532:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006536:	f7fa f87f 	bl	8000638 <__aeabi_dmul>
 800653a:	3601      	adds	r6, #1
 800653c:	2301      	movs	r3, #1
 800653e:	1064      	asrs	r4, r4, #1
 8006540:	3508      	adds	r5, #8
 8006542:	e73f      	b.n	80063c4 <_dtoa_r+0x394>
 8006544:	2602      	movs	r6, #2
 8006546:	e742      	b.n	80063ce <_dtoa_r+0x39e>
 8006548:	9c07      	ldr	r4, [sp, #28]
 800654a:	9704      	str	r7, [sp, #16]
 800654c:	e761      	b.n	8006412 <_dtoa_r+0x3e2>
 800654e:	4b27      	ldr	r3, [pc, #156]	@ (80065ec <_dtoa_r+0x5bc>)
 8006550:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006552:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006556:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800655a:	4454      	add	r4, sl
 800655c:	2900      	cmp	r1, #0
 800655e:	d053      	beq.n	8006608 <_dtoa_r+0x5d8>
 8006560:	4928      	ldr	r1, [pc, #160]	@ (8006604 <_dtoa_r+0x5d4>)
 8006562:	2000      	movs	r0, #0
 8006564:	f7fa f992 	bl	800088c <__aeabi_ddiv>
 8006568:	4633      	mov	r3, r6
 800656a:	462a      	mov	r2, r5
 800656c:	f7f9 feac 	bl	80002c8 <__aeabi_dsub>
 8006570:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006574:	4656      	mov	r6, sl
 8006576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800657a:	f7fa fb0d 	bl	8000b98 <__aeabi_d2iz>
 800657e:	4605      	mov	r5, r0
 8006580:	f7f9 fff0 	bl	8000564 <__aeabi_i2d>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800658c:	f7f9 fe9c 	bl	80002c8 <__aeabi_dsub>
 8006590:	3530      	adds	r5, #48	@ 0x30
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800659a:	f806 5b01 	strb.w	r5, [r6], #1
 800659e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80065a2:	f7fa fabb 	bl	8000b1c <__aeabi_dcmplt>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d171      	bne.n	800668e <_dtoa_r+0x65e>
 80065aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065ae:	4911      	ldr	r1, [pc, #68]	@ (80065f4 <_dtoa_r+0x5c4>)
 80065b0:	2000      	movs	r0, #0
 80065b2:	f7f9 fe89 	bl	80002c8 <__aeabi_dsub>
 80065b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80065ba:	f7fa faaf 	bl	8000b1c <__aeabi_dcmplt>
 80065be:	2800      	cmp	r0, #0
 80065c0:	f040 8095 	bne.w	80066ee <_dtoa_r+0x6be>
 80065c4:	42a6      	cmp	r6, r4
 80065c6:	f43f af50 	beq.w	800646a <_dtoa_r+0x43a>
 80065ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80065ce:	4b0a      	ldr	r3, [pc, #40]	@ (80065f8 <_dtoa_r+0x5c8>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	f7fa f831 	bl	8000638 <__aeabi_dmul>
 80065d6:	4b08      	ldr	r3, [pc, #32]	@ (80065f8 <_dtoa_r+0x5c8>)
 80065d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065dc:	2200      	movs	r2, #0
 80065de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065e2:	f7fa f829 	bl	8000638 <__aeabi_dmul>
 80065e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ea:	e7c4      	b.n	8006576 <_dtoa_r+0x546>
 80065ec:	0800a200 	.word	0x0800a200
 80065f0:	0800a1d8 	.word	0x0800a1d8
 80065f4:	3ff00000 	.word	0x3ff00000
 80065f8:	40240000 	.word	0x40240000
 80065fc:	401c0000 	.word	0x401c0000
 8006600:	40140000 	.word	0x40140000
 8006604:	3fe00000 	.word	0x3fe00000
 8006608:	4631      	mov	r1, r6
 800660a:	4628      	mov	r0, r5
 800660c:	f7fa f814 	bl	8000638 <__aeabi_dmul>
 8006610:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006614:	9415      	str	r4, [sp, #84]	@ 0x54
 8006616:	4656      	mov	r6, sl
 8006618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800661c:	f7fa fabc 	bl	8000b98 <__aeabi_d2iz>
 8006620:	4605      	mov	r5, r0
 8006622:	f7f9 ff9f 	bl	8000564 <__aeabi_i2d>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800662e:	f7f9 fe4b 	bl	80002c8 <__aeabi_dsub>
 8006632:	3530      	adds	r5, #48	@ 0x30
 8006634:	f806 5b01 	strb.w	r5, [r6], #1
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	42a6      	cmp	r6, r4
 800663e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	d124      	bne.n	8006692 <_dtoa_r+0x662>
 8006648:	4bac      	ldr	r3, [pc, #688]	@ (80068fc <_dtoa_r+0x8cc>)
 800664a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800664e:	f7f9 fe3d 	bl	80002cc <__adddf3>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800665a:	f7fa fa7d 	bl	8000b58 <__aeabi_dcmpgt>
 800665e:	2800      	cmp	r0, #0
 8006660:	d145      	bne.n	80066ee <_dtoa_r+0x6be>
 8006662:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006666:	49a5      	ldr	r1, [pc, #660]	@ (80068fc <_dtoa_r+0x8cc>)
 8006668:	2000      	movs	r0, #0
 800666a:	f7f9 fe2d 	bl	80002c8 <__aeabi_dsub>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006676:	f7fa fa51 	bl	8000b1c <__aeabi_dcmplt>
 800667a:	2800      	cmp	r0, #0
 800667c:	f43f aef5 	beq.w	800646a <_dtoa_r+0x43a>
 8006680:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006682:	1e73      	subs	r3, r6, #1
 8006684:	9315      	str	r3, [sp, #84]	@ 0x54
 8006686:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800668a:	2b30      	cmp	r3, #48	@ 0x30
 800668c:	d0f8      	beq.n	8006680 <_dtoa_r+0x650>
 800668e:	9f04      	ldr	r7, [sp, #16]
 8006690:	e73e      	b.n	8006510 <_dtoa_r+0x4e0>
 8006692:	4b9b      	ldr	r3, [pc, #620]	@ (8006900 <_dtoa_r+0x8d0>)
 8006694:	f7f9 ffd0 	bl	8000638 <__aeabi_dmul>
 8006698:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800669c:	e7bc      	b.n	8006618 <_dtoa_r+0x5e8>
 800669e:	d10c      	bne.n	80066ba <_dtoa_r+0x68a>
 80066a0:	4b98      	ldr	r3, [pc, #608]	@ (8006904 <_dtoa_r+0x8d4>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066a8:	f7f9 ffc6 	bl	8000638 <__aeabi_dmul>
 80066ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066b0:	f7fa fa48 	bl	8000b44 <__aeabi_dcmpge>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	f000 8157 	beq.w	8006968 <_dtoa_r+0x938>
 80066ba:	2400      	movs	r4, #0
 80066bc:	4625      	mov	r5, r4
 80066be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066c0:	43db      	mvns	r3, r3
 80066c2:	9304      	str	r3, [sp, #16]
 80066c4:	4656      	mov	r6, sl
 80066c6:	2700      	movs	r7, #0
 80066c8:	4621      	mov	r1, r4
 80066ca:	4658      	mov	r0, fp
 80066cc:	f000 fbb4 	bl	8006e38 <_Bfree>
 80066d0:	2d00      	cmp	r5, #0
 80066d2:	d0dc      	beq.n	800668e <_dtoa_r+0x65e>
 80066d4:	b12f      	cbz	r7, 80066e2 <_dtoa_r+0x6b2>
 80066d6:	42af      	cmp	r7, r5
 80066d8:	d003      	beq.n	80066e2 <_dtoa_r+0x6b2>
 80066da:	4639      	mov	r1, r7
 80066dc:	4658      	mov	r0, fp
 80066de:	f000 fbab 	bl	8006e38 <_Bfree>
 80066e2:	4629      	mov	r1, r5
 80066e4:	4658      	mov	r0, fp
 80066e6:	f000 fba7 	bl	8006e38 <_Bfree>
 80066ea:	e7d0      	b.n	800668e <_dtoa_r+0x65e>
 80066ec:	9704      	str	r7, [sp, #16]
 80066ee:	4633      	mov	r3, r6
 80066f0:	461e      	mov	r6, r3
 80066f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066f6:	2a39      	cmp	r2, #57	@ 0x39
 80066f8:	d107      	bne.n	800670a <_dtoa_r+0x6da>
 80066fa:	459a      	cmp	sl, r3
 80066fc:	d1f8      	bne.n	80066f0 <_dtoa_r+0x6c0>
 80066fe:	9a04      	ldr	r2, [sp, #16]
 8006700:	3201      	adds	r2, #1
 8006702:	9204      	str	r2, [sp, #16]
 8006704:	2230      	movs	r2, #48	@ 0x30
 8006706:	f88a 2000 	strb.w	r2, [sl]
 800670a:	781a      	ldrb	r2, [r3, #0]
 800670c:	3201      	adds	r2, #1
 800670e:	701a      	strb	r2, [r3, #0]
 8006710:	e7bd      	b.n	800668e <_dtoa_r+0x65e>
 8006712:	4b7b      	ldr	r3, [pc, #492]	@ (8006900 <_dtoa_r+0x8d0>)
 8006714:	2200      	movs	r2, #0
 8006716:	f7f9 ff8f 	bl	8000638 <__aeabi_dmul>
 800671a:	2200      	movs	r2, #0
 800671c:	2300      	movs	r3, #0
 800671e:	4604      	mov	r4, r0
 8006720:	460d      	mov	r5, r1
 8006722:	f7fa f9f1 	bl	8000b08 <__aeabi_dcmpeq>
 8006726:	2800      	cmp	r0, #0
 8006728:	f43f aebb 	beq.w	80064a2 <_dtoa_r+0x472>
 800672c:	e6f0      	b.n	8006510 <_dtoa_r+0x4e0>
 800672e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006730:	2a00      	cmp	r2, #0
 8006732:	f000 80db 	beq.w	80068ec <_dtoa_r+0x8bc>
 8006736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006738:	2a01      	cmp	r2, #1
 800673a:	f300 80bf 	bgt.w	80068bc <_dtoa_r+0x88c>
 800673e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006740:	2a00      	cmp	r2, #0
 8006742:	f000 80b7 	beq.w	80068b4 <_dtoa_r+0x884>
 8006746:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800674a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800674c:	4646      	mov	r6, r8
 800674e:	9a08      	ldr	r2, [sp, #32]
 8006750:	2101      	movs	r1, #1
 8006752:	441a      	add	r2, r3
 8006754:	4658      	mov	r0, fp
 8006756:	4498      	add	r8, r3
 8006758:	9208      	str	r2, [sp, #32]
 800675a:	f000 fc21 	bl	8006fa0 <__i2b>
 800675e:	4605      	mov	r5, r0
 8006760:	b15e      	cbz	r6, 800677a <_dtoa_r+0x74a>
 8006762:	9b08      	ldr	r3, [sp, #32]
 8006764:	2b00      	cmp	r3, #0
 8006766:	dd08      	ble.n	800677a <_dtoa_r+0x74a>
 8006768:	42b3      	cmp	r3, r6
 800676a:	9a08      	ldr	r2, [sp, #32]
 800676c:	bfa8      	it	ge
 800676e:	4633      	movge	r3, r6
 8006770:	eba8 0803 	sub.w	r8, r8, r3
 8006774:	1af6      	subs	r6, r6, r3
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	9308      	str	r3, [sp, #32]
 800677a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800677c:	b1f3      	cbz	r3, 80067bc <_dtoa_r+0x78c>
 800677e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 80b7 	beq.w	80068f4 <_dtoa_r+0x8c4>
 8006786:	b18c      	cbz	r4, 80067ac <_dtoa_r+0x77c>
 8006788:	4629      	mov	r1, r5
 800678a:	4622      	mov	r2, r4
 800678c:	4658      	mov	r0, fp
 800678e:	f000 fcc7 	bl	8007120 <__pow5mult>
 8006792:	464a      	mov	r2, r9
 8006794:	4601      	mov	r1, r0
 8006796:	4605      	mov	r5, r0
 8006798:	4658      	mov	r0, fp
 800679a:	f000 fc17 	bl	8006fcc <__multiply>
 800679e:	4649      	mov	r1, r9
 80067a0:	9004      	str	r0, [sp, #16]
 80067a2:	4658      	mov	r0, fp
 80067a4:	f000 fb48 	bl	8006e38 <_Bfree>
 80067a8:	9b04      	ldr	r3, [sp, #16]
 80067aa:	4699      	mov	r9, r3
 80067ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067ae:	1b1a      	subs	r2, r3, r4
 80067b0:	d004      	beq.n	80067bc <_dtoa_r+0x78c>
 80067b2:	4649      	mov	r1, r9
 80067b4:	4658      	mov	r0, fp
 80067b6:	f000 fcb3 	bl	8007120 <__pow5mult>
 80067ba:	4681      	mov	r9, r0
 80067bc:	2101      	movs	r1, #1
 80067be:	4658      	mov	r0, fp
 80067c0:	f000 fbee 	bl	8006fa0 <__i2b>
 80067c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067c6:	4604      	mov	r4, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 81cf 	beq.w	8006b6c <_dtoa_r+0xb3c>
 80067ce:	461a      	mov	r2, r3
 80067d0:	4601      	mov	r1, r0
 80067d2:	4658      	mov	r0, fp
 80067d4:	f000 fca4 	bl	8007120 <__pow5mult>
 80067d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067da:	2b01      	cmp	r3, #1
 80067dc:	4604      	mov	r4, r0
 80067de:	f300 8095 	bgt.w	800690c <_dtoa_r+0x8dc>
 80067e2:	9b02      	ldr	r3, [sp, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f040 8087 	bne.w	80068f8 <_dtoa_r+0x8c8>
 80067ea:	9b03      	ldr	r3, [sp, #12]
 80067ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f040 8089 	bne.w	8006908 <_dtoa_r+0x8d8>
 80067f6:	9b03      	ldr	r3, [sp, #12]
 80067f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067fc:	0d1b      	lsrs	r3, r3, #20
 80067fe:	051b      	lsls	r3, r3, #20
 8006800:	b12b      	cbz	r3, 800680e <_dtoa_r+0x7de>
 8006802:	9b08      	ldr	r3, [sp, #32]
 8006804:	3301      	adds	r3, #1
 8006806:	9308      	str	r3, [sp, #32]
 8006808:	f108 0801 	add.w	r8, r8, #1
 800680c:	2301      	movs	r3, #1
 800680e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006810:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 81b0 	beq.w	8006b78 <_dtoa_r+0xb48>
 8006818:	6923      	ldr	r3, [r4, #16]
 800681a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800681e:	6918      	ldr	r0, [r3, #16]
 8006820:	f000 fb72 	bl	8006f08 <__hi0bits>
 8006824:	f1c0 0020 	rsb	r0, r0, #32
 8006828:	9b08      	ldr	r3, [sp, #32]
 800682a:	4418      	add	r0, r3
 800682c:	f010 001f 	ands.w	r0, r0, #31
 8006830:	d077      	beq.n	8006922 <_dtoa_r+0x8f2>
 8006832:	f1c0 0320 	rsb	r3, r0, #32
 8006836:	2b04      	cmp	r3, #4
 8006838:	dd6b      	ble.n	8006912 <_dtoa_r+0x8e2>
 800683a:	9b08      	ldr	r3, [sp, #32]
 800683c:	f1c0 001c 	rsb	r0, r0, #28
 8006840:	4403      	add	r3, r0
 8006842:	4480      	add	r8, r0
 8006844:	4406      	add	r6, r0
 8006846:	9308      	str	r3, [sp, #32]
 8006848:	f1b8 0f00 	cmp.w	r8, #0
 800684c:	dd05      	ble.n	800685a <_dtoa_r+0x82a>
 800684e:	4649      	mov	r1, r9
 8006850:	4642      	mov	r2, r8
 8006852:	4658      	mov	r0, fp
 8006854:	f000 fcbe 	bl	80071d4 <__lshift>
 8006858:	4681      	mov	r9, r0
 800685a:	9b08      	ldr	r3, [sp, #32]
 800685c:	2b00      	cmp	r3, #0
 800685e:	dd05      	ble.n	800686c <_dtoa_r+0x83c>
 8006860:	4621      	mov	r1, r4
 8006862:	461a      	mov	r2, r3
 8006864:	4658      	mov	r0, fp
 8006866:	f000 fcb5 	bl	80071d4 <__lshift>
 800686a:	4604      	mov	r4, r0
 800686c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800686e:	2b00      	cmp	r3, #0
 8006870:	d059      	beq.n	8006926 <_dtoa_r+0x8f6>
 8006872:	4621      	mov	r1, r4
 8006874:	4648      	mov	r0, r9
 8006876:	f000 fd19 	bl	80072ac <__mcmp>
 800687a:	2800      	cmp	r0, #0
 800687c:	da53      	bge.n	8006926 <_dtoa_r+0x8f6>
 800687e:	1e7b      	subs	r3, r7, #1
 8006880:	9304      	str	r3, [sp, #16]
 8006882:	4649      	mov	r1, r9
 8006884:	2300      	movs	r3, #0
 8006886:	220a      	movs	r2, #10
 8006888:	4658      	mov	r0, fp
 800688a:	f000 faf7 	bl	8006e7c <__multadd>
 800688e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006890:	4681      	mov	r9, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 8172 	beq.w	8006b7c <_dtoa_r+0xb4c>
 8006898:	2300      	movs	r3, #0
 800689a:	4629      	mov	r1, r5
 800689c:	220a      	movs	r2, #10
 800689e:	4658      	mov	r0, fp
 80068a0:	f000 faec 	bl	8006e7c <__multadd>
 80068a4:	9b00      	ldr	r3, [sp, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	4605      	mov	r5, r0
 80068aa:	dc67      	bgt.n	800697c <_dtoa_r+0x94c>
 80068ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	dc41      	bgt.n	8006936 <_dtoa_r+0x906>
 80068b2:	e063      	b.n	800697c <_dtoa_r+0x94c>
 80068b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80068b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80068ba:	e746      	b.n	800674a <_dtoa_r+0x71a>
 80068bc:	9b07      	ldr	r3, [sp, #28]
 80068be:	1e5c      	subs	r4, r3, #1
 80068c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068c2:	42a3      	cmp	r3, r4
 80068c4:	bfbf      	itttt	lt
 80068c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80068c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80068ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80068cc:	1ae3      	sublt	r3, r4, r3
 80068ce:	bfb4      	ite	lt
 80068d0:	18d2      	addlt	r2, r2, r3
 80068d2:	1b1c      	subge	r4, r3, r4
 80068d4:	9b07      	ldr	r3, [sp, #28]
 80068d6:	bfbc      	itt	lt
 80068d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80068da:	2400      	movlt	r4, #0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	bfb5      	itete	lt
 80068e0:	eba8 0603 	sublt.w	r6, r8, r3
 80068e4:	9b07      	ldrge	r3, [sp, #28]
 80068e6:	2300      	movlt	r3, #0
 80068e8:	4646      	movge	r6, r8
 80068ea:	e730      	b.n	800674e <_dtoa_r+0x71e>
 80068ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80068f0:	4646      	mov	r6, r8
 80068f2:	e735      	b.n	8006760 <_dtoa_r+0x730>
 80068f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068f6:	e75c      	b.n	80067b2 <_dtoa_r+0x782>
 80068f8:	2300      	movs	r3, #0
 80068fa:	e788      	b.n	800680e <_dtoa_r+0x7de>
 80068fc:	3fe00000 	.word	0x3fe00000
 8006900:	40240000 	.word	0x40240000
 8006904:	40140000 	.word	0x40140000
 8006908:	9b02      	ldr	r3, [sp, #8]
 800690a:	e780      	b.n	800680e <_dtoa_r+0x7de>
 800690c:	2300      	movs	r3, #0
 800690e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006910:	e782      	b.n	8006818 <_dtoa_r+0x7e8>
 8006912:	d099      	beq.n	8006848 <_dtoa_r+0x818>
 8006914:	9a08      	ldr	r2, [sp, #32]
 8006916:	331c      	adds	r3, #28
 8006918:	441a      	add	r2, r3
 800691a:	4498      	add	r8, r3
 800691c:	441e      	add	r6, r3
 800691e:	9208      	str	r2, [sp, #32]
 8006920:	e792      	b.n	8006848 <_dtoa_r+0x818>
 8006922:	4603      	mov	r3, r0
 8006924:	e7f6      	b.n	8006914 <_dtoa_r+0x8e4>
 8006926:	9b07      	ldr	r3, [sp, #28]
 8006928:	9704      	str	r7, [sp, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	dc20      	bgt.n	8006970 <_dtoa_r+0x940>
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006932:	2b02      	cmp	r3, #2
 8006934:	dd1e      	ble.n	8006974 <_dtoa_r+0x944>
 8006936:	9b00      	ldr	r3, [sp, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f47f aec0 	bne.w	80066be <_dtoa_r+0x68e>
 800693e:	4621      	mov	r1, r4
 8006940:	2205      	movs	r2, #5
 8006942:	4658      	mov	r0, fp
 8006944:	f000 fa9a 	bl	8006e7c <__multadd>
 8006948:	4601      	mov	r1, r0
 800694a:	4604      	mov	r4, r0
 800694c:	4648      	mov	r0, r9
 800694e:	f000 fcad 	bl	80072ac <__mcmp>
 8006952:	2800      	cmp	r0, #0
 8006954:	f77f aeb3 	ble.w	80066be <_dtoa_r+0x68e>
 8006958:	4656      	mov	r6, sl
 800695a:	2331      	movs	r3, #49	@ 0x31
 800695c:	f806 3b01 	strb.w	r3, [r6], #1
 8006960:	9b04      	ldr	r3, [sp, #16]
 8006962:	3301      	adds	r3, #1
 8006964:	9304      	str	r3, [sp, #16]
 8006966:	e6ae      	b.n	80066c6 <_dtoa_r+0x696>
 8006968:	9c07      	ldr	r4, [sp, #28]
 800696a:	9704      	str	r7, [sp, #16]
 800696c:	4625      	mov	r5, r4
 800696e:	e7f3      	b.n	8006958 <_dtoa_r+0x928>
 8006970:	9b07      	ldr	r3, [sp, #28]
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 8104 	beq.w	8006b84 <_dtoa_r+0xb54>
 800697c:	2e00      	cmp	r6, #0
 800697e:	dd05      	ble.n	800698c <_dtoa_r+0x95c>
 8006980:	4629      	mov	r1, r5
 8006982:	4632      	mov	r2, r6
 8006984:	4658      	mov	r0, fp
 8006986:	f000 fc25 	bl	80071d4 <__lshift>
 800698a:	4605      	mov	r5, r0
 800698c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800698e:	2b00      	cmp	r3, #0
 8006990:	d05a      	beq.n	8006a48 <_dtoa_r+0xa18>
 8006992:	6869      	ldr	r1, [r5, #4]
 8006994:	4658      	mov	r0, fp
 8006996:	f000 fa0f 	bl	8006db8 <_Balloc>
 800699a:	4606      	mov	r6, r0
 800699c:	b928      	cbnz	r0, 80069aa <_dtoa_r+0x97a>
 800699e:	4b84      	ldr	r3, [pc, #528]	@ (8006bb0 <_dtoa_r+0xb80>)
 80069a0:	4602      	mov	r2, r0
 80069a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80069a6:	f7ff bb5a 	b.w	800605e <_dtoa_r+0x2e>
 80069aa:	692a      	ldr	r2, [r5, #16]
 80069ac:	3202      	adds	r2, #2
 80069ae:	0092      	lsls	r2, r2, #2
 80069b0:	f105 010c 	add.w	r1, r5, #12
 80069b4:	300c      	adds	r0, #12
 80069b6:	f000 ffaf 	bl	8007918 <memcpy>
 80069ba:	2201      	movs	r2, #1
 80069bc:	4631      	mov	r1, r6
 80069be:	4658      	mov	r0, fp
 80069c0:	f000 fc08 	bl	80071d4 <__lshift>
 80069c4:	f10a 0301 	add.w	r3, sl, #1
 80069c8:	9307      	str	r3, [sp, #28]
 80069ca:	9b00      	ldr	r3, [sp, #0]
 80069cc:	4453      	add	r3, sl
 80069ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069d0:	9b02      	ldr	r3, [sp, #8]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	462f      	mov	r7, r5
 80069d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069da:	4605      	mov	r5, r0
 80069dc:	9b07      	ldr	r3, [sp, #28]
 80069de:	4621      	mov	r1, r4
 80069e0:	3b01      	subs	r3, #1
 80069e2:	4648      	mov	r0, r9
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	f7ff fa9a 	bl	8005f1e <quorem>
 80069ea:	4639      	mov	r1, r7
 80069ec:	9002      	str	r0, [sp, #8]
 80069ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80069f2:	4648      	mov	r0, r9
 80069f4:	f000 fc5a 	bl	80072ac <__mcmp>
 80069f8:	462a      	mov	r2, r5
 80069fa:	9008      	str	r0, [sp, #32]
 80069fc:	4621      	mov	r1, r4
 80069fe:	4658      	mov	r0, fp
 8006a00:	f000 fc70 	bl	80072e4 <__mdiff>
 8006a04:	68c2      	ldr	r2, [r0, #12]
 8006a06:	4606      	mov	r6, r0
 8006a08:	bb02      	cbnz	r2, 8006a4c <_dtoa_r+0xa1c>
 8006a0a:	4601      	mov	r1, r0
 8006a0c:	4648      	mov	r0, r9
 8006a0e:	f000 fc4d 	bl	80072ac <__mcmp>
 8006a12:	4602      	mov	r2, r0
 8006a14:	4631      	mov	r1, r6
 8006a16:	4658      	mov	r0, fp
 8006a18:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a1a:	f000 fa0d 	bl	8006e38 <_Bfree>
 8006a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a22:	9e07      	ldr	r6, [sp, #28]
 8006a24:	ea43 0102 	orr.w	r1, r3, r2
 8006a28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a2a:	4319      	orrs	r1, r3
 8006a2c:	d110      	bne.n	8006a50 <_dtoa_r+0xa20>
 8006a2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a32:	d029      	beq.n	8006a88 <_dtoa_r+0xa58>
 8006a34:	9b08      	ldr	r3, [sp, #32]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	dd02      	ble.n	8006a40 <_dtoa_r+0xa10>
 8006a3a:	9b02      	ldr	r3, [sp, #8]
 8006a3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006a40:	9b00      	ldr	r3, [sp, #0]
 8006a42:	f883 8000 	strb.w	r8, [r3]
 8006a46:	e63f      	b.n	80066c8 <_dtoa_r+0x698>
 8006a48:	4628      	mov	r0, r5
 8006a4a:	e7bb      	b.n	80069c4 <_dtoa_r+0x994>
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	e7e1      	b.n	8006a14 <_dtoa_r+0x9e4>
 8006a50:	9b08      	ldr	r3, [sp, #32]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	db04      	blt.n	8006a60 <_dtoa_r+0xa30>
 8006a56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	d120      	bne.n	8006aa2 <_dtoa_r+0xa72>
 8006a60:	2a00      	cmp	r2, #0
 8006a62:	dded      	ble.n	8006a40 <_dtoa_r+0xa10>
 8006a64:	4649      	mov	r1, r9
 8006a66:	2201      	movs	r2, #1
 8006a68:	4658      	mov	r0, fp
 8006a6a:	f000 fbb3 	bl	80071d4 <__lshift>
 8006a6e:	4621      	mov	r1, r4
 8006a70:	4681      	mov	r9, r0
 8006a72:	f000 fc1b 	bl	80072ac <__mcmp>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	dc03      	bgt.n	8006a82 <_dtoa_r+0xa52>
 8006a7a:	d1e1      	bne.n	8006a40 <_dtoa_r+0xa10>
 8006a7c:	f018 0f01 	tst.w	r8, #1
 8006a80:	d0de      	beq.n	8006a40 <_dtoa_r+0xa10>
 8006a82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a86:	d1d8      	bne.n	8006a3a <_dtoa_r+0xa0a>
 8006a88:	9a00      	ldr	r2, [sp, #0]
 8006a8a:	2339      	movs	r3, #57	@ 0x39
 8006a8c:	7013      	strb	r3, [r2, #0]
 8006a8e:	4633      	mov	r3, r6
 8006a90:	461e      	mov	r6, r3
 8006a92:	3b01      	subs	r3, #1
 8006a94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a98:	2a39      	cmp	r2, #57	@ 0x39
 8006a9a:	d052      	beq.n	8006b42 <_dtoa_r+0xb12>
 8006a9c:	3201      	adds	r2, #1
 8006a9e:	701a      	strb	r2, [r3, #0]
 8006aa0:	e612      	b.n	80066c8 <_dtoa_r+0x698>
 8006aa2:	2a00      	cmp	r2, #0
 8006aa4:	dd07      	ble.n	8006ab6 <_dtoa_r+0xa86>
 8006aa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006aaa:	d0ed      	beq.n	8006a88 <_dtoa_r+0xa58>
 8006aac:	9a00      	ldr	r2, [sp, #0]
 8006aae:	f108 0301 	add.w	r3, r8, #1
 8006ab2:	7013      	strb	r3, [r2, #0]
 8006ab4:	e608      	b.n	80066c8 <_dtoa_r+0x698>
 8006ab6:	9b07      	ldr	r3, [sp, #28]
 8006ab8:	9a07      	ldr	r2, [sp, #28]
 8006aba:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d028      	beq.n	8006b16 <_dtoa_r+0xae6>
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	220a      	movs	r2, #10
 8006aca:	4658      	mov	r0, fp
 8006acc:	f000 f9d6 	bl	8006e7c <__multadd>
 8006ad0:	42af      	cmp	r7, r5
 8006ad2:	4681      	mov	r9, r0
 8006ad4:	f04f 0300 	mov.w	r3, #0
 8006ad8:	f04f 020a 	mov.w	r2, #10
 8006adc:	4639      	mov	r1, r7
 8006ade:	4658      	mov	r0, fp
 8006ae0:	d107      	bne.n	8006af2 <_dtoa_r+0xac2>
 8006ae2:	f000 f9cb 	bl	8006e7c <__multadd>
 8006ae6:	4607      	mov	r7, r0
 8006ae8:	4605      	mov	r5, r0
 8006aea:	9b07      	ldr	r3, [sp, #28]
 8006aec:	3301      	adds	r3, #1
 8006aee:	9307      	str	r3, [sp, #28]
 8006af0:	e774      	b.n	80069dc <_dtoa_r+0x9ac>
 8006af2:	f000 f9c3 	bl	8006e7c <__multadd>
 8006af6:	4629      	mov	r1, r5
 8006af8:	4607      	mov	r7, r0
 8006afa:	2300      	movs	r3, #0
 8006afc:	220a      	movs	r2, #10
 8006afe:	4658      	mov	r0, fp
 8006b00:	f000 f9bc 	bl	8006e7c <__multadd>
 8006b04:	4605      	mov	r5, r0
 8006b06:	e7f0      	b.n	8006aea <_dtoa_r+0xaba>
 8006b08:	9b00      	ldr	r3, [sp, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	bfcc      	ite	gt
 8006b0e:	461e      	movgt	r6, r3
 8006b10:	2601      	movle	r6, #1
 8006b12:	4456      	add	r6, sl
 8006b14:	2700      	movs	r7, #0
 8006b16:	4649      	mov	r1, r9
 8006b18:	2201      	movs	r2, #1
 8006b1a:	4658      	mov	r0, fp
 8006b1c:	f000 fb5a 	bl	80071d4 <__lshift>
 8006b20:	4621      	mov	r1, r4
 8006b22:	4681      	mov	r9, r0
 8006b24:	f000 fbc2 	bl	80072ac <__mcmp>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	dcb0      	bgt.n	8006a8e <_dtoa_r+0xa5e>
 8006b2c:	d102      	bne.n	8006b34 <_dtoa_r+0xb04>
 8006b2e:	f018 0f01 	tst.w	r8, #1
 8006b32:	d1ac      	bne.n	8006a8e <_dtoa_r+0xa5e>
 8006b34:	4633      	mov	r3, r6
 8006b36:	461e      	mov	r6, r3
 8006b38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b3c:	2a30      	cmp	r2, #48	@ 0x30
 8006b3e:	d0fa      	beq.n	8006b36 <_dtoa_r+0xb06>
 8006b40:	e5c2      	b.n	80066c8 <_dtoa_r+0x698>
 8006b42:	459a      	cmp	sl, r3
 8006b44:	d1a4      	bne.n	8006a90 <_dtoa_r+0xa60>
 8006b46:	9b04      	ldr	r3, [sp, #16]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	9304      	str	r3, [sp, #16]
 8006b4c:	2331      	movs	r3, #49	@ 0x31
 8006b4e:	f88a 3000 	strb.w	r3, [sl]
 8006b52:	e5b9      	b.n	80066c8 <_dtoa_r+0x698>
 8006b54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006bb4 <_dtoa_r+0xb84>
 8006b5a:	b11b      	cbz	r3, 8006b64 <_dtoa_r+0xb34>
 8006b5c:	f10a 0308 	add.w	r3, sl, #8
 8006b60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	4650      	mov	r0, sl
 8006b66:	b019      	add	sp, #100	@ 0x64
 8006b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	f77f ae37 	ble.w	80067e2 <_dtoa_r+0x7b2>
 8006b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b78:	2001      	movs	r0, #1
 8006b7a:	e655      	b.n	8006828 <_dtoa_r+0x7f8>
 8006b7c:	9b00      	ldr	r3, [sp, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f77f aed6 	ble.w	8006930 <_dtoa_r+0x900>
 8006b84:	4656      	mov	r6, sl
 8006b86:	4621      	mov	r1, r4
 8006b88:	4648      	mov	r0, r9
 8006b8a:	f7ff f9c8 	bl	8005f1e <quorem>
 8006b8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b92:	f806 8b01 	strb.w	r8, [r6], #1
 8006b96:	9b00      	ldr	r3, [sp, #0]
 8006b98:	eba6 020a 	sub.w	r2, r6, sl
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	ddb3      	ble.n	8006b08 <_dtoa_r+0xad8>
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	220a      	movs	r2, #10
 8006ba6:	4658      	mov	r0, fp
 8006ba8:	f000 f968 	bl	8006e7c <__multadd>
 8006bac:	4681      	mov	r9, r0
 8006bae:	e7ea      	b.n	8006b86 <_dtoa_r+0xb56>
 8006bb0:	0800a160 	.word	0x0800a160
 8006bb4:	0800a0e4 	.word	0x0800a0e4

08006bb8 <_free_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4605      	mov	r5, r0
 8006bbc:	2900      	cmp	r1, #0
 8006bbe:	d041      	beq.n	8006c44 <_free_r+0x8c>
 8006bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc4:	1f0c      	subs	r4, r1, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bfb8      	it	lt
 8006bca:	18e4      	addlt	r4, r4, r3
 8006bcc:	f000 f8e8 	bl	8006da0 <__malloc_lock>
 8006bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8006c48 <_free_r+0x90>)
 8006bd2:	6813      	ldr	r3, [r2, #0]
 8006bd4:	b933      	cbnz	r3, 8006be4 <_free_r+0x2c>
 8006bd6:	6063      	str	r3, [r4, #4]
 8006bd8:	6014      	str	r4, [r2, #0]
 8006bda:	4628      	mov	r0, r5
 8006bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006be0:	f000 b8e4 	b.w	8006dac <__malloc_unlock>
 8006be4:	42a3      	cmp	r3, r4
 8006be6:	d908      	bls.n	8006bfa <_free_r+0x42>
 8006be8:	6820      	ldr	r0, [r4, #0]
 8006bea:	1821      	adds	r1, r4, r0
 8006bec:	428b      	cmp	r3, r1
 8006bee:	bf01      	itttt	eq
 8006bf0:	6819      	ldreq	r1, [r3, #0]
 8006bf2:	685b      	ldreq	r3, [r3, #4]
 8006bf4:	1809      	addeq	r1, r1, r0
 8006bf6:	6021      	streq	r1, [r4, #0]
 8006bf8:	e7ed      	b.n	8006bd6 <_free_r+0x1e>
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	b10b      	cbz	r3, 8006c04 <_free_r+0x4c>
 8006c00:	42a3      	cmp	r3, r4
 8006c02:	d9fa      	bls.n	8006bfa <_free_r+0x42>
 8006c04:	6811      	ldr	r1, [r2, #0]
 8006c06:	1850      	adds	r0, r2, r1
 8006c08:	42a0      	cmp	r0, r4
 8006c0a:	d10b      	bne.n	8006c24 <_free_r+0x6c>
 8006c0c:	6820      	ldr	r0, [r4, #0]
 8006c0e:	4401      	add	r1, r0
 8006c10:	1850      	adds	r0, r2, r1
 8006c12:	4283      	cmp	r3, r0
 8006c14:	6011      	str	r1, [r2, #0]
 8006c16:	d1e0      	bne.n	8006bda <_free_r+0x22>
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	6053      	str	r3, [r2, #4]
 8006c1e:	4408      	add	r0, r1
 8006c20:	6010      	str	r0, [r2, #0]
 8006c22:	e7da      	b.n	8006bda <_free_r+0x22>
 8006c24:	d902      	bls.n	8006c2c <_free_r+0x74>
 8006c26:	230c      	movs	r3, #12
 8006c28:	602b      	str	r3, [r5, #0]
 8006c2a:	e7d6      	b.n	8006bda <_free_r+0x22>
 8006c2c:	6820      	ldr	r0, [r4, #0]
 8006c2e:	1821      	adds	r1, r4, r0
 8006c30:	428b      	cmp	r3, r1
 8006c32:	bf04      	itt	eq
 8006c34:	6819      	ldreq	r1, [r3, #0]
 8006c36:	685b      	ldreq	r3, [r3, #4]
 8006c38:	6063      	str	r3, [r4, #4]
 8006c3a:	bf04      	itt	eq
 8006c3c:	1809      	addeq	r1, r1, r0
 8006c3e:	6021      	streq	r1, [r4, #0]
 8006c40:	6054      	str	r4, [r2, #4]
 8006c42:	e7ca      	b.n	8006bda <_free_r+0x22>
 8006c44:	bd38      	pop	{r3, r4, r5, pc}
 8006c46:	bf00      	nop
 8006c48:	2000088c 	.word	0x2000088c

08006c4c <malloc>:
 8006c4c:	4b02      	ldr	r3, [pc, #8]	@ (8006c58 <malloc+0xc>)
 8006c4e:	4601      	mov	r1, r0
 8006c50:	6818      	ldr	r0, [r3, #0]
 8006c52:	f000 b825 	b.w	8006ca0 <_malloc_r>
 8006c56:	bf00      	nop
 8006c58:	20000028 	.word	0x20000028

08006c5c <sbrk_aligned>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	4e0f      	ldr	r6, [pc, #60]	@ (8006c9c <sbrk_aligned+0x40>)
 8006c60:	460c      	mov	r4, r1
 8006c62:	6831      	ldr	r1, [r6, #0]
 8006c64:	4605      	mov	r5, r0
 8006c66:	b911      	cbnz	r1, 8006c6e <sbrk_aligned+0x12>
 8006c68:	f000 fe46 	bl	80078f8 <_sbrk_r>
 8006c6c:	6030      	str	r0, [r6, #0]
 8006c6e:	4621      	mov	r1, r4
 8006c70:	4628      	mov	r0, r5
 8006c72:	f000 fe41 	bl	80078f8 <_sbrk_r>
 8006c76:	1c43      	adds	r3, r0, #1
 8006c78:	d103      	bne.n	8006c82 <sbrk_aligned+0x26>
 8006c7a:	f04f 34ff 	mov.w	r4, #4294967295
 8006c7e:	4620      	mov	r0, r4
 8006c80:	bd70      	pop	{r4, r5, r6, pc}
 8006c82:	1cc4      	adds	r4, r0, #3
 8006c84:	f024 0403 	bic.w	r4, r4, #3
 8006c88:	42a0      	cmp	r0, r4
 8006c8a:	d0f8      	beq.n	8006c7e <sbrk_aligned+0x22>
 8006c8c:	1a21      	subs	r1, r4, r0
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f000 fe32 	bl	80078f8 <_sbrk_r>
 8006c94:	3001      	adds	r0, #1
 8006c96:	d1f2      	bne.n	8006c7e <sbrk_aligned+0x22>
 8006c98:	e7ef      	b.n	8006c7a <sbrk_aligned+0x1e>
 8006c9a:	bf00      	nop
 8006c9c:	20000888 	.word	0x20000888

08006ca0 <_malloc_r>:
 8006ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca4:	1ccd      	adds	r5, r1, #3
 8006ca6:	f025 0503 	bic.w	r5, r5, #3
 8006caa:	3508      	adds	r5, #8
 8006cac:	2d0c      	cmp	r5, #12
 8006cae:	bf38      	it	cc
 8006cb0:	250c      	movcc	r5, #12
 8006cb2:	2d00      	cmp	r5, #0
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	db01      	blt.n	8006cbc <_malloc_r+0x1c>
 8006cb8:	42a9      	cmp	r1, r5
 8006cba:	d904      	bls.n	8006cc6 <_malloc_r+0x26>
 8006cbc:	230c      	movs	r3, #12
 8006cbe:	6033      	str	r3, [r6, #0]
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d9c <_malloc_r+0xfc>
 8006cca:	f000 f869 	bl	8006da0 <__malloc_lock>
 8006cce:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd2:	461c      	mov	r4, r3
 8006cd4:	bb44      	cbnz	r4, 8006d28 <_malloc_r+0x88>
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	4630      	mov	r0, r6
 8006cda:	f7ff ffbf 	bl	8006c5c <sbrk_aligned>
 8006cde:	1c43      	adds	r3, r0, #1
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	d158      	bne.n	8006d96 <_malloc_r+0xf6>
 8006ce4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ce8:	4627      	mov	r7, r4
 8006cea:	2f00      	cmp	r7, #0
 8006cec:	d143      	bne.n	8006d76 <_malloc_r+0xd6>
 8006cee:	2c00      	cmp	r4, #0
 8006cf0:	d04b      	beq.n	8006d8a <_malloc_r+0xea>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	eb04 0903 	add.w	r9, r4, r3
 8006cfc:	f000 fdfc 	bl	80078f8 <_sbrk_r>
 8006d00:	4581      	cmp	r9, r0
 8006d02:	d142      	bne.n	8006d8a <_malloc_r+0xea>
 8006d04:	6821      	ldr	r1, [r4, #0]
 8006d06:	1a6d      	subs	r5, r5, r1
 8006d08:	4629      	mov	r1, r5
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f7ff ffa6 	bl	8006c5c <sbrk_aligned>
 8006d10:	3001      	adds	r0, #1
 8006d12:	d03a      	beq.n	8006d8a <_malloc_r+0xea>
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	442b      	add	r3, r5
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	bb62      	cbnz	r2, 8006d7c <_malloc_r+0xdc>
 8006d22:	f8c8 7000 	str.w	r7, [r8]
 8006d26:	e00f      	b.n	8006d48 <_malloc_r+0xa8>
 8006d28:	6822      	ldr	r2, [r4, #0]
 8006d2a:	1b52      	subs	r2, r2, r5
 8006d2c:	d420      	bmi.n	8006d70 <_malloc_r+0xd0>
 8006d2e:	2a0b      	cmp	r2, #11
 8006d30:	d917      	bls.n	8006d62 <_malloc_r+0xc2>
 8006d32:	1961      	adds	r1, r4, r5
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	6025      	str	r5, [r4, #0]
 8006d38:	bf18      	it	ne
 8006d3a:	6059      	strne	r1, [r3, #4]
 8006d3c:	6863      	ldr	r3, [r4, #4]
 8006d3e:	bf08      	it	eq
 8006d40:	f8c8 1000 	streq.w	r1, [r8]
 8006d44:	5162      	str	r2, [r4, r5]
 8006d46:	604b      	str	r3, [r1, #4]
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f000 f82f 	bl	8006dac <__malloc_unlock>
 8006d4e:	f104 000b 	add.w	r0, r4, #11
 8006d52:	1d23      	adds	r3, r4, #4
 8006d54:	f020 0007 	bic.w	r0, r0, #7
 8006d58:	1ac2      	subs	r2, r0, r3
 8006d5a:	bf1c      	itt	ne
 8006d5c:	1a1b      	subne	r3, r3, r0
 8006d5e:	50a3      	strne	r3, [r4, r2]
 8006d60:	e7af      	b.n	8006cc2 <_malloc_r+0x22>
 8006d62:	6862      	ldr	r2, [r4, #4]
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	bf0c      	ite	eq
 8006d68:	f8c8 2000 	streq.w	r2, [r8]
 8006d6c:	605a      	strne	r2, [r3, #4]
 8006d6e:	e7eb      	b.n	8006d48 <_malloc_r+0xa8>
 8006d70:	4623      	mov	r3, r4
 8006d72:	6864      	ldr	r4, [r4, #4]
 8006d74:	e7ae      	b.n	8006cd4 <_malloc_r+0x34>
 8006d76:	463c      	mov	r4, r7
 8006d78:	687f      	ldr	r7, [r7, #4]
 8006d7a:	e7b6      	b.n	8006cea <_malloc_r+0x4a>
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	42a3      	cmp	r3, r4
 8006d82:	d1fb      	bne.n	8006d7c <_malloc_r+0xdc>
 8006d84:	2300      	movs	r3, #0
 8006d86:	6053      	str	r3, [r2, #4]
 8006d88:	e7de      	b.n	8006d48 <_malloc_r+0xa8>
 8006d8a:	230c      	movs	r3, #12
 8006d8c:	6033      	str	r3, [r6, #0]
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f000 f80c 	bl	8006dac <__malloc_unlock>
 8006d94:	e794      	b.n	8006cc0 <_malloc_r+0x20>
 8006d96:	6005      	str	r5, [r0, #0]
 8006d98:	e7d6      	b.n	8006d48 <_malloc_r+0xa8>
 8006d9a:	bf00      	nop
 8006d9c:	2000088c 	.word	0x2000088c

08006da0 <__malloc_lock>:
 8006da0:	4801      	ldr	r0, [pc, #4]	@ (8006da8 <__malloc_lock+0x8>)
 8006da2:	f7ff b8ba 	b.w	8005f1a <__retarget_lock_acquire_recursive>
 8006da6:	bf00      	nop
 8006da8:	20000884 	.word	0x20000884

08006dac <__malloc_unlock>:
 8006dac:	4801      	ldr	r0, [pc, #4]	@ (8006db4 <__malloc_unlock+0x8>)
 8006dae:	f7ff b8b5 	b.w	8005f1c <__retarget_lock_release_recursive>
 8006db2:	bf00      	nop
 8006db4:	20000884 	.word	0x20000884

08006db8 <_Balloc>:
 8006db8:	b570      	push	{r4, r5, r6, lr}
 8006dba:	69c6      	ldr	r6, [r0, #28]
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	460d      	mov	r5, r1
 8006dc0:	b976      	cbnz	r6, 8006de0 <_Balloc+0x28>
 8006dc2:	2010      	movs	r0, #16
 8006dc4:	f7ff ff42 	bl	8006c4c <malloc>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	61e0      	str	r0, [r4, #28]
 8006dcc:	b920      	cbnz	r0, 8006dd8 <_Balloc+0x20>
 8006dce:	4b18      	ldr	r3, [pc, #96]	@ (8006e30 <_Balloc+0x78>)
 8006dd0:	4818      	ldr	r0, [pc, #96]	@ (8006e34 <_Balloc+0x7c>)
 8006dd2:	216b      	movs	r1, #107	@ 0x6b
 8006dd4:	f000 fdae 	bl	8007934 <__assert_func>
 8006dd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ddc:	6006      	str	r6, [r0, #0]
 8006dde:	60c6      	str	r6, [r0, #12]
 8006de0:	69e6      	ldr	r6, [r4, #28]
 8006de2:	68f3      	ldr	r3, [r6, #12]
 8006de4:	b183      	cbz	r3, 8006e08 <_Balloc+0x50>
 8006de6:	69e3      	ldr	r3, [r4, #28]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dee:	b9b8      	cbnz	r0, 8006e20 <_Balloc+0x68>
 8006df0:	2101      	movs	r1, #1
 8006df2:	fa01 f605 	lsl.w	r6, r1, r5
 8006df6:	1d72      	adds	r2, r6, #5
 8006df8:	0092      	lsls	r2, r2, #2
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f000 fdb8 	bl	8007970 <_calloc_r>
 8006e00:	b160      	cbz	r0, 8006e1c <_Balloc+0x64>
 8006e02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e06:	e00e      	b.n	8006e26 <_Balloc+0x6e>
 8006e08:	2221      	movs	r2, #33	@ 0x21
 8006e0a:	2104      	movs	r1, #4
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 fdaf 	bl	8007970 <_calloc_r>
 8006e12:	69e3      	ldr	r3, [r4, #28]
 8006e14:	60f0      	str	r0, [r6, #12]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1e4      	bne.n	8006de6 <_Balloc+0x2e>
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	bd70      	pop	{r4, r5, r6, pc}
 8006e20:	6802      	ldr	r2, [r0, #0]
 8006e22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e26:	2300      	movs	r3, #0
 8006e28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e2c:	e7f7      	b.n	8006e1e <_Balloc+0x66>
 8006e2e:	bf00      	nop
 8006e30:	0800a0f1 	.word	0x0800a0f1
 8006e34:	0800a171 	.word	0x0800a171

08006e38 <_Bfree>:
 8006e38:	b570      	push	{r4, r5, r6, lr}
 8006e3a:	69c6      	ldr	r6, [r0, #28]
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	460c      	mov	r4, r1
 8006e40:	b976      	cbnz	r6, 8006e60 <_Bfree+0x28>
 8006e42:	2010      	movs	r0, #16
 8006e44:	f7ff ff02 	bl	8006c4c <malloc>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	61e8      	str	r0, [r5, #28]
 8006e4c:	b920      	cbnz	r0, 8006e58 <_Bfree+0x20>
 8006e4e:	4b09      	ldr	r3, [pc, #36]	@ (8006e74 <_Bfree+0x3c>)
 8006e50:	4809      	ldr	r0, [pc, #36]	@ (8006e78 <_Bfree+0x40>)
 8006e52:	218f      	movs	r1, #143	@ 0x8f
 8006e54:	f000 fd6e 	bl	8007934 <__assert_func>
 8006e58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e5c:	6006      	str	r6, [r0, #0]
 8006e5e:	60c6      	str	r6, [r0, #12]
 8006e60:	b13c      	cbz	r4, 8006e72 <_Bfree+0x3a>
 8006e62:	69eb      	ldr	r3, [r5, #28]
 8006e64:	6862      	ldr	r2, [r4, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e6c:	6021      	str	r1, [r4, #0]
 8006e6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
 8006e74:	0800a0f1 	.word	0x0800a0f1
 8006e78:	0800a171 	.word	0x0800a171

08006e7c <__multadd>:
 8006e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e80:	690d      	ldr	r5, [r1, #16]
 8006e82:	4607      	mov	r7, r0
 8006e84:	460c      	mov	r4, r1
 8006e86:	461e      	mov	r6, r3
 8006e88:	f101 0c14 	add.w	ip, r1, #20
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	f8dc 3000 	ldr.w	r3, [ip]
 8006e92:	b299      	uxth	r1, r3
 8006e94:	fb02 6101 	mla	r1, r2, r1, r6
 8006e98:	0c1e      	lsrs	r6, r3, #16
 8006e9a:	0c0b      	lsrs	r3, r1, #16
 8006e9c:	fb02 3306 	mla	r3, r2, r6, r3
 8006ea0:	b289      	uxth	r1, r1
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ea8:	4285      	cmp	r5, r0
 8006eaa:	f84c 1b04 	str.w	r1, [ip], #4
 8006eae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006eb2:	dcec      	bgt.n	8006e8e <__multadd+0x12>
 8006eb4:	b30e      	cbz	r6, 8006efa <__multadd+0x7e>
 8006eb6:	68a3      	ldr	r3, [r4, #8]
 8006eb8:	42ab      	cmp	r3, r5
 8006eba:	dc19      	bgt.n	8006ef0 <__multadd+0x74>
 8006ebc:	6861      	ldr	r1, [r4, #4]
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	3101      	adds	r1, #1
 8006ec2:	f7ff ff79 	bl	8006db8 <_Balloc>
 8006ec6:	4680      	mov	r8, r0
 8006ec8:	b928      	cbnz	r0, 8006ed6 <__multadd+0x5a>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8006f00 <__multadd+0x84>)
 8006ece:	480d      	ldr	r0, [pc, #52]	@ (8006f04 <__multadd+0x88>)
 8006ed0:	21ba      	movs	r1, #186	@ 0xba
 8006ed2:	f000 fd2f 	bl	8007934 <__assert_func>
 8006ed6:	6922      	ldr	r2, [r4, #16]
 8006ed8:	3202      	adds	r2, #2
 8006eda:	f104 010c 	add.w	r1, r4, #12
 8006ede:	0092      	lsls	r2, r2, #2
 8006ee0:	300c      	adds	r0, #12
 8006ee2:	f000 fd19 	bl	8007918 <memcpy>
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	4638      	mov	r0, r7
 8006eea:	f7ff ffa5 	bl	8006e38 <_Bfree>
 8006eee:	4644      	mov	r4, r8
 8006ef0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ef4:	3501      	adds	r5, #1
 8006ef6:	615e      	str	r6, [r3, #20]
 8006ef8:	6125      	str	r5, [r4, #16]
 8006efa:	4620      	mov	r0, r4
 8006efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f00:	0800a160 	.word	0x0800a160
 8006f04:	0800a171 	.word	0x0800a171

08006f08 <__hi0bits>:
 8006f08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	bf36      	itet	cc
 8006f10:	0403      	lslcc	r3, r0, #16
 8006f12:	2000      	movcs	r0, #0
 8006f14:	2010      	movcc	r0, #16
 8006f16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f1a:	bf3c      	itt	cc
 8006f1c:	021b      	lslcc	r3, r3, #8
 8006f1e:	3008      	addcc	r0, #8
 8006f20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f24:	bf3c      	itt	cc
 8006f26:	011b      	lslcc	r3, r3, #4
 8006f28:	3004      	addcc	r0, #4
 8006f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f2e:	bf3c      	itt	cc
 8006f30:	009b      	lslcc	r3, r3, #2
 8006f32:	3002      	addcc	r0, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	db05      	blt.n	8006f44 <__hi0bits+0x3c>
 8006f38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006f3c:	f100 0001 	add.w	r0, r0, #1
 8006f40:	bf08      	it	eq
 8006f42:	2020      	moveq	r0, #32
 8006f44:	4770      	bx	lr

08006f46 <__lo0bits>:
 8006f46:	6803      	ldr	r3, [r0, #0]
 8006f48:	4602      	mov	r2, r0
 8006f4a:	f013 0007 	ands.w	r0, r3, #7
 8006f4e:	d00b      	beq.n	8006f68 <__lo0bits+0x22>
 8006f50:	07d9      	lsls	r1, r3, #31
 8006f52:	d421      	bmi.n	8006f98 <__lo0bits+0x52>
 8006f54:	0798      	lsls	r0, r3, #30
 8006f56:	bf49      	itett	mi
 8006f58:	085b      	lsrmi	r3, r3, #1
 8006f5a:	089b      	lsrpl	r3, r3, #2
 8006f5c:	2001      	movmi	r0, #1
 8006f5e:	6013      	strmi	r3, [r2, #0]
 8006f60:	bf5c      	itt	pl
 8006f62:	6013      	strpl	r3, [r2, #0]
 8006f64:	2002      	movpl	r0, #2
 8006f66:	4770      	bx	lr
 8006f68:	b299      	uxth	r1, r3
 8006f6a:	b909      	cbnz	r1, 8006f70 <__lo0bits+0x2a>
 8006f6c:	0c1b      	lsrs	r3, r3, #16
 8006f6e:	2010      	movs	r0, #16
 8006f70:	b2d9      	uxtb	r1, r3
 8006f72:	b909      	cbnz	r1, 8006f78 <__lo0bits+0x32>
 8006f74:	3008      	adds	r0, #8
 8006f76:	0a1b      	lsrs	r3, r3, #8
 8006f78:	0719      	lsls	r1, r3, #28
 8006f7a:	bf04      	itt	eq
 8006f7c:	091b      	lsreq	r3, r3, #4
 8006f7e:	3004      	addeq	r0, #4
 8006f80:	0799      	lsls	r1, r3, #30
 8006f82:	bf04      	itt	eq
 8006f84:	089b      	lsreq	r3, r3, #2
 8006f86:	3002      	addeq	r0, #2
 8006f88:	07d9      	lsls	r1, r3, #31
 8006f8a:	d403      	bmi.n	8006f94 <__lo0bits+0x4e>
 8006f8c:	085b      	lsrs	r3, r3, #1
 8006f8e:	f100 0001 	add.w	r0, r0, #1
 8006f92:	d003      	beq.n	8006f9c <__lo0bits+0x56>
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	4770      	bx	lr
 8006f98:	2000      	movs	r0, #0
 8006f9a:	4770      	bx	lr
 8006f9c:	2020      	movs	r0, #32
 8006f9e:	4770      	bx	lr

08006fa0 <__i2b>:
 8006fa0:	b510      	push	{r4, lr}
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	f7ff ff07 	bl	8006db8 <_Balloc>
 8006faa:	4602      	mov	r2, r0
 8006fac:	b928      	cbnz	r0, 8006fba <__i2b+0x1a>
 8006fae:	4b05      	ldr	r3, [pc, #20]	@ (8006fc4 <__i2b+0x24>)
 8006fb0:	4805      	ldr	r0, [pc, #20]	@ (8006fc8 <__i2b+0x28>)
 8006fb2:	f240 1145 	movw	r1, #325	@ 0x145
 8006fb6:	f000 fcbd 	bl	8007934 <__assert_func>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	6144      	str	r4, [r0, #20]
 8006fbe:	6103      	str	r3, [r0, #16]
 8006fc0:	bd10      	pop	{r4, pc}
 8006fc2:	bf00      	nop
 8006fc4:	0800a160 	.word	0x0800a160
 8006fc8:	0800a171 	.word	0x0800a171

08006fcc <__multiply>:
 8006fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd0:	4614      	mov	r4, r2
 8006fd2:	690a      	ldr	r2, [r1, #16]
 8006fd4:	6923      	ldr	r3, [r4, #16]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	bfa8      	it	ge
 8006fda:	4623      	movge	r3, r4
 8006fdc:	460f      	mov	r7, r1
 8006fde:	bfa4      	itt	ge
 8006fe0:	460c      	movge	r4, r1
 8006fe2:	461f      	movge	r7, r3
 8006fe4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006fe8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006fec:	68a3      	ldr	r3, [r4, #8]
 8006fee:	6861      	ldr	r1, [r4, #4]
 8006ff0:	eb0a 0609 	add.w	r6, sl, r9
 8006ff4:	42b3      	cmp	r3, r6
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	bfb8      	it	lt
 8006ffa:	3101      	addlt	r1, #1
 8006ffc:	f7ff fedc 	bl	8006db8 <_Balloc>
 8007000:	b930      	cbnz	r0, 8007010 <__multiply+0x44>
 8007002:	4602      	mov	r2, r0
 8007004:	4b44      	ldr	r3, [pc, #272]	@ (8007118 <__multiply+0x14c>)
 8007006:	4845      	ldr	r0, [pc, #276]	@ (800711c <__multiply+0x150>)
 8007008:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800700c:	f000 fc92 	bl	8007934 <__assert_func>
 8007010:	f100 0514 	add.w	r5, r0, #20
 8007014:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007018:	462b      	mov	r3, r5
 800701a:	2200      	movs	r2, #0
 800701c:	4543      	cmp	r3, r8
 800701e:	d321      	bcc.n	8007064 <__multiply+0x98>
 8007020:	f107 0114 	add.w	r1, r7, #20
 8007024:	f104 0214 	add.w	r2, r4, #20
 8007028:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800702c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007030:	9302      	str	r3, [sp, #8]
 8007032:	1b13      	subs	r3, r2, r4
 8007034:	3b15      	subs	r3, #21
 8007036:	f023 0303 	bic.w	r3, r3, #3
 800703a:	3304      	adds	r3, #4
 800703c:	f104 0715 	add.w	r7, r4, #21
 8007040:	42ba      	cmp	r2, r7
 8007042:	bf38      	it	cc
 8007044:	2304      	movcc	r3, #4
 8007046:	9301      	str	r3, [sp, #4]
 8007048:	9b02      	ldr	r3, [sp, #8]
 800704a:	9103      	str	r1, [sp, #12]
 800704c:	428b      	cmp	r3, r1
 800704e:	d80c      	bhi.n	800706a <__multiply+0x9e>
 8007050:	2e00      	cmp	r6, #0
 8007052:	dd03      	ble.n	800705c <__multiply+0x90>
 8007054:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007058:	2b00      	cmp	r3, #0
 800705a:	d05b      	beq.n	8007114 <__multiply+0x148>
 800705c:	6106      	str	r6, [r0, #16]
 800705e:	b005      	add	sp, #20
 8007060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007064:	f843 2b04 	str.w	r2, [r3], #4
 8007068:	e7d8      	b.n	800701c <__multiply+0x50>
 800706a:	f8b1 a000 	ldrh.w	sl, [r1]
 800706e:	f1ba 0f00 	cmp.w	sl, #0
 8007072:	d024      	beq.n	80070be <__multiply+0xf2>
 8007074:	f104 0e14 	add.w	lr, r4, #20
 8007078:	46a9      	mov	r9, r5
 800707a:	f04f 0c00 	mov.w	ip, #0
 800707e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007082:	f8d9 3000 	ldr.w	r3, [r9]
 8007086:	fa1f fb87 	uxth.w	fp, r7
 800708a:	b29b      	uxth	r3, r3
 800708c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007090:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007094:	f8d9 7000 	ldr.w	r7, [r9]
 8007098:	4463      	add	r3, ip
 800709a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800709e:	fb0a c70b 	mla	r7, sl, fp, ip
 80070a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80070ac:	4572      	cmp	r2, lr
 80070ae:	f849 3b04 	str.w	r3, [r9], #4
 80070b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80070b6:	d8e2      	bhi.n	800707e <__multiply+0xb2>
 80070b8:	9b01      	ldr	r3, [sp, #4]
 80070ba:	f845 c003 	str.w	ip, [r5, r3]
 80070be:	9b03      	ldr	r3, [sp, #12]
 80070c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80070c4:	3104      	adds	r1, #4
 80070c6:	f1b9 0f00 	cmp.w	r9, #0
 80070ca:	d021      	beq.n	8007110 <__multiply+0x144>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	f104 0c14 	add.w	ip, r4, #20
 80070d2:	46ae      	mov	lr, r5
 80070d4:	f04f 0a00 	mov.w	sl, #0
 80070d8:	f8bc b000 	ldrh.w	fp, [ip]
 80070dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80070e0:	fb09 770b 	mla	r7, r9, fp, r7
 80070e4:	4457      	add	r7, sl
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80070ec:	f84e 3b04 	str.w	r3, [lr], #4
 80070f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070f8:	f8be 3000 	ldrh.w	r3, [lr]
 80070fc:	fb09 330a 	mla	r3, r9, sl, r3
 8007100:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007104:	4562      	cmp	r2, ip
 8007106:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800710a:	d8e5      	bhi.n	80070d8 <__multiply+0x10c>
 800710c:	9f01      	ldr	r7, [sp, #4]
 800710e:	51eb      	str	r3, [r5, r7]
 8007110:	3504      	adds	r5, #4
 8007112:	e799      	b.n	8007048 <__multiply+0x7c>
 8007114:	3e01      	subs	r6, #1
 8007116:	e79b      	b.n	8007050 <__multiply+0x84>
 8007118:	0800a160 	.word	0x0800a160
 800711c:	0800a171 	.word	0x0800a171

08007120 <__pow5mult>:
 8007120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007124:	4615      	mov	r5, r2
 8007126:	f012 0203 	ands.w	r2, r2, #3
 800712a:	4607      	mov	r7, r0
 800712c:	460e      	mov	r6, r1
 800712e:	d007      	beq.n	8007140 <__pow5mult+0x20>
 8007130:	4c25      	ldr	r4, [pc, #148]	@ (80071c8 <__pow5mult+0xa8>)
 8007132:	3a01      	subs	r2, #1
 8007134:	2300      	movs	r3, #0
 8007136:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800713a:	f7ff fe9f 	bl	8006e7c <__multadd>
 800713e:	4606      	mov	r6, r0
 8007140:	10ad      	asrs	r5, r5, #2
 8007142:	d03d      	beq.n	80071c0 <__pow5mult+0xa0>
 8007144:	69fc      	ldr	r4, [r7, #28]
 8007146:	b97c      	cbnz	r4, 8007168 <__pow5mult+0x48>
 8007148:	2010      	movs	r0, #16
 800714a:	f7ff fd7f 	bl	8006c4c <malloc>
 800714e:	4602      	mov	r2, r0
 8007150:	61f8      	str	r0, [r7, #28]
 8007152:	b928      	cbnz	r0, 8007160 <__pow5mult+0x40>
 8007154:	4b1d      	ldr	r3, [pc, #116]	@ (80071cc <__pow5mult+0xac>)
 8007156:	481e      	ldr	r0, [pc, #120]	@ (80071d0 <__pow5mult+0xb0>)
 8007158:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800715c:	f000 fbea 	bl	8007934 <__assert_func>
 8007160:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007164:	6004      	str	r4, [r0, #0]
 8007166:	60c4      	str	r4, [r0, #12]
 8007168:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800716c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007170:	b94c      	cbnz	r4, 8007186 <__pow5mult+0x66>
 8007172:	f240 2171 	movw	r1, #625	@ 0x271
 8007176:	4638      	mov	r0, r7
 8007178:	f7ff ff12 	bl	8006fa0 <__i2b>
 800717c:	2300      	movs	r3, #0
 800717e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007182:	4604      	mov	r4, r0
 8007184:	6003      	str	r3, [r0, #0]
 8007186:	f04f 0900 	mov.w	r9, #0
 800718a:	07eb      	lsls	r3, r5, #31
 800718c:	d50a      	bpl.n	80071a4 <__pow5mult+0x84>
 800718e:	4631      	mov	r1, r6
 8007190:	4622      	mov	r2, r4
 8007192:	4638      	mov	r0, r7
 8007194:	f7ff ff1a 	bl	8006fcc <__multiply>
 8007198:	4631      	mov	r1, r6
 800719a:	4680      	mov	r8, r0
 800719c:	4638      	mov	r0, r7
 800719e:	f7ff fe4b 	bl	8006e38 <_Bfree>
 80071a2:	4646      	mov	r6, r8
 80071a4:	106d      	asrs	r5, r5, #1
 80071a6:	d00b      	beq.n	80071c0 <__pow5mult+0xa0>
 80071a8:	6820      	ldr	r0, [r4, #0]
 80071aa:	b938      	cbnz	r0, 80071bc <__pow5mult+0x9c>
 80071ac:	4622      	mov	r2, r4
 80071ae:	4621      	mov	r1, r4
 80071b0:	4638      	mov	r0, r7
 80071b2:	f7ff ff0b 	bl	8006fcc <__multiply>
 80071b6:	6020      	str	r0, [r4, #0]
 80071b8:	f8c0 9000 	str.w	r9, [r0]
 80071bc:	4604      	mov	r4, r0
 80071be:	e7e4      	b.n	800718a <__pow5mult+0x6a>
 80071c0:	4630      	mov	r0, r6
 80071c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c6:	bf00      	nop
 80071c8:	0800a1cc 	.word	0x0800a1cc
 80071cc:	0800a0f1 	.word	0x0800a0f1
 80071d0:	0800a171 	.word	0x0800a171

080071d4 <__lshift>:
 80071d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d8:	460c      	mov	r4, r1
 80071da:	6849      	ldr	r1, [r1, #4]
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071e2:	68a3      	ldr	r3, [r4, #8]
 80071e4:	4607      	mov	r7, r0
 80071e6:	4691      	mov	r9, r2
 80071e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071ec:	f108 0601 	add.w	r6, r8, #1
 80071f0:	42b3      	cmp	r3, r6
 80071f2:	db0b      	blt.n	800720c <__lshift+0x38>
 80071f4:	4638      	mov	r0, r7
 80071f6:	f7ff fddf 	bl	8006db8 <_Balloc>
 80071fa:	4605      	mov	r5, r0
 80071fc:	b948      	cbnz	r0, 8007212 <__lshift+0x3e>
 80071fe:	4602      	mov	r2, r0
 8007200:	4b28      	ldr	r3, [pc, #160]	@ (80072a4 <__lshift+0xd0>)
 8007202:	4829      	ldr	r0, [pc, #164]	@ (80072a8 <__lshift+0xd4>)
 8007204:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007208:	f000 fb94 	bl	8007934 <__assert_func>
 800720c:	3101      	adds	r1, #1
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	e7ee      	b.n	80071f0 <__lshift+0x1c>
 8007212:	2300      	movs	r3, #0
 8007214:	f100 0114 	add.w	r1, r0, #20
 8007218:	f100 0210 	add.w	r2, r0, #16
 800721c:	4618      	mov	r0, r3
 800721e:	4553      	cmp	r3, sl
 8007220:	db33      	blt.n	800728a <__lshift+0xb6>
 8007222:	6920      	ldr	r0, [r4, #16]
 8007224:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007228:	f104 0314 	add.w	r3, r4, #20
 800722c:	f019 091f 	ands.w	r9, r9, #31
 8007230:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007234:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007238:	d02b      	beq.n	8007292 <__lshift+0xbe>
 800723a:	f1c9 0e20 	rsb	lr, r9, #32
 800723e:	468a      	mov	sl, r1
 8007240:	2200      	movs	r2, #0
 8007242:	6818      	ldr	r0, [r3, #0]
 8007244:	fa00 f009 	lsl.w	r0, r0, r9
 8007248:	4310      	orrs	r0, r2
 800724a:	f84a 0b04 	str.w	r0, [sl], #4
 800724e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007252:	459c      	cmp	ip, r3
 8007254:	fa22 f20e 	lsr.w	r2, r2, lr
 8007258:	d8f3      	bhi.n	8007242 <__lshift+0x6e>
 800725a:	ebac 0304 	sub.w	r3, ip, r4
 800725e:	3b15      	subs	r3, #21
 8007260:	f023 0303 	bic.w	r3, r3, #3
 8007264:	3304      	adds	r3, #4
 8007266:	f104 0015 	add.w	r0, r4, #21
 800726a:	4584      	cmp	ip, r0
 800726c:	bf38      	it	cc
 800726e:	2304      	movcc	r3, #4
 8007270:	50ca      	str	r2, [r1, r3]
 8007272:	b10a      	cbz	r2, 8007278 <__lshift+0xa4>
 8007274:	f108 0602 	add.w	r6, r8, #2
 8007278:	3e01      	subs	r6, #1
 800727a:	4638      	mov	r0, r7
 800727c:	612e      	str	r6, [r5, #16]
 800727e:	4621      	mov	r1, r4
 8007280:	f7ff fdda 	bl	8006e38 <_Bfree>
 8007284:	4628      	mov	r0, r5
 8007286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728a:	f842 0f04 	str.w	r0, [r2, #4]!
 800728e:	3301      	adds	r3, #1
 8007290:	e7c5      	b.n	800721e <__lshift+0x4a>
 8007292:	3904      	subs	r1, #4
 8007294:	f853 2b04 	ldr.w	r2, [r3], #4
 8007298:	f841 2f04 	str.w	r2, [r1, #4]!
 800729c:	459c      	cmp	ip, r3
 800729e:	d8f9      	bhi.n	8007294 <__lshift+0xc0>
 80072a0:	e7ea      	b.n	8007278 <__lshift+0xa4>
 80072a2:	bf00      	nop
 80072a4:	0800a160 	.word	0x0800a160
 80072a8:	0800a171 	.word	0x0800a171

080072ac <__mcmp>:
 80072ac:	690a      	ldr	r2, [r1, #16]
 80072ae:	4603      	mov	r3, r0
 80072b0:	6900      	ldr	r0, [r0, #16]
 80072b2:	1a80      	subs	r0, r0, r2
 80072b4:	b530      	push	{r4, r5, lr}
 80072b6:	d10e      	bne.n	80072d6 <__mcmp+0x2a>
 80072b8:	3314      	adds	r3, #20
 80072ba:	3114      	adds	r1, #20
 80072bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80072c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80072c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80072c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80072cc:	4295      	cmp	r5, r2
 80072ce:	d003      	beq.n	80072d8 <__mcmp+0x2c>
 80072d0:	d205      	bcs.n	80072de <__mcmp+0x32>
 80072d2:	f04f 30ff 	mov.w	r0, #4294967295
 80072d6:	bd30      	pop	{r4, r5, pc}
 80072d8:	42a3      	cmp	r3, r4
 80072da:	d3f3      	bcc.n	80072c4 <__mcmp+0x18>
 80072dc:	e7fb      	b.n	80072d6 <__mcmp+0x2a>
 80072de:	2001      	movs	r0, #1
 80072e0:	e7f9      	b.n	80072d6 <__mcmp+0x2a>
	...

080072e4 <__mdiff>:
 80072e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e8:	4689      	mov	r9, r1
 80072ea:	4606      	mov	r6, r0
 80072ec:	4611      	mov	r1, r2
 80072ee:	4648      	mov	r0, r9
 80072f0:	4614      	mov	r4, r2
 80072f2:	f7ff ffdb 	bl	80072ac <__mcmp>
 80072f6:	1e05      	subs	r5, r0, #0
 80072f8:	d112      	bne.n	8007320 <__mdiff+0x3c>
 80072fa:	4629      	mov	r1, r5
 80072fc:	4630      	mov	r0, r6
 80072fe:	f7ff fd5b 	bl	8006db8 <_Balloc>
 8007302:	4602      	mov	r2, r0
 8007304:	b928      	cbnz	r0, 8007312 <__mdiff+0x2e>
 8007306:	4b3f      	ldr	r3, [pc, #252]	@ (8007404 <__mdiff+0x120>)
 8007308:	f240 2137 	movw	r1, #567	@ 0x237
 800730c:	483e      	ldr	r0, [pc, #248]	@ (8007408 <__mdiff+0x124>)
 800730e:	f000 fb11 	bl	8007934 <__assert_func>
 8007312:	2301      	movs	r3, #1
 8007314:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007318:	4610      	mov	r0, r2
 800731a:	b003      	add	sp, #12
 800731c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007320:	bfbc      	itt	lt
 8007322:	464b      	movlt	r3, r9
 8007324:	46a1      	movlt	r9, r4
 8007326:	4630      	mov	r0, r6
 8007328:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800732c:	bfba      	itte	lt
 800732e:	461c      	movlt	r4, r3
 8007330:	2501      	movlt	r5, #1
 8007332:	2500      	movge	r5, #0
 8007334:	f7ff fd40 	bl	8006db8 <_Balloc>
 8007338:	4602      	mov	r2, r0
 800733a:	b918      	cbnz	r0, 8007344 <__mdiff+0x60>
 800733c:	4b31      	ldr	r3, [pc, #196]	@ (8007404 <__mdiff+0x120>)
 800733e:	f240 2145 	movw	r1, #581	@ 0x245
 8007342:	e7e3      	b.n	800730c <__mdiff+0x28>
 8007344:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007348:	6926      	ldr	r6, [r4, #16]
 800734a:	60c5      	str	r5, [r0, #12]
 800734c:	f109 0310 	add.w	r3, r9, #16
 8007350:	f109 0514 	add.w	r5, r9, #20
 8007354:	f104 0e14 	add.w	lr, r4, #20
 8007358:	f100 0b14 	add.w	fp, r0, #20
 800735c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007360:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	46d9      	mov	r9, fp
 8007368:	f04f 0c00 	mov.w	ip, #0
 800736c:	9b01      	ldr	r3, [sp, #4]
 800736e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007372:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	fa1f f38a 	uxth.w	r3, sl
 800737c:	4619      	mov	r1, r3
 800737e:	b283      	uxth	r3, r0
 8007380:	1acb      	subs	r3, r1, r3
 8007382:	0c00      	lsrs	r0, r0, #16
 8007384:	4463      	add	r3, ip
 8007386:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800738a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800738e:	b29b      	uxth	r3, r3
 8007390:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007394:	4576      	cmp	r6, lr
 8007396:	f849 3b04 	str.w	r3, [r9], #4
 800739a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800739e:	d8e5      	bhi.n	800736c <__mdiff+0x88>
 80073a0:	1b33      	subs	r3, r6, r4
 80073a2:	3b15      	subs	r3, #21
 80073a4:	f023 0303 	bic.w	r3, r3, #3
 80073a8:	3415      	adds	r4, #21
 80073aa:	3304      	adds	r3, #4
 80073ac:	42a6      	cmp	r6, r4
 80073ae:	bf38      	it	cc
 80073b0:	2304      	movcc	r3, #4
 80073b2:	441d      	add	r5, r3
 80073b4:	445b      	add	r3, fp
 80073b6:	461e      	mov	r6, r3
 80073b8:	462c      	mov	r4, r5
 80073ba:	4544      	cmp	r4, r8
 80073bc:	d30e      	bcc.n	80073dc <__mdiff+0xf8>
 80073be:	f108 0103 	add.w	r1, r8, #3
 80073c2:	1b49      	subs	r1, r1, r5
 80073c4:	f021 0103 	bic.w	r1, r1, #3
 80073c8:	3d03      	subs	r5, #3
 80073ca:	45a8      	cmp	r8, r5
 80073cc:	bf38      	it	cc
 80073ce:	2100      	movcc	r1, #0
 80073d0:	440b      	add	r3, r1
 80073d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073d6:	b191      	cbz	r1, 80073fe <__mdiff+0x11a>
 80073d8:	6117      	str	r7, [r2, #16]
 80073da:	e79d      	b.n	8007318 <__mdiff+0x34>
 80073dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80073e0:	46e6      	mov	lr, ip
 80073e2:	0c08      	lsrs	r0, r1, #16
 80073e4:	fa1c fc81 	uxtah	ip, ip, r1
 80073e8:	4471      	add	r1, lr
 80073ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80073ee:	b289      	uxth	r1, r1
 80073f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80073f4:	f846 1b04 	str.w	r1, [r6], #4
 80073f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073fc:	e7dd      	b.n	80073ba <__mdiff+0xd6>
 80073fe:	3f01      	subs	r7, #1
 8007400:	e7e7      	b.n	80073d2 <__mdiff+0xee>
 8007402:	bf00      	nop
 8007404:	0800a160 	.word	0x0800a160
 8007408:	0800a171 	.word	0x0800a171

0800740c <__d2b>:
 800740c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007410:	460f      	mov	r7, r1
 8007412:	2101      	movs	r1, #1
 8007414:	ec59 8b10 	vmov	r8, r9, d0
 8007418:	4616      	mov	r6, r2
 800741a:	f7ff fccd 	bl	8006db8 <_Balloc>
 800741e:	4604      	mov	r4, r0
 8007420:	b930      	cbnz	r0, 8007430 <__d2b+0x24>
 8007422:	4602      	mov	r2, r0
 8007424:	4b23      	ldr	r3, [pc, #140]	@ (80074b4 <__d2b+0xa8>)
 8007426:	4824      	ldr	r0, [pc, #144]	@ (80074b8 <__d2b+0xac>)
 8007428:	f240 310f 	movw	r1, #783	@ 0x30f
 800742c:	f000 fa82 	bl	8007934 <__assert_func>
 8007430:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007434:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007438:	b10d      	cbz	r5, 800743e <__d2b+0x32>
 800743a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	f1b8 0300 	subs.w	r3, r8, #0
 8007444:	d023      	beq.n	800748e <__d2b+0x82>
 8007446:	4668      	mov	r0, sp
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	f7ff fd7c 	bl	8006f46 <__lo0bits>
 800744e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007452:	b1d0      	cbz	r0, 800748a <__d2b+0x7e>
 8007454:	f1c0 0320 	rsb	r3, r0, #32
 8007458:	fa02 f303 	lsl.w	r3, r2, r3
 800745c:	430b      	orrs	r3, r1
 800745e:	40c2      	lsrs	r2, r0
 8007460:	6163      	str	r3, [r4, #20]
 8007462:	9201      	str	r2, [sp, #4]
 8007464:	9b01      	ldr	r3, [sp, #4]
 8007466:	61a3      	str	r3, [r4, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	bf0c      	ite	eq
 800746c:	2201      	moveq	r2, #1
 800746e:	2202      	movne	r2, #2
 8007470:	6122      	str	r2, [r4, #16]
 8007472:	b1a5      	cbz	r5, 800749e <__d2b+0x92>
 8007474:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007478:	4405      	add	r5, r0
 800747a:	603d      	str	r5, [r7, #0]
 800747c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007480:	6030      	str	r0, [r6, #0]
 8007482:	4620      	mov	r0, r4
 8007484:	b003      	add	sp, #12
 8007486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800748a:	6161      	str	r1, [r4, #20]
 800748c:	e7ea      	b.n	8007464 <__d2b+0x58>
 800748e:	a801      	add	r0, sp, #4
 8007490:	f7ff fd59 	bl	8006f46 <__lo0bits>
 8007494:	9b01      	ldr	r3, [sp, #4]
 8007496:	6163      	str	r3, [r4, #20]
 8007498:	3020      	adds	r0, #32
 800749a:	2201      	movs	r2, #1
 800749c:	e7e8      	b.n	8007470 <__d2b+0x64>
 800749e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80074a6:	6038      	str	r0, [r7, #0]
 80074a8:	6918      	ldr	r0, [r3, #16]
 80074aa:	f7ff fd2d 	bl	8006f08 <__hi0bits>
 80074ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074b2:	e7e5      	b.n	8007480 <__d2b+0x74>
 80074b4:	0800a160 	.word	0x0800a160
 80074b8:	0800a171 	.word	0x0800a171

080074bc <__ssputs_r>:
 80074bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c0:	688e      	ldr	r6, [r1, #8]
 80074c2:	461f      	mov	r7, r3
 80074c4:	42be      	cmp	r6, r7
 80074c6:	680b      	ldr	r3, [r1, #0]
 80074c8:	4682      	mov	sl, r0
 80074ca:	460c      	mov	r4, r1
 80074cc:	4690      	mov	r8, r2
 80074ce:	d82d      	bhi.n	800752c <__ssputs_r+0x70>
 80074d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80074d8:	d026      	beq.n	8007528 <__ssputs_r+0x6c>
 80074da:	6965      	ldr	r5, [r4, #20]
 80074dc:	6909      	ldr	r1, [r1, #16]
 80074de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074e2:	eba3 0901 	sub.w	r9, r3, r1
 80074e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074ea:	1c7b      	adds	r3, r7, #1
 80074ec:	444b      	add	r3, r9
 80074ee:	106d      	asrs	r5, r5, #1
 80074f0:	429d      	cmp	r5, r3
 80074f2:	bf38      	it	cc
 80074f4:	461d      	movcc	r5, r3
 80074f6:	0553      	lsls	r3, r2, #21
 80074f8:	d527      	bpl.n	800754a <__ssputs_r+0x8e>
 80074fa:	4629      	mov	r1, r5
 80074fc:	f7ff fbd0 	bl	8006ca0 <_malloc_r>
 8007500:	4606      	mov	r6, r0
 8007502:	b360      	cbz	r0, 800755e <__ssputs_r+0xa2>
 8007504:	6921      	ldr	r1, [r4, #16]
 8007506:	464a      	mov	r2, r9
 8007508:	f000 fa06 	bl	8007918 <memcpy>
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007516:	81a3      	strh	r3, [r4, #12]
 8007518:	6126      	str	r6, [r4, #16]
 800751a:	6165      	str	r5, [r4, #20]
 800751c:	444e      	add	r6, r9
 800751e:	eba5 0509 	sub.w	r5, r5, r9
 8007522:	6026      	str	r6, [r4, #0]
 8007524:	60a5      	str	r5, [r4, #8]
 8007526:	463e      	mov	r6, r7
 8007528:	42be      	cmp	r6, r7
 800752a:	d900      	bls.n	800752e <__ssputs_r+0x72>
 800752c:	463e      	mov	r6, r7
 800752e:	6820      	ldr	r0, [r4, #0]
 8007530:	4632      	mov	r2, r6
 8007532:	4641      	mov	r1, r8
 8007534:	f000 f9c6 	bl	80078c4 <memmove>
 8007538:	68a3      	ldr	r3, [r4, #8]
 800753a:	1b9b      	subs	r3, r3, r6
 800753c:	60a3      	str	r3, [r4, #8]
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	4433      	add	r3, r6
 8007542:	6023      	str	r3, [r4, #0]
 8007544:	2000      	movs	r0, #0
 8007546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800754a:	462a      	mov	r2, r5
 800754c:	f000 fa36 	bl	80079bc <_realloc_r>
 8007550:	4606      	mov	r6, r0
 8007552:	2800      	cmp	r0, #0
 8007554:	d1e0      	bne.n	8007518 <__ssputs_r+0x5c>
 8007556:	6921      	ldr	r1, [r4, #16]
 8007558:	4650      	mov	r0, sl
 800755a:	f7ff fb2d 	bl	8006bb8 <_free_r>
 800755e:	230c      	movs	r3, #12
 8007560:	f8ca 3000 	str.w	r3, [sl]
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800756a:	81a3      	strh	r3, [r4, #12]
 800756c:	f04f 30ff 	mov.w	r0, #4294967295
 8007570:	e7e9      	b.n	8007546 <__ssputs_r+0x8a>
	...

08007574 <_svfiprintf_r>:
 8007574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	4698      	mov	r8, r3
 800757a:	898b      	ldrh	r3, [r1, #12]
 800757c:	061b      	lsls	r3, r3, #24
 800757e:	b09d      	sub	sp, #116	@ 0x74
 8007580:	4607      	mov	r7, r0
 8007582:	460d      	mov	r5, r1
 8007584:	4614      	mov	r4, r2
 8007586:	d510      	bpl.n	80075aa <_svfiprintf_r+0x36>
 8007588:	690b      	ldr	r3, [r1, #16]
 800758a:	b973      	cbnz	r3, 80075aa <_svfiprintf_r+0x36>
 800758c:	2140      	movs	r1, #64	@ 0x40
 800758e:	f7ff fb87 	bl	8006ca0 <_malloc_r>
 8007592:	6028      	str	r0, [r5, #0]
 8007594:	6128      	str	r0, [r5, #16]
 8007596:	b930      	cbnz	r0, 80075a6 <_svfiprintf_r+0x32>
 8007598:	230c      	movs	r3, #12
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	f04f 30ff 	mov.w	r0, #4294967295
 80075a0:	b01d      	add	sp, #116	@ 0x74
 80075a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a6:	2340      	movs	r3, #64	@ 0x40
 80075a8:	616b      	str	r3, [r5, #20]
 80075aa:	2300      	movs	r3, #0
 80075ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ae:	2320      	movs	r3, #32
 80075b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80075b8:	2330      	movs	r3, #48	@ 0x30
 80075ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007758 <_svfiprintf_r+0x1e4>
 80075be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075c2:	f04f 0901 	mov.w	r9, #1
 80075c6:	4623      	mov	r3, r4
 80075c8:	469a      	mov	sl, r3
 80075ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ce:	b10a      	cbz	r2, 80075d4 <_svfiprintf_r+0x60>
 80075d0:	2a25      	cmp	r2, #37	@ 0x25
 80075d2:	d1f9      	bne.n	80075c8 <_svfiprintf_r+0x54>
 80075d4:	ebba 0b04 	subs.w	fp, sl, r4
 80075d8:	d00b      	beq.n	80075f2 <_svfiprintf_r+0x7e>
 80075da:	465b      	mov	r3, fp
 80075dc:	4622      	mov	r2, r4
 80075de:	4629      	mov	r1, r5
 80075e0:	4638      	mov	r0, r7
 80075e2:	f7ff ff6b 	bl	80074bc <__ssputs_r>
 80075e6:	3001      	adds	r0, #1
 80075e8:	f000 80a7 	beq.w	800773a <_svfiprintf_r+0x1c6>
 80075ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075ee:	445a      	add	r2, fp
 80075f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80075f2:	f89a 3000 	ldrb.w	r3, [sl]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 809f 	beq.w	800773a <_svfiprintf_r+0x1c6>
 80075fc:	2300      	movs	r3, #0
 80075fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007606:	f10a 0a01 	add.w	sl, sl, #1
 800760a:	9304      	str	r3, [sp, #16]
 800760c:	9307      	str	r3, [sp, #28]
 800760e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007612:	931a      	str	r3, [sp, #104]	@ 0x68
 8007614:	4654      	mov	r4, sl
 8007616:	2205      	movs	r2, #5
 8007618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800761c:	484e      	ldr	r0, [pc, #312]	@ (8007758 <_svfiprintf_r+0x1e4>)
 800761e:	f7f8 fdf7 	bl	8000210 <memchr>
 8007622:	9a04      	ldr	r2, [sp, #16]
 8007624:	b9d8      	cbnz	r0, 800765e <_svfiprintf_r+0xea>
 8007626:	06d0      	lsls	r0, r2, #27
 8007628:	bf44      	itt	mi
 800762a:	2320      	movmi	r3, #32
 800762c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007630:	0711      	lsls	r1, r2, #28
 8007632:	bf44      	itt	mi
 8007634:	232b      	movmi	r3, #43	@ 0x2b
 8007636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800763a:	f89a 3000 	ldrb.w	r3, [sl]
 800763e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007640:	d015      	beq.n	800766e <_svfiprintf_r+0xfa>
 8007642:	9a07      	ldr	r2, [sp, #28]
 8007644:	4654      	mov	r4, sl
 8007646:	2000      	movs	r0, #0
 8007648:	f04f 0c0a 	mov.w	ip, #10
 800764c:	4621      	mov	r1, r4
 800764e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007652:	3b30      	subs	r3, #48	@ 0x30
 8007654:	2b09      	cmp	r3, #9
 8007656:	d94b      	bls.n	80076f0 <_svfiprintf_r+0x17c>
 8007658:	b1b0      	cbz	r0, 8007688 <_svfiprintf_r+0x114>
 800765a:	9207      	str	r2, [sp, #28]
 800765c:	e014      	b.n	8007688 <_svfiprintf_r+0x114>
 800765e:	eba0 0308 	sub.w	r3, r0, r8
 8007662:	fa09 f303 	lsl.w	r3, r9, r3
 8007666:	4313      	orrs	r3, r2
 8007668:	9304      	str	r3, [sp, #16]
 800766a:	46a2      	mov	sl, r4
 800766c:	e7d2      	b.n	8007614 <_svfiprintf_r+0xa0>
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	1d19      	adds	r1, r3, #4
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	9103      	str	r1, [sp, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	bfbb      	ittet	lt
 800767a:	425b      	neglt	r3, r3
 800767c:	f042 0202 	orrlt.w	r2, r2, #2
 8007680:	9307      	strge	r3, [sp, #28]
 8007682:	9307      	strlt	r3, [sp, #28]
 8007684:	bfb8      	it	lt
 8007686:	9204      	strlt	r2, [sp, #16]
 8007688:	7823      	ldrb	r3, [r4, #0]
 800768a:	2b2e      	cmp	r3, #46	@ 0x2e
 800768c:	d10a      	bne.n	80076a4 <_svfiprintf_r+0x130>
 800768e:	7863      	ldrb	r3, [r4, #1]
 8007690:	2b2a      	cmp	r3, #42	@ 0x2a
 8007692:	d132      	bne.n	80076fa <_svfiprintf_r+0x186>
 8007694:	9b03      	ldr	r3, [sp, #12]
 8007696:	1d1a      	adds	r2, r3, #4
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	9203      	str	r2, [sp, #12]
 800769c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076a0:	3402      	adds	r4, #2
 80076a2:	9305      	str	r3, [sp, #20]
 80076a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007768 <_svfiprintf_r+0x1f4>
 80076a8:	7821      	ldrb	r1, [r4, #0]
 80076aa:	2203      	movs	r2, #3
 80076ac:	4650      	mov	r0, sl
 80076ae:	f7f8 fdaf 	bl	8000210 <memchr>
 80076b2:	b138      	cbz	r0, 80076c4 <_svfiprintf_r+0x150>
 80076b4:	9b04      	ldr	r3, [sp, #16]
 80076b6:	eba0 000a 	sub.w	r0, r0, sl
 80076ba:	2240      	movs	r2, #64	@ 0x40
 80076bc:	4082      	lsls	r2, r0
 80076be:	4313      	orrs	r3, r2
 80076c0:	3401      	adds	r4, #1
 80076c2:	9304      	str	r3, [sp, #16]
 80076c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c8:	4824      	ldr	r0, [pc, #144]	@ (800775c <_svfiprintf_r+0x1e8>)
 80076ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076ce:	2206      	movs	r2, #6
 80076d0:	f7f8 fd9e 	bl	8000210 <memchr>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d036      	beq.n	8007746 <_svfiprintf_r+0x1d2>
 80076d8:	4b21      	ldr	r3, [pc, #132]	@ (8007760 <_svfiprintf_r+0x1ec>)
 80076da:	bb1b      	cbnz	r3, 8007724 <_svfiprintf_r+0x1b0>
 80076dc:	9b03      	ldr	r3, [sp, #12]
 80076de:	3307      	adds	r3, #7
 80076e0:	f023 0307 	bic.w	r3, r3, #7
 80076e4:	3308      	adds	r3, #8
 80076e6:	9303      	str	r3, [sp, #12]
 80076e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ea:	4433      	add	r3, r6
 80076ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ee:	e76a      	b.n	80075c6 <_svfiprintf_r+0x52>
 80076f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80076f4:	460c      	mov	r4, r1
 80076f6:	2001      	movs	r0, #1
 80076f8:	e7a8      	b.n	800764c <_svfiprintf_r+0xd8>
 80076fa:	2300      	movs	r3, #0
 80076fc:	3401      	adds	r4, #1
 80076fe:	9305      	str	r3, [sp, #20]
 8007700:	4619      	mov	r1, r3
 8007702:	f04f 0c0a 	mov.w	ip, #10
 8007706:	4620      	mov	r0, r4
 8007708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800770c:	3a30      	subs	r2, #48	@ 0x30
 800770e:	2a09      	cmp	r2, #9
 8007710:	d903      	bls.n	800771a <_svfiprintf_r+0x1a6>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0c6      	beq.n	80076a4 <_svfiprintf_r+0x130>
 8007716:	9105      	str	r1, [sp, #20]
 8007718:	e7c4      	b.n	80076a4 <_svfiprintf_r+0x130>
 800771a:	fb0c 2101 	mla	r1, ip, r1, r2
 800771e:	4604      	mov	r4, r0
 8007720:	2301      	movs	r3, #1
 8007722:	e7f0      	b.n	8007706 <_svfiprintf_r+0x192>
 8007724:	ab03      	add	r3, sp, #12
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	462a      	mov	r2, r5
 800772a:	4b0e      	ldr	r3, [pc, #56]	@ (8007764 <_svfiprintf_r+0x1f0>)
 800772c:	a904      	add	r1, sp, #16
 800772e:	4638      	mov	r0, r7
 8007730:	f7fd fe98 	bl	8005464 <_printf_float>
 8007734:	1c42      	adds	r2, r0, #1
 8007736:	4606      	mov	r6, r0
 8007738:	d1d6      	bne.n	80076e8 <_svfiprintf_r+0x174>
 800773a:	89ab      	ldrh	r3, [r5, #12]
 800773c:	065b      	lsls	r3, r3, #25
 800773e:	f53f af2d 	bmi.w	800759c <_svfiprintf_r+0x28>
 8007742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007744:	e72c      	b.n	80075a0 <_svfiprintf_r+0x2c>
 8007746:	ab03      	add	r3, sp, #12
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	462a      	mov	r2, r5
 800774c:	4b05      	ldr	r3, [pc, #20]	@ (8007764 <_svfiprintf_r+0x1f0>)
 800774e:	a904      	add	r1, sp, #16
 8007750:	4638      	mov	r0, r7
 8007752:	f7fe f91f 	bl	8005994 <_printf_i>
 8007756:	e7ed      	b.n	8007734 <_svfiprintf_r+0x1c0>
 8007758:	0800a2c8 	.word	0x0800a2c8
 800775c:	0800a2d2 	.word	0x0800a2d2
 8007760:	08005465 	.word	0x08005465
 8007764:	080074bd 	.word	0x080074bd
 8007768:	0800a2ce 	.word	0x0800a2ce

0800776c <__sflush_r>:
 800776c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007774:	0716      	lsls	r6, r2, #28
 8007776:	4605      	mov	r5, r0
 8007778:	460c      	mov	r4, r1
 800777a:	d454      	bmi.n	8007826 <__sflush_r+0xba>
 800777c:	684b      	ldr	r3, [r1, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	dc02      	bgt.n	8007788 <__sflush_r+0x1c>
 8007782:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007784:	2b00      	cmp	r3, #0
 8007786:	dd48      	ble.n	800781a <__sflush_r+0xae>
 8007788:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800778a:	2e00      	cmp	r6, #0
 800778c:	d045      	beq.n	800781a <__sflush_r+0xae>
 800778e:	2300      	movs	r3, #0
 8007790:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007794:	682f      	ldr	r7, [r5, #0]
 8007796:	6a21      	ldr	r1, [r4, #32]
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	d030      	beq.n	80077fe <__sflush_r+0x92>
 800779c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800779e:	89a3      	ldrh	r3, [r4, #12]
 80077a0:	0759      	lsls	r1, r3, #29
 80077a2:	d505      	bpl.n	80077b0 <__sflush_r+0x44>
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	1ad2      	subs	r2, r2, r3
 80077a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077aa:	b10b      	cbz	r3, 80077b0 <__sflush_r+0x44>
 80077ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077ae:	1ad2      	subs	r2, r2, r3
 80077b0:	2300      	movs	r3, #0
 80077b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077b4:	6a21      	ldr	r1, [r4, #32]
 80077b6:	4628      	mov	r0, r5
 80077b8:	47b0      	blx	r6
 80077ba:	1c43      	adds	r3, r0, #1
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	d106      	bne.n	80077ce <__sflush_r+0x62>
 80077c0:	6829      	ldr	r1, [r5, #0]
 80077c2:	291d      	cmp	r1, #29
 80077c4:	d82b      	bhi.n	800781e <__sflush_r+0xb2>
 80077c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007870 <__sflush_r+0x104>)
 80077c8:	410a      	asrs	r2, r1
 80077ca:	07d6      	lsls	r6, r2, #31
 80077cc:	d427      	bmi.n	800781e <__sflush_r+0xb2>
 80077ce:	2200      	movs	r2, #0
 80077d0:	6062      	str	r2, [r4, #4]
 80077d2:	04d9      	lsls	r1, r3, #19
 80077d4:	6922      	ldr	r2, [r4, #16]
 80077d6:	6022      	str	r2, [r4, #0]
 80077d8:	d504      	bpl.n	80077e4 <__sflush_r+0x78>
 80077da:	1c42      	adds	r2, r0, #1
 80077dc:	d101      	bne.n	80077e2 <__sflush_r+0x76>
 80077de:	682b      	ldr	r3, [r5, #0]
 80077e0:	b903      	cbnz	r3, 80077e4 <__sflush_r+0x78>
 80077e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80077e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077e6:	602f      	str	r7, [r5, #0]
 80077e8:	b1b9      	cbz	r1, 800781a <__sflush_r+0xae>
 80077ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077ee:	4299      	cmp	r1, r3
 80077f0:	d002      	beq.n	80077f8 <__sflush_r+0x8c>
 80077f2:	4628      	mov	r0, r5
 80077f4:	f7ff f9e0 	bl	8006bb8 <_free_r>
 80077f8:	2300      	movs	r3, #0
 80077fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80077fc:	e00d      	b.n	800781a <__sflush_r+0xae>
 80077fe:	2301      	movs	r3, #1
 8007800:	4628      	mov	r0, r5
 8007802:	47b0      	blx	r6
 8007804:	4602      	mov	r2, r0
 8007806:	1c50      	adds	r0, r2, #1
 8007808:	d1c9      	bne.n	800779e <__sflush_r+0x32>
 800780a:	682b      	ldr	r3, [r5, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0c6      	beq.n	800779e <__sflush_r+0x32>
 8007810:	2b1d      	cmp	r3, #29
 8007812:	d001      	beq.n	8007818 <__sflush_r+0xac>
 8007814:	2b16      	cmp	r3, #22
 8007816:	d11e      	bne.n	8007856 <__sflush_r+0xea>
 8007818:	602f      	str	r7, [r5, #0]
 800781a:	2000      	movs	r0, #0
 800781c:	e022      	b.n	8007864 <__sflush_r+0xf8>
 800781e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007822:	b21b      	sxth	r3, r3
 8007824:	e01b      	b.n	800785e <__sflush_r+0xf2>
 8007826:	690f      	ldr	r7, [r1, #16]
 8007828:	2f00      	cmp	r7, #0
 800782a:	d0f6      	beq.n	800781a <__sflush_r+0xae>
 800782c:	0793      	lsls	r3, r2, #30
 800782e:	680e      	ldr	r6, [r1, #0]
 8007830:	bf08      	it	eq
 8007832:	694b      	ldreq	r3, [r1, #20]
 8007834:	600f      	str	r7, [r1, #0]
 8007836:	bf18      	it	ne
 8007838:	2300      	movne	r3, #0
 800783a:	eba6 0807 	sub.w	r8, r6, r7
 800783e:	608b      	str	r3, [r1, #8]
 8007840:	f1b8 0f00 	cmp.w	r8, #0
 8007844:	dde9      	ble.n	800781a <__sflush_r+0xae>
 8007846:	6a21      	ldr	r1, [r4, #32]
 8007848:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800784a:	4643      	mov	r3, r8
 800784c:	463a      	mov	r2, r7
 800784e:	4628      	mov	r0, r5
 8007850:	47b0      	blx	r6
 8007852:	2800      	cmp	r0, #0
 8007854:	dc08      	bgt.n	8007868 <__sflush_r+0xfc>
 8007856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800785a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007868:	4407      	add	r7, r0
 800786a:	eba8 0800 	sub.w	r8, r8, r0
 800786e:	e7e7      	b.n	8007840 <__sflush_r+0xd4>
 8007870:	dfbffffe 	.word	0xdfbffffe

08007874 <_fflush_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	690b      	ldr	r3, [r1, #16]
 8007878:	4605      	mov	r5, r0
 800787a:	460c      	mov	r4, r1
 800787c:	b913      	cbnz	r3, 8007884 <_fflush_r+0x10>
 800787e:	2500      	movs	r5, #0
 8007880:	4628      	mov	r0, r5
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	b118      	cbz	r0, 800788e <_fflush_r+0x1a>
 8007886:	6a03      	ldr	r3, [r0, #32]
 8007888:	b90b      	cbnz	r3, 800788e <_fflush_r+0x1a>
 800788a:	f7fe fa2f 	bl	8005cec <__sinit>
 800788e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d0f3      	beq.n	800787e <_fflush_r+0xa>
 8007896:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007898:	07d0      	lsls	r0, r2, #31
 800789a:	d404      	bmi.n	80078a6 <_fflush_r+0x32>
 800789c:	0599      	lsls	r1, r3, #22
 800789e:	d402      	bmi.n	80078a6 <_fflush_r+0x32>
 80078a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078a2:	f7fe fb3a 	bl	8005f1a <__retarget_lock_acquire_recursive>
 80078a6:	4628      	mov	r0, r5
 80078a8:	4621      	mov	r1, r4
 80078aa:	f7ff ff5f 	bl	800776c <__sflush_r>
 80078ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078b0:	07da      	lsls	r2, r3, #31
 80078b2:	4605      	mov	r5, r0
 80078b4:	d4e4      	bmi.n	8007880 <_fflush_r+0xc>
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	059b      	lsls	r3, r3, #22
 80078ba:	d4e1      	bmi.n	8007880 <_fflush_r+0xc>
 80078bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078be:	f7fe fb2d 	bl	8005f1c <__retarget_lock_release_recursive>
 80078c2:	e7dd      	b.n	8007880 <_fflush_r+0xc>

080078c4 <memmove>:
 80078c4:	4288      	cmp	r0, r1
 80078c6:	b510      	push	{r4, lr}
 80078c8:	eb01 0402 	add.w	r4, r1, r2
 80078cc:	d902      	bls.n	80078d4 <memmove+0x10>
 80078ce:	4284      	cmp	r4, r0
 80078d0:	4623      	mov	r3, r4
 80078d2:	d807      	bhi.n	80078e4 <memmove+0x20>
 80078d4:	1e43      	subs	r3, r0, #1
 80078d6:	42a1      	cmp	r1, r4
 80078d8:	d008      	beq.n	80078ec <memmove+0x28>
 80078da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078e2:	e7f8      	b.n	80078d6 <memmove+0x12>
 80078e4:	4402      	add	r2, r0
 80078e6:	4601      	mov	r1, r0
 80078e8:	428a      	cmp	r2, r1
 80078ea:	d100      	bne.n	80078ee <memmove+0x2a>
 80078ec:	bd10      	pop	{r4, pc}
 80078ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078f6:	e7f7      	b.n	80078e8 <memmove+0x24>

080078f8 <_sbrk_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4d06      	ldr	r5, [pc, #24]	@ (8007914 <_sbrk_r+0x1c>)
 80078fc:	2300      	movs	r3, #0
 80078fe:	4604      	mov	r4, r0
 8007900:	4608      	mov	r0, r1
 8007902:	602b      	str	r3, [r5, #0]
 8007904:	f7fa fb36 	bl	8001f74 <_sbrk>
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	d102      	bne.n	8007912 <_sbrk_r+0x1a>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	b103      	cbz	r3, 8007912 <_sbrk_r+0x1a>
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	20000880 	.word	0x20000880

08007918 <memcpy>:
 8007918:	440a      	add	r2, r1
 800791a:	4291      	cmp	r1, r2
 800791c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007920:	d100      	bne.n	8007924 <memcpy+0xc>
 8007922:	4770      	bx	lr
 8007924:	b510      	push	{r4, lr}
 8007926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800792a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800792e:	4291      	cmp	r1, r2
 8007930:	d1f9      	bne.n	8007926 <memcpy+0xe>
 8007932:	bd10      	pop	{r4, pc}

08007934 <__assert_func>:
 8007934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007936:	4614      	mov	r4, r2
 8007938:	461a      	mov	r2, r3
 800793a:	4b09      	ldr	r3, [pc, #36]	@ (8007960 <__assert_func+0x2c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4605      	mov	r5, r0
 8007940:	68d8      	ldr	r0, [r3, #12]
 8007942:	b954      	cbnz	r4, 800795a <__assert_func+0x26>
 8007944:	4b07      	ldr	r3, [pc, #28]	@ (8007964 <__assert_func+0x30>)
 8007946:	461c      	mov	r4, r3
 8007948:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800794c:	9100      	str	r1, [sp, #0]
 800794e:	462b      	mov	r3, r5
 8007950:	4905      	ldr	r1, [pc, #20]	@ (8007968 <__assert_func+0x34>)
 8007952:	f000 f86f 	bl	8007a34 <fiprintf>
 8007956:	f000 f87f 	bl	8007a58 <abort>
 800795a:	4b04      	ldr	r3, [pc, #16]	@ (800796c <__assert_func+0x38>)
 800795c:	e7f4      	b.n	8007948 <__assert_func+0x14>
 800795e:	bf00      	nop
 8007960:	20000028 	.word	0x20000028
 8007964:	0800a31e 	.word	0x0800a31e
 8007968:	0800a2f0 	.word	0x0800a2f0
 800796c:	0800a2e3 	.word	0x0800a2e3

08007970 <_calloc_r>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	fba1 5402 	umull	r5, r4, r1, r2
 8007976:	b93c      	cbnz	r4, 8007988 <_calloc_r+0x18>
 8007978:	4629      	mov	r1, r5
 800797a:	f7ff f991 	bl	8006ca0 <_malloc_r>
 800797e:	4606      	mov	r6, r0
 8007980:	b928      	cbnz	r0, 800798e <_calloc_r+0x1e>
 8007982:	2600      	movs	r6, #0
 8007984:	4630      	mov	r0, r6
 8007986:	bd70      	pop	{r4, r5, r6, pc}
 8007988:	220c      	movs	r2, #12
 800798a:	6002      	str	r2, [r0, #0]
 800798c:	e7f9      	b.n	8007982 <_calloc_r+0x12>
 800798e:	462a      	mov	r2, r5
 8007990:	4621      	mov	r1, r4
 8007992:	f7fe fa44 	bl	8005e1e <memset>
 8007996:	e7f5      	b.n	8007984 <_calloc_r+0x14>

08007998 <__ascii_mbtowc>:
 8007998:	b082      	sub	sp, #8
 800799a:	b901      	cbnz	r1, 800799e <__ascii_mbtowc+0x6>
 800799c:	a901      	add	r1, sp, #4
 800799e:	b142      	cbz	r2, 80079b2 <__ascii_mbtowc+0x1a>
 80079a0:	b14b      	cbz	r3, 80079b6 <__ascii_mbtowc+0x1e>
 80079a2:	7813      	ldrb	r3, [r2, #0]
 80079a4:	600b      	str	r3, [r1, #0]
 80079a6:	7812      	ldrb	r2, [r2, #0]
 80079a8:	1e10      	subs	r0, r2, #0
 80079aa:	bf18      	it	ne
 80079ac:	2001      	movne	r0, #1
 80079ae:	b002      	add	sp, #8
 80079b0:	4770      	bx	lr
 80079b2:	4610      	mov	r0, r2
 80079b4:	e7fb      	b.n	80079ae <__ascii_mbtowc+0x16>
 80079b6:	f06f 0001 	mvn.w	r0, #1
 80079ba:	e7f8      	b.n	80079ae <__ascii_mbtowc+0x16>

080079bc <_realloc_r>:
 80079bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c0:	4680      	mov	r8, r0
 80079c2:	4615      	mov	r5, r2
 80079c4:	460c      	mov	r4, r1
 80079c6:	b921      	cbnz	r1, 80079d2 <_realloc_r+0x16>
 80079c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079cc:	4611      	mov	r1, r2
 80079ce:	f7ff b967 	b.w	8006ca0 <_malloc_r>
 80079d2:	b92a      	cbnz	r2, 80079e0 <_realloc_r+0x24>
 80079d4:	f7ff f8f0 	bl	8006bb8 <_free_r>
 80079d8:	2400      	movs	r4, #0
 80079da:	4620      	mov	r0, r4
 80079dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e0:	f000 f841 	bl	8007a66 <_malloc_usable_size_r>
 80079e4:	4285      	cmp	r5, r0
 80079e6:	4606      	mov	r6, r0
 80079e8:	d802      	bhi.n	80079f0 <_realloc_r+0x34>
 80079ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80079ee:	d8f4      	bhi.n	80079da <_realloc_r+0x1e>
 80079f0:	4629      	mov	r1, r5
 80079f2:	4640      	mov	r0, r8
 80079f4:	f7ff f954 	bl	8006ca0 <_malloc_r>
 80079f8:	4607      	mov	r7, r0
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d0ec      	beq.n	80079d8 <_realloc_r+0x1c>
 80079fe:	42b5      	cmp	r5, r6
 8007a00:	462a      	mov	r2, r5
 8007a02:	4621      	mov	r1, r4
 8007a04:	bf28      	it	cs
 8007a06:	4632      	movcs	r2, r6
 8007a08:	f7ff ff86 	bl	8007918 <memcpy>
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	4640      	mov	r0, r8
 8007a10:	f7ff f8d2 	bl	8006bb8 <_free_r>
 8007a14:	463c      	mov	r4, r7
 8007a16:	e7e0      	b.n	80079da <_realloc_r+0x1e>

08007a18 <__ascii_wctomb>:
 8007a18:	4603      	mov	r3, r0
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	b141      	cbz	r1, 8007a30 <__ascii_wctomb+0x18>
 8007a1e:	2aff      	cmp	r2, #255	@ 0xff
 8007a20:	d904      	bls.n	8007a2c <__ascii_wctomb+0x14>
 8007a22:	228a      	movs	r2, #138	@ 0x8a
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2a:	4770      	bx	lr
 8007a2c:	700a      	strb	r2, [r1, #0]
 8007a2e:	2001      	movs	r0, #1
 8007a30:	4770      	bx	lr
	...

08007a34 <fiprintf>:
 8007a34:	b40e      	push	{r1, r2, r3}
 8007a36:	b503      	push	{r0, r1, lr}
 8007a38:	4601      	mov	r1, r0
 8007a3a:	ab03      	add	r3, sp, #12
 8007a3c:	4805      	ldr	r0, [pc, #20]	@ (8007a54 <fiprintf+0x20>)
 8007a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a42:	6800      	ldr	r0, [r0, #0]
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	f000 f83f 	bl	8007ac8 <_vfiprintf_r>
 8007a4a:	b002      	add	sp, #8
 8007a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a50:	b003      	add	sp, #12
 8007a52:	4770      	bx	lr
 8007a54:	20000028 	.word	0x20000028

08007a58 <abort>:
 8007a58:	b508      	push	{r3, lr}
 8007a5a:	2006      	movs	r0, #6
 8007a5c:	f000 fa08 	bl	8007e70 <raise>
 8007a60:	2001      	movs	r0, #1
 8007a62:	f7fa fa0f 	bl	8001e84 <_exit>

08007a66 <_malloc_usable_size_r>:
 8007a66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a6a:	1f18      	subs	r0, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	bfbc      	itt	lt
 8007a70:	580b      	ldrlt	r3, [r1, r0]
 8007a72:	18c0      	addlt	r0, r0, r3
 8007a74:	4770      	bx	lr

08007a76 <__sfputc_r>:
 8007a76:	6893      	ldr	r3, [r2, #8]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	b410      	push	{r4}
 8007a7e:	6093      	str	r3, [r2, #8]
 8007a80:	da08      	bge.n	8007a94 <__sfputc_r+0x1e>
 8007a82:	6994      	ldr	r4, [r2, #24]
 8007a84:	42a3      	cmp	r3, r4
 8007a86:	db01      	blt.n	8007a8c <__sfputc_r+0x16>
 8007a88:	290a      	cmp	r1, #10
 8007a8a:	d103      	bne.n	8007a94 <__sfputc_r+0x1e>
 8007a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a90:	f000 b932 	b.w	8007cf8 <__swbuf_r>
 8007a94:	6813      	ldr	r3, [r2, #0]
 8007a96:	1c58      	adds	r0, r3, #1
 8007a98:	6010      	str	r0, [r2, #0]
 8007a9a:	7019      	strb	r1, [r3, #0]
 8007a9c:	4608      	mov	r0, r1
 8007a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <__sfputs_r>:
 8007aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	460f      	mov	r7, r1
 8007aaa:	4614      	mov	r4, r2
 8007aac:	18d5      	adds	r5, r2, r3
 8007aae:	42ac      	cmp	r4, r5
 8007ab0:	d101      	bne.n	8007ab6 <__sfputs_r+0x12>
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	e007      	b.n	8007ac6 <__sfputs_r+0x22>
 8007ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aba:	463a      	mov	r2, r7
 8007abc:	4630      	mov	r0, r6
 8007abe:	f7ff ffda 	bl	8007a76 <__sfputc_r>
 8007ac2:	1c43      	adds	r3, r0, #1
 8007ac4:	d1f3      	bne.n	8007aae <__sfputs_r+0xa>
 8007ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ac8 <_vfiprintf_r>:
 8007ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	460d      	mov	r5, r1
 8007ace:	b09d      	sub	sp, #116	@ 0x74
 8007ad0:	4614      	mov	r4, r2
 8007ad2:	4698      	mov	r8, r3
 8007ad4:	4606      	mov	r6, r0
 8007ad6:	b118      	cbz	r0, 8007ae0 <_vfiprintf_r+0x18>
 8007ad8:	6a03      	ldr	r3, [r0, #32]
 8007ada:	b90b      	cbnz	r3, 8007ae0 <_vfiprintf_r+0x18>
 8007adc:	f7fe f906 	bl	8005cec <__sinit>
 8007ae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ae2:	07d9      	lsls	r1, r3, #31
 8007ae4:	d405      	bmi.n	8007af2 <_vfiprintf_r+0x2a>
 8007ae6:	89ab      	ldrh	r3, [r5, #12]
 8007ae8:	059a      	lsls	r2, r3, #22
 8007aea:	d402      	bmi.n	8007af2 <_vfiprintf_r+0x2a>
 8007aec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007aee:	f7fe fa14 	bl	8005f1a <__retarget_lock_acquire_recursive>
 8007af2:	89ab      	ldrh	r3, [r5, #12]
 8007af4:	071b      	lsls	r3, r3, #28
 8007af6:	d501      	bpl.n	8007afc <_vfiprintf_r+0x34>
 8007af8:	692b      	ldr	r3, [r5, #16]
 8007afa:	b99b      	cbnz	r3, 8007b24 <_vfiprintf_r+0x5c>
 8007afc:	4629      	mov	r1, r5
 8007afe:	4630      	mov	r0, r6
 8007b00:	f000 f938 	bl	8007d74 <__swsetup_r>
 8007b04:	b170      	cbz	r0, 8007b24 <_vfiprintf_r+0x5c>
 8007b06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b08:	07dc      	lsls	r4, r3, #31
 8007b0a:	d504      	bpl.n	8007b16 <_vfiprintf_r+0x4e>
 8007b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b10:	b01d      	add	sp, #116	@ 0x74
 8007b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b16:	89ab      	ldrh	r3, [r5, #12]
 8007b18:	0598      	lsls	r0, r3, #22
 8007b1a:	d4f7      	bmi.n	8007b0c <_vfiprintf_r+0x44>
 8007b1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b1e:	f7fe f9fd 	bl	8005f1c <__retarget_lock_release_recursive>
 8007b22:	e7f3      	b.n	8007b0c <_vfiprintf_r+0x44>
 8007b24:	2300      	movs	r3, #0
 8007b26:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b28:	2320      	movs	r3, #32
 8007b2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b32:	2330      	movs	r3, #48	@ 0x30
 8007b34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ce4 <_vfiprintf_r+0x21c>
 8007b38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b3c:	f04f 0901 	mov.w	r9, #1
 8007b40:	4623      	mov	r3, r4
 8007b42:	469a      	mov	sl, r3
 8007b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b48:	b10a      	cbz	r2, 8007b4e <_vfiprintf_r+0x86>
 8007b4a:	2a25      	cmp	r2, #37	@ 0x25
 8007b4c:	d1f9      	bne.n	8007b42 <_vfiprintf_r+0x7a>
 8007b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b52:	d00b      	beq.n	8007b6c <_vfiprintf_r+0xa4>
 8007b54:	465b      	mov	r3, fp
 8007b56:	4622      	mov	r2, r4
 8007b58:	4629      	mov	r1, r5
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7ff ffa2 	bl	8007aa4 <__sfputs_r>
 8007b60:	3001      	adds	r0, #1
 8007b62:	f000 80a7 	beq.w	8007cb4 <_vfiprintf_r+0x1ec>
 8007b66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b68:	445a      	add	r2, fp
 8007b6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 809f 	beq.w	8007cb4 <_vfiprintf_r+0x1ec>
 8007b76:	2300      	movs	r3, #0
 8007b78:	f04f 32ff 	mov.w	r2, #4294967295
 8007b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b80:	f10a 0a01 	add.w	sl, sl, #1
 8007b84:	9304      	str	r3, [sp, #16]
 8007b86:	9307      	str	r3, [sp, #28]
 8007b88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b8e:	4654      	mov	r4, sl
 8007b90:	2205      	movs	r2, #5
 8007b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b96:	4853      	ldr	r0, [pc, #332]	@ (8007ce4 <_vfiprintf_r+0x21c>)
 8007b98:	f7f8 fb3a 	bl	8000210 <memchr>
 8007b9c:	9a04      	ldr	r2, [sp, #16]
 8007b9e:	b9d8      	cbnz	r0, 8007bd8 <_vfiprintf_r+0x110>
 8007ba0:	06d1      	lsls	r1, r2, #27
 8007ba2:	bf44      	itt	mi
 8007ba4:	2320      	movmi	r3, #32
 8007ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007baa:	0713      	lsls	r3, r2, #28
 8007bac:	bf44      	itt	mi
 8007bae:	232b      	movmi	r3, #43	@ 0x2b
 8007bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bba:	d015      	beq.n	8007be8 <_vfiprintf_r+0x120>
 8007bbc:	9a07      	ldr	r2, [sp, #28]
 8007bbe:	4654      	mov	r4, sl
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	f04f 0c0a 	mov.w	ip, #10
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bcc:	3b30      	subs	r3, #48	@ 0x30
 8007bce:	2b09      	cmp	r3, #9
 8007bd0:	d94b      	bls.n	8007c6a <_vfiprintf_r+0x1a2>
 8007bd2:	b1b0      	cbz	r0, 8007c02 <_vfiprintf_r+0x13a>
 8007bd4:	9207      	str	r2, [sp, #28]
 8007bd6:	e014      	b.n	8007c02 <_vfiprintf_r+0x13a>
 8007bd8:	eba0 0308 	sub.w	r3, r0, r8
 8007bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8007be0:	4313      	orrs	r3, r2
 8007be2:	9304      	str	r3, [sp, #16]
 8007be4:	46a2      	mov	sl, r4
 8007be6:	e7d2      	b.n	8007b8e <_vfiprintf_r+0xc6>
 8007be8:	9b03      	ldr	r3, [sp, #12]
 8007bea:	1d19      	adds	r1, r3, #4
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	9103      	str	r1, [sp, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bfbb      	ittet	lt
 8007bf4:	425b      	neglt	r3, r3
 8007bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8007bfa:	9307      	strge	r3, [sp, #28]
 8007bfc:	9307      	strlt	r3, [sp, #28]
 8007bfe:	bfb8      	it	lt
 8007c00:	9204      	strlt	r2, [sp, #16]
 8007c02:	7823      	ldrb	r3, [r4, #0]
 8007c04:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c06:	d10a      	bne.n	8007c1e <_vfiprintf_r+0x156>
 8007c08:	7863      	ldrb	r3, [r4, #1]
 8007c0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c0c:	d132      	bne.n	8007c74 <_vfiprintf_r+0x1ac>
 8007c0e:	9b03      	ldr	r3, [sp, #12]
 8007c10:	1d1a      	adds	r2, r3, #4
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	9203      	str	r2, [sp, #12]
 8007c16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c1a:	3402      	adds	r4, #2
 8007c1c:	9305      	str	r3, [sp, #20]
 8007c1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007cf4 <_vfiprintf_r+0x22c>
 8007c22:	7821      	ldrb	r1, [r4, #0]
 8007c24:	2203      	movs	r2, #3
 8007c26:	4650      	mov	r0, sl
 8007c28:	f7f8 faf2 	bl	8000210 <memchr>
 8007c2c:	b138      	cbz	r0, 8007c3e <_vfiprintf_r+0x176>
 8007c2e:	9b04      	ldr	r3, [sp, #16]
 8007c30:	eba0 000a 	sub.w	r0, r0, sl
 8007c34:	2240      	movs	r2, #64	@ 0x40
 8007c36:	4082      	lsls	r2, r0
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	3401      	adds	r4, #1
 8007c3c:	9304      	str	r3, [sp, #16]
 8007c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c42:	4829      	ldr	r0, [pc, #164]	@ (8007ce8 <_vfiprintf_r+0x220>)
 8007c44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c48:	2206      	movs	r2, #6
 8007c4a:	f7f8 fae1 	bl	8000210 <memchr>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d03f      	beq.n	8007cd2 <_vfiprintf_r+0x20a>
 8007c52:	4b26      	ldr	r3, [pc, #152]	@ (8007cec <_vfiprintf_r+0x224>)
 8007c54:	bb1b      	cbnz	r3, 8007c9e <_vfiprintf_r+0x1d6>
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	3307      	adds	r3, #7
 8007c5a:	f023 0307 	bic.w	r3, r3, #7
 8007c5e:	3308      	adds	r3, #8
 8007c60:	9303      	str	r3, [sp, #12]
 8007c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c64:	443b      	add	r3, r7
 8007c66:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c68:	e76a      	b.n	8007b40 <_vfiprintf_r+0x78>
 8007c6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c6e:	460c      	mov	r4, r1
 8007c70:	2001      	movs	r0, #1
 8007c72:	e7a8      	b.n	8007bc6 <_vfiprintf_r+0xfe>
 8007c74:	2300      	movs	r3, #0
 8007c76:	3401      	adds	r4, #1
 8007c78:	9305      	str	r3, [sp, #20]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	f04f 0c0a 	mov.w	ip, #10
 8007c80:	4620      	mov	r0, r4
 8007c82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c86:	3a30      	subs	r2, #48	@ 0x30
 8007c88:	2a09      	cmp	r2, #9
 8007c8a:	d903      	bls.n	8007c94 <_vfiprintf_r+0x1cc>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0c6      	beq.n	8007c1e <_vfiprintf_r+0x156>
 8007c90:	9105      	str	r1, [sp, #20]
 8007c92:	e7c4      	b.n	8007c1e <_vfiprintf_r+0x156>
 8007c94:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c98:	4604      	mov	r4, r0
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e7f0      	b.n	8007c80 <_vfiprintf_r+0x1b8>
 8007c9e:	ab03      	add	r3, sp, #12
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	462a      	mov	r2, r5
 8007ca4:	4b12      	ldr	r3, [pc, #72]	@ (8007cf0 <_vfiprintf_r+0x228>)
 8007ca6:	a904      	add	r1, sp, #16
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f7fd fbdb 	bl	8005464 <_printf_float>
 8007cae:	4607      	mov	r7, r0
 8007cb0:	1c78      	adds	r0, r7, #1
 8007cb2:	d1d6      	bne.n	8007c62 <_vfiprintf_r+0x19a>
 8007cb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cb6:	07d9      	lsls	r1, r3, #31
 8007cb8:	d405      	bmi.n	8007cc6 <_vfiprintf_r+0x1fe>
 8007cba:	89ab      	ldrh	r3, [r5, #12]
 8007cbc:	059a      	lsls	r2, r3, #22
 8007cbe:	d402      	bmi.n	8007cc6 <_vfiprintf_r+0x1fe>
 8007cc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cc2:	f7fe f92b 	bl	8005f1c <__retarget_lock_release_recursive>
 8007cc6:	89ab      	ldrh	r3, [r5, #12]
 8007cc8:	065b      	lsls	r3, r3, #25
 8007cca:	f53f af1f 	bmi.w	8007b0c <_vfiprintf_r+0x44>
 8007cce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cd0:	e71e      	b.n	8007b10 <_vfiprintf_r+0x48>
 8007cd2:	ab03      	add	r3, sp, #12
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	462a      	mov	r2, r5
 8007cd8:	4b05      	ldr	r3, [pc, #20]	@ (8007cf0 <_vfiprintf_r+0x228>)
 8007cda:	a904      	add	r1, sp, #16
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7fd fe59 	bl	8005994 <_printf_i>
 8007ce2:	e7e4      	b.n	8007cae <_vfiprintf_r+0x1e6>
 8007ce4:	0800a2c8 	.word	0x0800a2c8
 8007ce8:	0800a2d2 	.word	0x0800a2d2
 8007cec:	08005465 	.word	0x08005465
 8007cf0:	08007aa5 	.word	0x08007aa5
 8007cf4:	0800a2ce 	.word	0x0800a2ce

08007cf8 <__swbuf_r>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	460e      	mov	r6, r1
 8007cfc:	4614      	mov	r4, r2
 8007cfe:	4605      	mov	r5, r0
 8007d00:	b118      	cbz	r0, 8007d0a <__swbuf_r+0x12>
 8007d02:	6a03      	ldr	r3, [r0, #32]
 8007d04:	b90b      	cbnz	r3, 8007d0a <__swbuf_r+0x12>
 8007d06:	f7fd fff1 	bl	8005cec <__sinit>
 8007d0a:	69a3      	ldr	r3, [r4, #24]
 8007d0c:	60a3      	str	r3, [r4, #8]
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	071a      	lsls	r2, r3, #28
 8007d12:	d501      	bpl.n	8007d18 <__swbuf_r+0x20>
 8007d14:	6923      	ldr	r3, [r4, #16]
 8007d16:	b943      	cbnz	r3, 8007d2a <__swbuf_r+0x32>
 8007d18:	4621      	mov	r1, r4
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	f000 f82a 	bl	8007d74 <__swsetup_r>
 8007d20:	b118      	cbz	r0, 8007d2a <__swbuf_r+0x32>
 8007d22:	f04f 37ff 	mov.w	r7, #4294967295
 8007d26:	4638      	mov	r0, r7
 8007d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	6922      	ldr	r2, [r4, #16]
 8007d2e:	1a98      	subs	r0, r3, r2
 8007d30:	6963      	ldr	r3, [r4, #20]
 8007d32:	b2f6      	uxtb	r6, r6
 8007d34:	4283      	cmp	r3, r0
 8007d36:	4637      	mov	r7, r6
 8007d38:	dc05      	bgt.n	8007d46 <__swbuf_r+0x4e>
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f7ff fd99 	bl	8007874 <_fflush_r>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d1ed      	bne.n	8007d22 <__swbuf_r+0x2a>
 8007d46:	68a3      	ldr	r3, [r4, #8]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	60a3      	str	r3, [r4, #8]
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	6022      	str	r2, [r4, #0]
 8007d52:	701e      	strb	r6, [r3, #0]
 8007d54:	6962      	ldr	r2, [r4, #20]
 8007d56:	1c43      	adds	r3, r0, #1
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d004      	beq.n	8007d66 <__swbuf_r+0x6e>
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	07db      	lsls	r3, r3, #31
 8007d60:	d5e1      	bpl.n	8007d26 <__swbuf_r+0x2e>
 8007d62:	2e0a      	cmp	r6, #10
 8007d64:	d1df      	bne.n	8007d26 <__swbuf_r+0x2e>
 8007d66:	4621      	mov	r1, r4
 8007d68:	4628      	mov	r0, r5
 8007d6a:	f7ff fd83 	bl	8007874 <_fflush_r>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d0d9      	beq.n	8007d26 <__swbuf_r+0x2e>
 8007d72:	e7d6      	b.n	8007d22 <__swbuf_r+0x2a>

08007d74 <__swsetup_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4b29      	ldr	r3, [pc, #164]	@ (8007e1c <__swsetup_r+0xa8>)
 8007d78:	4605      	mov	r5, r0
 8007d7a:	6818      	ldr	r0, [r3, #0]
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	b118      	cbz	r0, 8007d88 <__swsetup_r+0x14>
 8007d80:	6a03      	ldr	r3, [r0, #32]
 8007d82:	b90b      	cbnz	r3, 8007d88 <__swsetup_r+0x14>
 8007d84:	f7fd ffb2 	bl	8005cec <__sinit>
 8007d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8c:	0719      	lsls	r1, r3, #28
 8007d8e:	d422      	bmi.n	8007dd6 <__swsetup_r+0x62>
 8007d90:	06da      	lsls	r2, r3, #27
 8007d92:	d407      	bmi.n	8007da4 <__swsetup_r+0x30>
 8007d94:	2209      	movs	r2, #9
 8007d96:	602a      	str	r2, [r5, #0]
 8007d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d9c:	81a3      	strh	r3, [r4, #12]
 8007d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007da2:	e033      	b.n	8007e0c <__swsetup_r+0x98>
 8007da4:	0758      	lsls	r0, r3, #29
 8007da6:	d512      	bpl.n	8007dce <__swsetup_r+0x5a>
 8007da8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007daa:	b141      	cbz	r1, 8007dbe <__swsetup_r+0x4a>
 8007dac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007db0:	4299      	cmp	r1, r3
 8007db2:	d002      	beq.n	8007dba <__swsetup_r+0x46>
 8007db4:	4628      	mov	r0, r5
 8007db6:	f7fe feff 	bl	8006bb8 <_free_r>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007dc4:	81a3      	strh	r3, [r4, #12]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	6063      	str	r3, [r4, #4]
 8007dca:	6923      	ldr	r3, [r4, #16]
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	f043 0308 	orr.w	r3, r3, #8
 8007dd4:	81a3      	strh	r3, [r4, #12]
 8007dd6:	6923      	ldr	r3, [r4, #16]
 8007dd8:	b94b      	cbnz	r3, 8007dee <__swsetup_r+0x7a>
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de4:	d003      	beq.n	8007dee <__swsetup_r+0x7a>
 8007de6:	4621      	mov	r1, r4
 8007de8:	4628      	mov	r0, r5
 8007dea:	f000 f883 	bl	8007ef4 <__smakebuf_r>
 8007dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007df2:	f013 0201 	ands.w	r2, r3, #1
 8007df6:	d00a      	beq.n	8007e0e <__swsetup_r+0x9a>
 8007df8:	2200      	movs	r2, #0
 8007dfa:	60a2      	str	r2, [r4, #8]
 8007dfc:	6962      	ldr	r2, [r4, #20]
 8007dfe:	4252      	negs	r2, r2
 8007e00:	61a2      	str	r2, [r4, #24]
 8007e02:	6922      	ldr	r2, [r4, #16]
 8007e04:	b942      	cbnz	r2, 8007e18 <__swsetup_r+0xa4>
 8007e06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e0a:	d1c5      	bne.n	8007d98 <__swsetup_r+0x24>
 8007e0c:	bd38      	pop	{r3, r4, r5, pc}
 8007e0e:	0799      	lsls	r1, r3, #30
 8007e10:	bf58      	it	pl
 8007e12:	6962      	ldrpl	r2, [r4, #20]
 8007e14:	60a2      	str	r2, [r4, #8]
 8007e16:	e7f4      	b.n	8007e02 <__swsetup_r+0x8e>
 8007e18:	2000      	movs	r0, #0
 8007e1a:	e7f7      	b.n	8007e0c <__swsetup_r+0x98>
 8007e1c:	20000028 	.word	0x20000028

08007e20 <_raise_r>:
 8007e20:	291f      	cmp	r1, #31
 8007e22:	b538      	push	{r3, r4, r5, lr}
 8007e24:	4605      	mov	r5, r0
 8007e26:	460c      	mov	r4, r1
 8007e28:	d904      	bls.n	8007e34 <_raise_r+0x14>
 8007e2a:	2316      	movs	r3, #22
 8007e2c:	6003      	str	r3, [r0, #0]
 8007e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e32:	bd38      	pop	{r3, r4, r5, pc}
 8007e34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007e36:	b112      	cbz	r2, 8007e3e <_raise_r+0x1e>
 8007e38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e3c:	b94b      	cbnz	r3, 8007e52 <_raise_r+0x32>
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f000 f830 	bl	8007ea4 <_getpid_r>
 8007e44:	4622      	mov	r2, r4
 8007e46:	4601      	mov	r1, r0
 8007e48:	4628      	mov	r0, r5
 8007e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e4e:	f000 b817 	b.w	8007e80 <_kill_r>
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d00a      	beq.n	8007e6c <_raise_r+0x4c>
 8007e56:	1c59      	adds	r1, r3, #1
 8007e58:	d103      	bne.n	8007e62 <_raise_r+0x42>
 8007e5a:	2316      	movs	r3, #22
 8007e5c:	6003      	str	r3, [r0, #0]
 8007e5e:	2001      	movs	r0, #1
 8007e60:	e7e7      	b.n	8007e32 <_raise_r+0x12>
 8007e62:	2100      	movs	r1, #0
 8007e64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007e68:	4620      	mov	r0, r4
 8007e6a:	4798      	blx	r3
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	e7e0      	b.n	8007e32 <_raise_r+0x12>

08007e70 <raise>:
 8007e70:	4b02      	ldr	r3, [pc, #8]	@ (8007e7c <raise+0xc>)
 8007e72:	4601      	mov	r1, r0
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	f7ff bfd3 	b.w	8007e20 <_raise_r>
 8007e7a:	bf00      	nop
 8007e7c:	20000028 	.word	0x20000028

08007e80 <_kill_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	4d07      	ldr	r5, [pc, #28]	@ (8007ea0 <_kill_r+0x20>)
 8007e84:	2300      	movs	r3, #0
 8007e86:	4604      	mov	r4, r0
 8007e88:	4608      	mov	r0, r1
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	602b      	str	r3, [r5, #0]
 8007e8e:	f7f9 ffe9 	bl	8001e64 <_kill>
 8007e92:	1c43      	adds	r3, r0, #1
 8007e94:	d102      	bne.n	8007e9c <_kill_r+0x1c>
 8007e96:	682b      	ldr	r3, [r5, #0]
 8007e98:	b103      	cbz	r3, 8007e9c <_kill_r+0x1c>
 8007e9a:	6023      	str	r3, [r4, #0]
 8007e9c:	bd38      	pop	{r3, r4, r5, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20000880 	.word	0x20000880

08007ea4 <_getpid_r>:
 8007ea4:	f7f9 bfd6 	b.w	8001e54 <_getpid>

08007ea8 <__swhatbuf_r>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	460c      	mov	r4, r1
 8007eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	b096      	sub	sp, #88	@ 0x58
 8007eb4:	4615      	mov	r5, r2
 8007eb6:	461e      	mov	r6, r3
 8007eb8:	da0d      	bge.n	8007ed6 <__swhatbuf_r+0x2e>
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ec0:	f04f 0100 	mov.w	r1, #0
 8007ec4:	bf14      	ite	ne
 8007ec6:	2340      	movne	r3, #64	@ 0x40
 8007ec8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ecc:	2000      	movs	r0, #0
 8007ece:	6031      	str	r1, [r6, #0]
 8007ed0:	602b      	str	r3, [r5, #0]
 8007ed2:	b016      	add	sp, #88	@ 0x58
 8007ed4:	bd70      	pop	{r4, r5, r6, pc}
 8007ed6:	466a      	mov	r2, sp
 8007ed8:	f000 f848 	bl	8007f6c <_fstat_r>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	dbec      	blt.n	8007eba <__swhatbuf_r+0x12>
 8007ee0:	9901      	ldr	r1, [sp, #4]
 8007ee2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ee6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007eea:	4259      	negs	r1, r3
 8007eec:	4159      	adcs	r1, r3
 8007eee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ef2:	e7eb      	b.n	8007ecc <__swhatbuf_r+0x24>

08007ef4 <__smakebuf_r>:
 8007ef4:	898b      	ldrh	r3, [r1, #12]
 8007ef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ef8:	079d      	lsls	r5, r3, #30
 8007efa:	4606      	mov	r6, r0
 8007efc:	460c      	mov	r4, r1
 8007efe:	d507      	bpl.n	8007f10 <__smakebuf_r+0x1c>
 8007f00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	6123      	str	r3, [r4, #16]
 8007f08:	2301      	movs	r3, #1
 8007f0a:	6163      	str	r3, [r4, #20]
 8007f0c:	b003      	add	sp, #12
 8007f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f10:	ab01      	add	r3, sp, #4
 8007f12:	466a      	mov	r2, sp
 8007f14:	f7ff ffc8 	bl	8007ea8 <__swhatbuf_r>
 8007f18:	9f00      	ldr	r7, [sp, #0]
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	4639      	mov	r1, r7
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f7fe febe 	bl	8006ca0 <_malloc_r>
 8007f24:	b948      	cbnz	r0, 8007f3a <__smakebuf_r+0x46>
 8007f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f2a:	059a      	lsls	r2, r3, #22
 8007f2c:	d4ee      	bmi.n	8007f0c <__smakebuf_r+0x18>
 8007f2e:	f023 0303 	bic.w	r3, r3, #3
 8007f32:	f043 0302 	orr.w	r3, r3, #2
 8007f36:	81a3      	strh	r3, [r4, #12]
 8007f38:	e7e2      	b.n	8007f00 <__smakebuf_r+0xc>
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	6020      	str	r0, [r4, #0]
 8007f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f42:	81a3      	strh	r3, [r4, #12]
 8007f44:	9b01      	ldr	r3, [sp, #4]
 8007f46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f4a:	b15b      	cbz	r3, 8007f64 <__smakebuf_r+0x70>
 8007f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f50:	4630      	mov	r0, r6
 8007f52:	f000 f81d 	bl	8007f90 <_isatty_r>
 8007f56:	b128      	cbz	r0, 8007f64 <__smakebuf_r+0x70>
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	f023 0303 	bic.w	r3, r3, #3
 8007f5e:	f043 0301 	orr.w	r3, r3, #1
 8007f62:	81a3      	strh	r3, [r4, #12]
 8007f64:	89a3      	ldrh	r3, [r4, #12]
 8007f66:	431d      	orrs	r5, r3
 8007f68:	81a5      	strh	r5, [r4, #12]
 8007f6a:	e7cf      	b.n	8007f0c <__smakebuf_r+0x18>

08007f6c <_fstat_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	4d07      	ldr	r5, [pc, #28]	@ (8007f8c <_fstat_r+0x20>)
 8007f70:	2300      	movs	r3, #0
 8007f72:	4604      	mov	r4, r0
 8007f74:	4608      	mov	r0, r1
 8007f76:	4611      	mov	r1, r2
 8007f78:	602b      	str	r3, [r5, #0]
 8007f7a:	f7f9 ffd3 	bl	8001f24 <_fstat>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	d102      	bne.n	8007f88 <_fstat_r+0x1c>
 8007f82:	682b      	ldr	r3, [r5, #0]
 8007f84:	b103      	cbz	r3, 8007f88 <_fstat_r+0x1c>
 8007f86:	6023      	str	r3, [r4, #0]
 8007f88:	bd38      	pop	{r3, r4, r5, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000880 	.word	0x20000880

08007f90 <_isatty_r>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	4d06      	ldr	r5, [pc, #24]	@ (8007fac <_isatty_r+0x1c>)
 8007f94:	2300      	movs	r3, #0
 8007f96:	4604      	mov	r4, r0
 8007f98:	4608      	mov	r0, r1
 8007f9a:	602b      	str	r3, [r5, #0]
 8007f9c:	f7f9 ffd2 	bl	8001f44 <_isatty>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_isatty_r+0x1a>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_isatty_r+0x1a>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	20000880 	.word	0x20000880

08007fb0 <_init>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr

08007fbc <_fini>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	bf00      	nop
 8007fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc2:	bc08      	pop	{r3}
 8007fc4:	469e      	mov	lr, r3
 8007fc6:	4770      	bx	lr
